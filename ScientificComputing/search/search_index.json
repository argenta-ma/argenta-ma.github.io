{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introdu\u00e7\u00e3o a Computa\u00e7\u00e3o Cient\u00edfica Material desenvolvido e publicado pelo prof. Dr. Marco Andr\u00e9 Argenta. Este trabalho est\u00e1 licenciado com uma Licen\u00e7a Creative Commons - Atribui\u00e7\u00e3o-N\u00e3oComercial-CompartilhaIgual 4.0 Internacional . Este material \u00e9 um compilado das notas de aula do professor Doutor Marco Andr\u00e9 Argenta da disciplina de Introdu\u00e7\u00e3o \u00e0 Computa\u00e7\u00e3o Cient\u00edfica ministrada no Programa de P\u00f3s-gradua\u00e7\u00e3o em Engenharia de Constru\u00e7\u00e3o Civil. Somos engenheiros, matem\u00e1ticos, f\u00edsicos e n\u00e3o programadores profissionais. Nosso objetivo \u00e9 utilizar o computador para resolver um problema o mais r\u00e1pido poss\u00edvel. N\u00e3o podemos nos dar ao luxo de utilizar uma linguagem de programa\u00e7\u00e3o com sintaxe muito suja ou com compiladores muito t\u00e9cnicos. Por isso a ideia de usar python. A sintaxe \u00e9 simples, a programa\u00e7\u00e3o \u00e9 r\u00e1pida o que leva a uma boa produtividade, por\u00e9m a solu\u00e7\u00e3o \u00e9 lenta. O python por ser uma linguagem de programa\u00e7\u00e3o de alt\u00edssimo n\u00edvel e interpretada, ou seja, precisa de um interpretador para o c\u00f3digo funcionar, se torna lenta se comparada com outras linguagens compiladas. Mas, pensamos o seguinte, em uma linguagem compilada voc\u00ea, que n\u00e3o \u00e9 um programador profissional, leva muito tempo para aprender, depois outro tanto para programar e mais um tanto para retirar os erros do c\u00f3digo para enfim rodar em 15 segundos. Em python, voc\u00ea aprender muito f\u00e1cil, programa r\u00e1pido, acha os erros facilmente, pois a sintaxe n\u00e3o \u00e9 suja, e certo, leva 1 hora para rodar, mas, quem ser\u00e1 que sai ganhando? Na disciplina, utilizamos o python e o ambiente de desenvolvimento spyder fornecidos pela continuum em um grande pacote chamado Anaconda (dispon\u00edvel no site oficial ). Sugerimos absurdamente o uso do python na vers\u00e3o 2.7x , pelos vastos pacotes de terceiros dispon\u00edveis e acredite, voc\u00ea vai precisar de um deles. Na sequ\u00eancia, o conte\u00fado dessas notas de aula. Estrat\u00e9gia de aprendizado A melhor estrat\u00e9gia para aprender a programar \u00e9 se baseando e entendendo exemplos. Por isso, no curso, n\u00f3s vamos: Apresentar um problema; Apresentar o programa completo; Dissecar e discutir cada linha do programa; Simular programas na m\u00e3o (ser o computador!). Programando equa\u00e7\u00f5es Se voc\u00ea est\u00e1 em d\u00favida de como fazer isso, sente e fa\u00e7a! Os primeiros exemplos envolvem programas para resolver equa\u00e7\u00f5es matem\u00e1ticas. Vamos aprender como escrever e rodar um programa em Python, como trabalhar com as vari\u00e1veis, como computar fun\u00e7\u00f5es matem\u00e1ticas como $e^x$ e $sen(x)$, e como usar o Python para c\u00e1lculos interativos. Conte\u00fado do t\u00f3pico: Por que programar? Inicie aqui! Programas deve ser precisos! Vari\u00e1veis s\u00e3o nomes de objetos. Tipos de objetos int , float , str . Escolha nomes de vari\u00e1veis pr\u00f3ximos aos s\u00edmbolos matem\u00e1ticos do problema sendo resolvido Opera\u00e7\u00f5es aritm\u00e9ticas em Python: termo a termo (+/-) da esquerda para a direita, pot\u00eancias antes * e /, como na matem\u00e1tica! Use par\u00eanteses se ficar na d\u00favida Cuidado com divis\u00f5es por inteiros! Use o printf para controlar melhor as sa\u00eddas Termos importantes objeto, vari\u00e1veis, algoritmos, declara\u00e7\u00f5es, atribui\u00e7\u00f5es, implementa\u00e7\u00e3o, verifica\u00e7\u00e3o, depura\u00e7\u00e3o. La\u00e7os e listas Vai repetir a declara\u00e7\u00e3o? La\u00e7o nela... Como tarefas repetitivas em um programa podem ser automatizadas com o uso de la\u00e7os. Tamb\u00e9m ser\u00e3o introduzidos os objetos listas para o armazenamento e processamento de cole\u00e7\u00f5es de dados com ordem espec\u00edfica. La\u00e7os e listas junto com o t\u00f3pico anterior, consistem na base fundamental para o resto do curso. Conte\u00fado do t\u00f3pico: Precisa repetir uma declara\u00e7\u00e3o? Armazenar dados? Inicie aqui! La\u00e7os while e la\u00e7os for . Listas e tuplas. Precisa de mais informa\u00e7\u00e3o t\u00e9cnica sobre esse assunto em Python: veja docs.python.org . Exemplo: o que eu posso encontrar no m\u00f3dulo math ? V\u00e1 at\u00e9 o \u00edndice da Python Library Reference , clique index no canto superior direito. Clique em M . Procure por math (module) , e clique. Fun\u00e7\u00f5es e Ramifica\u00e7\u00f5es Se sim, fa\u00e7a isso, se n\u00e3o, fa\u00e7a aquilo. Introduzindo dois conceitos fundamentais e extremamente \u00fateis na programa\u00e7\u00e3o: fun\u00e7\u00f5es definidas pelo programador e ramifica\u00e7\u00e3o do fluxo do programa, o \u00faltimo tamb\u00e9m conhecido como testes if . Conte\u00fado do t\u00f3pico: Se sim, fa\u00e7a isso, se n\u00e3o, fa\u00e7a aquilo. Inicie aqui! Testes if . Fun\u00e7\u00f5es definidas pelo usu\u00e1rio. Argumentos de posi\u00e7\u00e3o e argumentos palavras-chave. Entrada do usu\u00e1rio e manipula\u00e7\u00e3o de erros Deixe para depois... fa\u00e7a agora gen\u00e9rico! Dados de entrada pode ser definidos diretamente no programa, ou seja, especificar explicitamente os valores de vari\u00e1veis: A = 0.1 ou w = 1 , o que pode ser adequado para pequenos programas ou programas espec\u00edficos. No geral, \u00e9 considerado uma boa pr\u00e1tica deixar que o usu\u00e1rio forne\u00e7a os dados de entrada quando o programa est\u00e1 rodando, sendo desnecess\u00e1rio modificar o programa propriamente dito para um novo conjunto de dados. Conte\u00fado do t\u00f3pico: Como programadores profissionais pegam suas entradas de dados? Inicie aqui! Entrada de dados por perguntas e respostas. Entrada de dados por linha de comando. Avaliando express\u00f5es de texto com o eval . Executando textos em Python usando o exec . Manipulando exce\u00e7\u00f5es. Levantando as exce\u00e7\u00f5es. Lendo e escrevendo em arquivos. Arranjos e gr\u00e1ficos de curvas S\u00e3o muitos os dados: use arranjos e fa\u00e7a um gr\u00e1fico para melhor visualizar! Um objeto lista \u00e9 \u00fatil para o armazenamento de dados, como uma sequ\u00eancia de objetos ou uma tabela de objetos. Um arranjo (no ingl\u00eas array) \u00e9 similar a uma lista, mas menos flex\u00edvel e muito mais eficiente computacionalmente. Quando usa-se um computador para a execu\u00e7\u00e3o de opera\u00e7\u00f5es matem\u00e1ticas usualmente termina-se com um monte de n\u00fameros e opera\u00e7\u00f5es matem\u00e1ticas associadas. Armazenar n\u00fameros em uma lista em tal contexto pode levar a programas lentos, enquanto com \\\"arrays\\\" pode-se ter um programa mais r\u00e1pido. Isso se torna crucial quando aplica\u00e7\u00f5es avan\u00e7adas demandam horas, dias, inclusive semanas para terminar de processar um programa. Qualquer ideia inteligente que reduza o tempo de execu\u00e7\u00e3o \u00e9 primordial. Conte\u00fado do t\u00f3pico: Arranjos e gr\u00e1ficos! Inicie aqui! Computa\u00e7\u00e3o com arranjos: aplica-se opera\u00e7\u00f5es matem\u00e1ticas \u00e0 quaisquer elementos (sem la\u00e7os). Ex.: sin(x**4)*exp(-x**2) , x pode ser arranjo ou escalar\\ para o arranjo, o i -\u00e9simo elemento se torna sin(x[i]**4)*exp(-x[i]**2) . Vetoriza\u00e7\u00e3o: fazer com que c\u00e1lculos matem\u00e1ticos se tornem v\u00e1lidos para arranjos. Express\u00f5es matem\u00e1ticas puras n\u00e3o necessitam vetoriza\u00e7\u00f5es extras. Equa\u00e7\u00f5es matem\u00e1ticas envolvendo testes if necessitam de vetoriza\u00e7\u00f5es extras. Gr\u00e1ficos de curvas: linhas retas s\u00e3o tra\u00e7adas entre cada ponto de dados. Anima\u00e7\u00f5es: fa\u00e7a uma c\u00f3pia de cada quadro do gr\u00e1fico e gere uma sequ\u00eancia sobre eles para produzir um filme. Dicion\u00e1rios e cadeias de caracteres Salve seus dados. Arquivos s\u00e3o utilizados para armazenamento permanente de informa\u00e7\u00f5es em um computador. De experi\u00eancias anteriores com o computador voc\u00ea j\u00e1 utilizou alguma forma de salvar informa\u00e7\u00f5es em um arquivo para posteriormente acess\u00e1-la novamente abrindo o arquivo. Como fazer o python escrever, ler e interpretar os dados novamente \u00e9 o que vamos ver nessa se\u00e7\u00e3o. Conte\u00fado do t\u00f3pico: Quer salvar os dados: Inicie aqui! Aprender a como ler um arquivo. Guardar dados em arquivos usando um novo tipo de objeto: dicion\u00e1rios Interpretar o conte\u00fado de arquivos usando a manipula\u00e7\u00e3o das cadeias de caracteres. Introdu\u00e7\u00e3o a Classes Dividir para conquistar. Uma classe empacota um conjunto de dados (vari\u00e1veis) com um conjunto de fun\u00e7\u00f5es que operam sobre esses dados. O objetivo \u00e9 alcan\u00e7ar um c\u00f3digo mais modular atrav\u00e9s do agrupamento de dados e fun\u00e7\u00f5es em unidades gerenci\u00e1veis (normalmente pequenas). A maioria dos c\u00e1lculos matem\u00e1ticos podem ser programados facilmente sem o uso de classes, mas em v\u00e1rios problemas, classes tornam as solu\u00e7\u00f5es mais elegantes e/ou deixam o c\u00f3digo mais f\u00e1cil de ser estendido a um novo est\u00e1gio. No mundo n\u00e3o matem\u00e1tico, existem conceitos e algoritmos a eles associados que ajudam a estruturar a solu\u00e7\u00e3o de um problema. Classes podem ajudar no entendimento do problema e contribuir para simplificar a modelagem dos dados e as a\u00e7\u00f5es em programas. Conte\u00fado do t\u00f3pico: Definindo uma classe. Inicie aqui! Usando uma classe. M\u00e9todos especiais. Com os m\u00e9todos especiais podemos criar novos objetos matem\u00e1ticos como vetores, polinomiais e n\u00fameros complexos e escrever aritm\u00e9tica. A chamada de um m\u00e9todo especial \u00e9 bem \u00fatil. Fun\u00e7\u00f5es com par\u00e2metros devem ser representadas por uma classe com os par\u00e2metros como atributos e com um m\u00e9todo de chamada especial para a avalia\u00e7\u00e3o da fun\u00e7\u00e3o. Programa\u00e7\u00e3o orientada a objeto O filho do pai do dono do cachorro ao lado do vizinho do amigo tem um peixe azul. Aqui vamos introduzir as ideias b\u00e1sicas da programa\u00e7\u00e3o orientada a objeto. Diferentes pessoas relacionam diferentes significados ao termo programa\u00e7\u00e3o orientada a objeto: algumas usam o termo para programa\u00e7\u00e3o com objetos em geral, enquanto outras para programa\u00e7\u00e3o com hierarquia de classes. N\u00f3s vamos com o segundo grupo, pois \u00e9 um termo largamente aceito em ci\u00eancia da computa\u00e7\u00e3o. Os primeiros poderiam utilizar de forma mais correta o termo programa\u00e7\u00e3o baseada em objetos. Como tudo em Python \u00e9 um objeto, n\u00f3s fazemos programa\u00e7\u00e3o orientada a objeto o tempo todo. Conte\u00fado do t\u00f3pico: Um novo conceito, hierarquia. Inicie aqui! Uma subclasse herda tudo da super classe. Quando usar uma subclasse ou super classe? O fluxo do programa pula entre super e sub classes. Leva tempo para dominar quando e como usar orienta\u00e7\u00e3o a objetos. Estude exemplos! N\u00fameros aleat\u00f3rios e jogos simples Em breve... Sequ\u00eancias e rela\u00e7\u00f5es de recorr\u00eancia Em breve... Programa\u00e7\u00e3o de equa\u00e7\u00f5es diferenciais Implemente uma vez, aplique em qualquer lugar. Vamos analisar equa\u00e7\u00f5es diferenciais ordin\u00e1rias (ODEs) de um ponto de vista mais abstrato que nos permitir\u00e1 formular m\u00e9todos num\u00e9ricos e criar aplicativos mais gerais aplic\u00e1veis \u00e0 v\u00e1rios problemas que envolvem equa\u00e7\u00f5es diferenciais na matem\u00e1tica, f\u00edsica, biologia e finan\u00e7as. Conte\u00fado do t\u00f3pico: Em breve... Exemplos de equa\u00e7\u00f5es diferenciais ordin\u00e1rias. Aproxima\u00e7\u00f5es da solu\u00e7\u00e3o O quanto \u00e9 preciso? Como resolver qualquer EDO. Gr\u00e1ficos tridimensionais Em breve... Programa\u00e7\u00e3o em paralelo Em breve... Interfaces gr\u00e1ficas de usu\u00e1rio (GUI) Em breve... Migrando Python para c\u00f3digo compilado Em breve... 1: Ver Aulas de python b\u00e1sico se voc\u00ea sentir dificuldade com o conte\u00fado destas aulas. O conte\u00fado \u00e9 baseado em diversas publica\u00e7\u00f5es, dentre elas uma em especial o livro A Primer on Scientific Programming with Python, de Hans Petter Langtangen.","title":"In\u00edcio"},{"location":"#introducao-a-computacao-cientifica","text":"Material desenvolvido e publicado pelo prof. Dr. Marco Andr\u00e9 Argenta. Este trabalho est\u00e1 licenciado com uma Licen\u00e7a Creative Commons - Atribui\u00e7\u00e3o-N\u00e3oComercial-CompartilhaIgual 4.0 Internacional . Este material \u00e9 um compilado das notas de aula do professor Doutor Marco Andr\u00e9 Argenta da disciplina de Introdu\u00e7\u00e3o \u00e0 Computa\u00e7\u00e3o Cient\u00edfica ministrada no Programa de P\u00f3s-gradua\u00e7\u00e3o em Engenharia de Constru\u00e7\u00e3o Civil. Somos engenheiros, matem\u00e1ticos, f\u00edsicos e n\u00e3o programadores profissionais. Nosso objetivo \u00e9 utilizar o computador para resolver um problema o mais r\u00e1pido poss\u00edvel. N\u00e3o podemos nos dar ao luxo de utilizar uma linguagem de programa\u00e7\u00e3o com sintaxe muito suja ou com compiladores muito t\u00e9cnicos. Por isso a ideia de usar python. A sintaxe \u00e9 simples, a programa\u00e7\u00e3o \u00e9 r\u00e1pida o que leva a uma boa produtividade, por\u00e9m a solu\u00e7\u00e3o \u00e9 lenta. O python por ser uma linguagem de programa\u00e7\u00e3o de alt\u00edssimo n\u00edvel e interpretada, ou seja, precisa de um interpretador para o c\u00f3digo funcionar, se torna lenta se comparada com outras linguagens compiladas. Mas, pensamos o seguinte, em uma linguagem compilada voc\u00ea, que n\u00e3o \u00e9 um programador profissional, leva muito tempo para aprender, depois outro tanto para programar e mais um tanto para retirar os erros do c\u00f3digo para enfim rodar em 15 segundos. Em python, voc\u00ea aprender muito f\u00e1cil, programa r\u00e1pido, acha os erros facilmente, pois a sintaxe n\u00e3o \u00e9 suja, e certo, leva 1 hora para rodar, mas, quem ser\u00e1 que sai ganhando? Na disciplina, utilizamos o python e o ambiente de desenvolvimento spyder fornecidos pela continuum em um grande pacote chamado Anaconda (dispon\u00edvel no site oficial ). Sugerimos absurdamente o uso do python na vers\u00e3o 2.7x , pelos vastos pacotes de terceiros dispon\u00edveis e acredite, voc\u00ea vai precisar de um deles. Na sequ\u00eancia, o conte\u00fado dessas notas de aula.","title":"Introdu\u00e7\u00e3o a Computa\u00e7\u00e3o Cient\u00edfica"},{"location":"#estrategia-de-aprendizado","text":"A melhor estrat\u00e9gia para aprender a programar \u00e9 se baseando e entendendo exemplos. Por isso, no curso, n\u00f3s vamos: Apresentar um problema; Apresentar o programa completo; Dissecar e discutir cada linha do programa; Simular programas na m\u00e3o (ser o computador!).","title":"Estrat\u00e9gia de aprendizado"},{"location":"#programando-equacoes","text":"Se voc\u00ea est\u00e1 em d\u00favida de como fazer isso, sente e fa\u00e7a! Os primeiros exemplos envolvem programas para resolver equa\u00e7\u00f5es matem\u00e1ticas. Vamos aprender como escrever e rodar um programa em Python, como trabalhar com as vari\u00e1veis, como computar fun\u00e7\u00f5es matem\u00e1ticas como $e^x$ e $sen(x)$, e como usar o Python para c\u00e1lculos interativos. Conte\u00fado do t\u00f3pico: Por que programar? Inicie aqui! Programas deve ser precisos! Vari\u00e1veis s\u00e3o nomes de objetos. Tipos de objetos int , float , str . Escolha nomes de vari\u00e1veis pr\u00f3ximos aos s\u00edmbolos matem\u00e1ticos do problema sendo resolvido Opera\u00e7\u00f5es aritm\u00e9ticas em Python: termo a termo (+/-) da esquerda para a direita, pot\u00eancias antes * e /, como na matem\u00e1tica! Use par\u00eanteses se ficar na d\u00favida Cuidado com divis\u00f5es por inteiros! Use o printf para controlar melhor as sa\u00eddas Termos importantes objeto, vari\u00e1veis, algoritmos, declara\u00e7\u00f5es, atribui\u00e7\u00f5es, implementa\u00e7\u00e3o, verifica\u00e7\u00e3o, depura\u00e7\u00e3o.","title":"Programando equa\u00e7\u00f5es"},{"location":"#lacos-e-listas","text":"Vai repetir a declara\u00e7\u00e3o? La\u00e7o nela... Como tarefas repetitivas em um programa podem ser automatizadas com o uso de la\u00e7os. Tamb\u00e9m ser\u00e3o introduzidos os objetos listas para o armazenamento e processamento de cole\u00e7\u00f5es de dados com ordem espec\u00edfica. La\u00e7os e listas junto com o t\u00f3pico anterior, consistem na base fundamental para o resto do curso. Conte\u00fado do t\u00f3pico: Precisa repetir uma declara\u00e7\u00e3o? Armazenar dados? Inicie aqui! La\u00e7os while e la\u00e7os for . Listas e tuplas. Precisa de mais informa\u00e7\u00e3o t\u00e9cnica sobre esse assunto em Python: veja docs.python.org . Exemplo: o que eu posso encontrar no m\u00f3dulo math ? V\u00e1 at\u00e9 o \u00edndice da Python Library Reference , clique index no canto superior direito. Clique em M . Procure por math (module) , e clique.","title":"La\u00e7os e listas"},{"location":"#funcoes-e-ramificacoes","text":"Se sim, fa\u00e7a isso, se n\u00e3o, fa\u00e7a aquilo. Introduzindo dois conceitos fundamentais e extremamente \u00fateis na programa\u00e7\u00e3o: fun\u00e7\u00f5es definidas pelo programador e ramifica\u00e7\u00e3o do fluxo do programa, o \u00faltimo tamb\u00e9m conhecido como testes if . Conte\u00fado do t\u00f3pico: Se sim, fa\u00e7a isso, se n\u00e3o, fa\u00e7a aquilo. Inicie aqui! Testes if . Fun\u00e7\u00f5es definidas pelo usu\u00e1rio. Argumentos de posi\u00e7\u00e3o e argumentos palavras-chave.","title":"Fun\u00e7\u00f5es e Ramifica\u00e7\u00f5es"},{"location":"#entrada-do-usuario-e-manipulacao-de-erros","text":"Deixe para depois... fa\u00e7a agora gen\u00e9rico! Dados de entrada pode ser definidos diretamente no programa, ou seja, especificar explicitamente os valores de vari\u00e1veis: A = 0.1 ou w = 1 , o que pode ser adequado para pequenos programas ou programas espec\u00edficos. No geral, \u00e9 considerado uma boa pr\u00e1tica deixar que o usu\u00e1rio forne\u00e7a os dados de entrada quando o programa est\u00e1 rodando, sendo desnecess\u00e1rio modificar o programa propriamente dito para um novo conjunto de dados. Conte\u00fado do t\u00f3pico: Como programadores profissionais pegam suas entradas de dados? Inicie aqui! Entrada de dados por perguntas e respostas. Entrada de dados por linha de comando. Avaliando express\u00f5es de texto com o eval . Executando textos em Python usando o exec . Manipulando exce\u00e7\u00f5es. Levantando as exce\u00e7\u00f5es. Lendo e escrevendo em arquivos.","title":"Entrada do usu\u00e1rio e manipula\u00e7\u00e3o de erros"},{"location":"#arranjos-e-graficos-de-curvas","text":"S\u00e3o muitos os dados: use arranjos e fa\u00e7a um gr\u00e1fico para melhor visualizar! Um objeto lista \u00e9 \u00fatil para o armazenamento de dados, como uma sequ\u00eancia de objetos ou uma tabela de objetos. Um arranjo (no ingl\u00eas array) \u00e9 similar a uma lista, mas menos flex\u00edvel e muito mais eficiente computacionalmente. Quando usa-se um computador para a execu\u00e7\u00e3o de opera\u00e7\u00f5es matem\u00e1ticas usualmente termina-se com um monte de n\u00fameros e opera\u00e7\u00f5es matem\u00e1ticas associadas. Armazenar n\u00fameros em uma lista em tal contexto pode levar a programas lentos, enquanto com \\\"arrays\\\" pode-se ter um programa mais r\u00e1pido. Isso se torna crucial quando aplica\u00e7\u00f5es avan\u00e7adas demandam horas, dias, inclusive semanas para terminar de processar um programa. Qualquer ideia inteligente que reduza o tempo de execu\u00e7\u00e3o \u00e9 primordial. Conte\u00fado do t\u00f3pico: Arranjos e gr\u00e1ficos! Inicie aqui! Computa\u00e7\u00e3o com arranjos: aplica-se opera\u00e7\u00f5es matem\u00e1ticas \u00e0 quaisquer elementos (sem la\u00e7os). Ex.: sin(x**4)*exp(-x**2) , x pode ser arranjo ou escalar\\ para o arranjo, o i -\u00e9simo elemento se torna sin(x[i]**4)*exp(-x[i]**2) . Vetoriza\u00e7\u00e3o: fazer com que c\u00e1lculos matem\u00e1ticos se tornem v\u00e1lidos para arranjos. Express\u00f5es matem\u00e1ticas puras n\u00e3o necessitam vetoriza\u00e7\u00f5es extras. Equa\u00e7\u00f5es matem\u00e1ticas envolvendo testes if necessitam de vetoriza\u00e7\u00f5es extras. Gr\u00e1ficos de curvas: linhas retas s\u00e3o tra\u00e7adas entre cada ponto de dados. Anima\u00e7\u00f5es: fa\u00e7a uma c\u00f3pia de cada quadro do gr\u00e1fico e gere uma sequ\u00eancia sobre eles para produzir um filme.","title":"Arranjos e gr\u00e1ficos de curvas"},{"location":"#dicionarios-e-cadeias-de-caracteres","text":"Salve seus dados. Arquivos s\u00e3o utilizados para armazenamento permanente de informa\u00e7\u00f5es em um computador. De experi\u00eancias anteriores com o computador voc\u00ea j\u00e1 utilizou alguma forma de salvar informa\u00e7\u00f5es em um arquivo para posteriormente acess\u00e1-la novamente abrindo o arquivo. Como fazer o python escrever, ler e interpretar os dados novamente \u00e9 o que vamos ver nessa se\u00e7\u00e3o. Conte\u00fado do t\u00f3pico: Quer salvar os dados: Inicie aqui! Aprender a como ler um arquivo. Guardar dados em arquivos usando um novo tipo de objeto: dicion\u00e1rios Interpretar o conte\u00fado de arquivos usando a manipula\u00e7\u00e3o das cadeias de caracteres.","title":"Dicion\u00e1rios e cadeias de caracteres"},{"location":"#introducao-a-classes","text":"Dividir para conquistar. Uma classe empacota um conjunto de dados (vari\u00e1veis) com um conjunto de fun\u00e7\u00f5es que operam sobre esses dados. O objetivo \u00e9 alcan\u00e7ar um c\u00f3digo mais modular atrav\u00e9s do agrupamento de dados e fun\u00e7\u00f5es em unidades gerenci\u00e1veis (normalmente pequenas). A maioria dos c\u00e1lculos matem\u00e1ticos podem ser programados facilmente sem o uso de classes, mas em v\u00e1rios problemas, classes tornam as solu\u00e7\u00f5es mais elegantes e/ou deixam o c\u00f3digo mais f\u00e1cil de ser estendido a um novo est\u00e1gio. No mundo n\u00e3o matem\u00e1tico, existem conceitos e algoritmos a eles associados que ajudam a estruturar a solu\u00e7\u00e3o de um problema. Classes podem ajudar no entendimento do problema e contribuir para simplificar a modelagem dos dados e as a\u00e7\u00f5es em programas. Conte\u00fado do t\u00f3pico: Definindo uma classe. Inicie aqui! Usando uma classe. M\u00e9todos especiais. Com os m\u00e9todos especiais podemos criar novos objetos matem\u00e1ticos como vetores, polinomiais e n\u00fameros complexos e escrever aritm\u00e9tica. A chamada de um m\u00e9todo especial \u00e9 bem \u00fatil. Fun\u00e7\u00f5es com par\u00e2metros devem ser representadas por uma classe com os par\u00e2metros como atributos e com um m\u00e9todo de chamada especial para a avalia\u00e7\u00e3o da fun\u00e7\u00e3o.","title":"Introdu\u00e7\u00e3o a Classes"},{"location":"#programacao-orientada-a-objeto","text":"O filho do pai do dono do cachorro ao lado do vizinho do amigo tem um peixe azul. Aqui vamos introduzir as ideias b\u00e1sicas da programa\u00e7\u00e3o orientada a objeto. Diferentes pessoas relacionam diferentes significados ao termo programa\u00e7\u00e3o orientada a objeto: algumas usam o termo para programa\u00e7\u00e3o com objetos em geral, enquanto outras para programa\u00e7\u00e3o com hierarquia de classes. N\u00f3s vamos com o segundo grupo, pois \u00e9 um termo largamente aceito em ci\u00eancia da computa\u00e7\u00e3o. Os primeiros poderiam utilizar de forma mais correta o termo programa\u00e7\u00e3o baseada em objetos. Como tudo em Python \u00e9 um objeto, n\u00f3s fazemos programa\u00e7\u00e3o orientada a objeto o tempo todo. Conte\u00fado do t\u00f3pico: Um novo conceito, hierarquia. Inicie aqui! Uma subclasse herda tudo da super classe. Quando usar uma subclasse ou super classe? O fluxo do programa pula entre super e sub classes. Leva tempo para dominar quando e como usar orienta\u00e7\u00e3o a objetos. Estude exemplos!","title":"Programa\u00e7\u00e3o orientada a objeto"},{"location":"#numeros-aleatorios-e-jogos-simples","text":"Em breve...","title":"N\u00fameros aleat\u00f3rios e jogos simples"},{"location":"#sequencias-e-relacoes-de-recorrencia","text":"Em breve...","title":"Sequ\u00eancias e rela\u00e7\u00f5es de recorr\u00eancia"},{"location":"#programacao-de-equacoes-diferenciais","text":"Implemente uma vez, aplique em qualquer lugar. Vamos analisar equa\u00e7\u00f5es diferenciais ordin\u00e1rias (ODEs) de um ponto de vista mais abstrato que nos permitir\u00e1 formular m\u00e9todos num\u00e9ricos e criar aplicativos mais gerais aplic\u00e1veis \u00e0 v\u00e1rios problemas que envolvem equa\u00e7\u00f5es diferenciais na matem\u00e1tica, f\u00edsica, biologia e finan\u00e7as. Conte\u00fado do t\u00f3pico: Em breve... Exemplos de equa\u00e7\u00f5es diferenciais ordin\u00e1rias. Aproxima\u00e7\u00f5es da solu\u00e7\u00e3o O quanto \u00e9 preciso? Como resolver qualquer EDO.","title":"Programa\u00e7\u00e3o de equa\u00e7\u00f5es diferenciais"},{"location":"#graficos-tridimensionais","text":"Em breve...","title":"Gr\u00e1ficos tridimensionais"},{"location":"#programacao-em-paralelo","text":"Em breve...","title":"Programa\u00e7\u00e3o em paralelo"},{"location":"#interfaces-graficas-de-usuario-gui","text":"Em breve...","title":"Interfaces gr\u00e1ficas de usu\u00e1rio (GUI)"},{"location":"#migrando-python-para-codigo-compilado","text":"Em breve... 1: Ver Aulas de python b\u00e1sico se voc\u00ea sentir dificuldade com o conte\u00fado destas aulas. O conte\u00fado \u00e9 baseado em diversas publica\u00e7\u00f5es, dentre elas uma em especial o livro A Primer on Scientific Programming with Python, de Hans Petter Langtangen.","title":"Migrando Python para c\u00f3digo compilado"},{"location":"arranjosgraficos/aprofundandoarranjos/","text":"Atribui\u00e7\u00e3o de um arranjo n\u00e3o copia os elementos! x = np . linspace ( 0 , 10 , 11 ) a = x a [ - 1 ] = 1000 x[-1] tamb\u00e9m se modifica para 1000? Sim, porque arranjos s\u00e3o mut\u00e1veis! Da mesma forma que listas. Para evitar isso, pode-se criar uma c\u00f3pia: a = x . copy () O mesmo ocorre para os cortes: a = x [ 4 :] ## a \u00e9 uma visualiza\u00e7\u00e3o de parte de x a [ - 1 ] = 1000 ## muda x[-1]! a = x [ 4 :] . copy () a [ - 1 ] = 1000 ## n\u00e3o muda x[-1] Opera\u00e7\u00f5es elemento-a-elemento em arranjos As duas seguintes declara\u00e7\u00f5es s\u00e3o matematicamente equivalentes: a = a + b ## a e b s\u00e3o arranjos (arrays) a += b No entanto: a = a + b \u00e9 calculado como: r1 = a + b a = r1 a += b \u00e9 calculado como a[i] += b[i] para todos os \u00edndices; a += b \u00e9 uma adi\u00e7\u00e3o elemento-a-elemento, pois modifica todo elemento de a , al\u00e9m de resultar em um novo arranjo, o resultado de a + b Opera\u00e7\u00f5es elemento-a-elemento podem reduzir o consumo de mem\u00f3ria Considere: a = ( 3 * x ** 4 + 2 * x + 4 ) / ( x + 1 ) Essas s\u00e3o os c\u00e1lculos efetuados pelo computador: r1 = x ** 4 ; r2 = 3 * r1 ; r3 = 2 * x ; r4 = r1 + r3 r5 = r4 + 4 ; r6 = x + 1 ; r7 = r5 / r6 ; a = r7 Com as opera\u00e7\u00f5es elemento-a-elemento pode-se eliminar 4 arranjos extras: a = x . copy () a **= 4 a *= 3 a += 2 * x a += 4 a /= x + 1 Economiza mem\u00f3ria mas n\u00e3o acelera tanto o c\u00f3digo Vamos medir o tempo computacional entre os dois: In [ 1 ]: def expression ( x ): ... : return ( 3 * x ** 4 + 2 * x + 4 ) / ( x + 1 ) ... : In [ 2 ]: def expression_inplace ( x ): ... : a = x . copy () ... : a **= 4 ... : a *= 3 ... : a += 2 * x ... : a += 4 ... : a /= x + 1 ... : return a ... : In [ 3 ]: import numpy as np In [ 4 ]: x = np . linspace ( 0 , 1 , 10000000 ) In [ 5 ]: % timeit expression ( x ) 1 loops , best of 3 : 771 ms per loop In [ 6 ]: % timeit expression_inplace ( x ) 1 loops , best of 3 : 728 ms per loop Apenas 5% de ganho de velocidade. Quando os arranjos s\u00e3o grandes, voc\u00ea precisa economizar mem\u00f3ria! Opera\u00e7\u00f5es \u00fateis com arranjos Fa\u00e7a um novo arranjo do mesmo tamanho que outro: import numpy as np x = np . linspace ( 0 , 1 , 100 ) ## x is numpy array a = x . copy () ## ou a = np . zeros ( x . shape , x . dtype ) ## ou a = np . zeros_like ( x ) ## zeros e o mesmo tamanho de x Convertendo para arranjos: a = asarray ( a ) b = asarray ( algumArranjo , dtype = float ) ## especificando o tipo dos dados Testando se um objeto \u00e9 um arranjo: >>> type ( a ) < type 'numpy.ndarray' > >>> isinstance ( a , ndarray ) True Exemplo: vetorizando uma fun\u00e7\u00e3o constante def f ( x ): return 2 A fun\u00e7\u00e3o vetorizada deve retornar 2. def fv ( x ): return zeros ( x . shape , x . dtype ) + 2 Vers\u00e3o mais completa, v\u00e1lida para escalares e arranjos: def f ( x ): if isinstance ( x , ( float , int )): return 2 elif isinstance ( x , ndarray ): return zeros ( x . shape , x . dtype ) + 2 else : raise TypeError ( 'x must be int/float/ndarray, not %s ' % type ( x )) Indexa\u00e7\u00e3o generalizada de arranjos Lembra-se da forma de corte: a[f:t:i] onde f, t e i s\u00e3o os \u00edndices in\u00edcio, fim e incremento? Qualquer lista ou arranjo de inteiros pode ser utilizado para indicar um conjunto de \u00edndices: >>> a = linspace ( 1 , 8 , 8 ) >>> a array ([ 1. , 2. , 3. , 4. , 5. , 6. , 7. , 8. ]) >>> a [[ 1 , 6 , 7 ]] = 10 >>> a array ([ 1. , 10. , 3. , 4. , 5. , 6. , 10. , 10. ]) >>> a [ range ( 2 , 8 , 3 )] = - 2 ## mesmo que a[2:8:3] = -2 >>> a array ([ 1. , 10. , - 2. , 4. , 5. , - 2. , 10. , 10. ]) Indexa\u00e7\u00e3o generalizada de arranjos com express\u00f5es boleanas >>> a < 0 [ False , False , True , False , False , True , False , False ] >>> a [ a < 0 ] ## todos os elementos negativos array ([ - 2. , - 2. ]) >>> a [ a < 0 ] = a . max () ## se a[i]<10, fa\u00e7a a[i]=10 >>> a array ([ 1. , 10. , 10. , 4. , 5. , 10. , 10. , 10. ]) >>> a [ a % 2 == 0 ] = - 1 Mais alguns exemplos: Arranjos bidimensionais Fazendo e preenchendo um arranjo bidimensional do numpy: A = zeros (( 3 , 4 )) ## tabela de n\u00fameros 3x4 A [ 0 , 0 ] = - 1 A [ 1 , 0 ] = 1 A [ 2 , 0 ] = 10 A [ 0 , 1 ] = - 5 ... A [ 2 , 3 ] = - 100 De uma lista para um arranjo Vamos fazer uma tabela de n\u00fameros em uma lista de listas: >>> Cgraus = [ - 30 + i * 10 for i in range ( 3 )] >>> Fgraus = [ 9. / 5 * C + 32 for C in Cgrauss ] >>> tabela = [[ C , F ] for C , F in zip ( Cgrauss , Fgraus )] >>> print tabela [[ - 30 , - 22.0 ], [ - 20 , - 4.0 ], [ - 10 , 14.0 ]] Convertendo em arranjo (NumPy array): >>> tabela2 = array ( tabela ) >>> print tabela2 [[ - 30. - 22. ] [ - 20. - 4. ] [ - 10. 14. ]] Como corre um la\u00e7o sobre um arranjo bidimensional >>> tabela2 . shape ## o numero de elementos por dire\u00e7\u00e3o ( 3 , 2 ) ## 3 linhas, 2 colunas Um la\u00e7o sobre todos os elementos do arranjo: >>> for i in range ( tabela2 . shape [ 0 ]): ... for j in range ( tabela2 . shape [ 1 ]): ... print 'tabela2[ %d , %d ] = %g ' % ( i , j , tabela2 [ i , j ]) ... tabela2 [ 0 , 0 ] = - 30 tabela2 [ 0 , 1 ] = - 22 ... tabela2 [ 2 , 1 ] = 14 Uma forma alternativa com \u00fanico la\u00e7o: >> for tupla_indice , valor in np . ndenumerate ( tabela2 ): ... print 'indice %s tem valor %g ' % \\ ... ( tupla_indice , tabela2 [ tupla_indice ]) ... indice ( 0 , 0 ) tem valor - 30 indice ( 0 , 1 ) tem valor - 22 ... indice ( 2 , 1 ) tem valor 14 >>> type ( tupla_indice ) < type 'tuple' > Como fazer cortes em arranjos bidimensionais Regra: podemos usar cortes no formato inicio:fim:incremento tabela2 [ 0 : tabela2 . shape [ 0 ], 1 ] ## 2 coluna (indice 1) array ([ - 22. , - 4. , 14. ]) >>> tabela2 [ 0 :, 1 ] ## mesmo array ([ - 22. , - 4. , 14. ]) >>> tabela2 [:, 1 ] ## mesmo array ([ - 22. , - 4. , 14. ]) >>> t = linspace ( 1 , 30 , 30 ) . reshape ( 5 , 6 ) >>> t [ 1 : - 1 : 2 , 2 :] array ([[ 9. , 10. , 11. , 12. ], [ 21. , 22. , 23. , 24. ]]) >>> t array ([[ 1. , 2. , 3. , 4. , 5. , 6. ], [ 7. , 8. , 9. , 10. , 11. , 12. ], [ 13. , 14. , 15. , 16. , 17. , 18. ], [ 19. , 20. , 21. , 22. , 23. , 24. ], [ 25. , 26. , 27. , 28. , 29. , 30. ]]) Sendo o t acima, o que t[1:-1:2, 2:] ser\u00e1? Mais alguns exemplos: Redu\u00e7\u00f5es b\u00e1sicas Calculando somas: x = np . array ([ 1 , 2 , 3 , 4 ]) np . sum ( x ) x . sum () Soma por linha e por coluna: x = np . array ([[ 1 , 1 ], [ 2 , 2 ]]) x x . sum ( axis = 0 ) ## colunas (primeira dimens\u00e3o) x [:, 0 ] . sum (), x [:, 1 ] . sum () x . sum ( axis = 1 ) ## linhas (segunda dimens\u00e3o) x [ 0 , :] . sum (), x [ 1 , :] . sum () A ideia \u00e9 a mesma em maiores dimens\u00f5es: x = np . random . rand ( 2 , 2 , 2 ) x . sum ( axis = 2 )[ 0 , 1 ] x [ 0 , 1 , :] . sum () Extremos: x = np . array ([ 1 , 3 , 2 ]) x . min () x . max () x . argmin () ## \u00edndice do m\u00ednimo x . argmax () ## \u00edndice do m\u00e1ximo Compara\u00e7\u00f5es de arranjos: a = np . zeros (( 100 , 100 )) np . any ( a != 0 ) np . all ( a == a ) a = np . array ([ 1 , 2 , 3 , 2 ]) b = np . array ([ 2 , 2 , 3 , 2 ]) c = np . array ([ 6 , 4 , 4 , 5 ]) (( a <= b ) & ( b <= c )) . all () Transmiss\u00e3o As opera\u00e7\u00f5es b\u00e1sicas nos arranjos do NumPy s\u00e3o elemento a elemento; Essas opera\u00e7\u00f5es s\u00f3 funcionam em arranjos de mesmo tamanho, no entanto, \u00e9 poss\u00edvel fazer opera\u00e7\u00f5es em arranjos de diferentes tamanhos se o NumPy puder transform\u00e1-las para que todas tenham o mesmo tamanho: essa conven\u00e7\u00e3o \u00e9 chamada de transmiss\u00e3o (Broadcasting). A imagem abaixo d\u00e1 um exemplo de broadcasting: Verificando: a = np . tile ( np . arange ( 0 , 40 , 10 ), ( 3 , 1 )) . T a b = np . array ([ 0 , 1 , 2 ]) a + b Um truque \u00fatil: a = np . arange ( 0 , 40 , 10 ) a . shape a = a [:, np . newaxis ] ## adiciona um novo eixo -> array 2D a . shape a a + b Ou seja, acabamos de utilizar a transmiss\u00e3o sem saber: a = np . ones (( 4 , 5 )) a [ 0 ] = 2 ## atribuimos uma array de dimens\u00e3o 0 a uma array de dimens\u00e3o 1 a Transmiss\u00e3o parece ser um pouco m\u00e1gico, mas na verdade \u00e9 bem natural utiliz\u00e1-lo quando se deseja resolver um problema no qual os dados de sa\u00edda s\u00e3o um arranjo com mais dimens\u00f5es que os dados de entrada. V\u00e1rios problemas do tipo grid-based ou netword-bases podem tamb\u00e9m utilizar transmiss\u00e3o. Por exemplo, se desejarmos calcular a dist\u00e2ncia da origem aos pontos em um grid de 10x10, podemos fazer: x , y = np . arange ( 5 ), np . arange ( 5 ) distance = np . sqrt ( x ** 2 + y [:, np . newaxis ] ** 2 ) distance Ou, em cores: plt . pcolor ( distance ) plt . colorbar () Detalhe: a fun\u00e7\u00e3o np.pgrid permite criar diretamento vetores x e y do exemplo anterior com duas \"dimens\u00f5es significativas\". x , y = np . ogrid [ 0 : 5 , 0 : 5 ] x , y x . shape , y . shape distance = np . sqrt ( x ** 2 + y ** 2 ) Ent\u00e3o, o np.ogrid \u00e9 muito \u00fatil quando precisarmos lidar com computa\u00e7\u00e3o de dados em grids. Por outro lado, np.mgrid oferece matrizes cheias de \u00edndices para os casos os n\u00e3o quisermos ou n\u00e3o pudermos nos beneficiar da transmiss\u00e3o: x , y = np . mgrid [ 0 : 4 , 0 : 4 ] x y Na pr\u00e1tica \u00e9 muito pouco utilizado. Manipula\u00e7\u00e3o de forma do arranjo Achatamento (flattening): a = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) a . ravel () a . T a . T . ravel () Maiores dimens\u00f5es se desfazem primeiro. Remodelagem (reshaping) opera\u00e7\u00e3o inversa ao achatamento: a . shape b = a . ravel () b b . reshape (( 2 , 3 )) Criando um array de forma diferente com outro array: a = np . arange ( 36 ) b = a . reshape (( 6 , 6 )) b ou: b = a . reshape (( 6 , - 1 )) Embaralhamento da dimens\u00e3o: a = np . arange ( 4 * 3 * 2 ) . reshape ( 4 , 3 , 2 ) a . shape a [ 0 , 2 , 1 ] b = a . transpose ( 1 , 2 , 0 ) b . shape b [ 2 , 1 , 0 ] Aten\u00e7\u00e3o: essa opera\u00e7\u00e3o cria uma visualiza\u00e7\u00e3o! Redimensionamento: a = np . arange ( 4 ) a . resize (( 8 ,)) a Mas para modificar redimensionar o arranjo ele n\u00e3o pode ter nenhuma visualiza\u00e7\u00e3o: b = a a . resize (( 4 ,)) Formato do NumPy O NumPy possui seu pr\u00f3prio formato de arquivo, n\u00e3o port\u00e1vel mas eficiente: dados = np . ones (( 3 , 3 )) np . save ( 'pop.npy' , dados ) dados3 = np . load ( 'pop.npy' ) As vantagens desse formato de arquivo s\u00e3o: Pode-se escrever arranjos diretamente em um arquivo; O formato \u00e9 bin\u00e1rio (r\u00e1pido)./li> A desvantagem \u00e9 que n\u00e3o \u00e9 port\u00e1vel, ou seja, voc\u00ea somente consegue abrir com um c\u00f3digo em Python usando o NumPy. Tipos de dados estruturados \u00c9 poss\u00edvel estruturar os dados de um arranjo definindo o seu tipo: codigo_sensor: cadeia de caracteres com 4 caracteres; posicao: ponto flutuante; valor: ponto flutuante. amostra = np . zeros (( 6 ,), dtype = [( 'codigo_sensor' , 'S4' ), ( 'posicao' , float ), ( 'valor' , float )]) print amostra . ndim print amostra . shape print amostra . dtype . names amostra [:] = [( 'ALFA' , 1 , 0.37 ), ( 'BETA' , 1 , 0.11 ), ( 'TAU' , 1 , 0.13 ), ( 'ALFA' , 1.5 , 0.37 ), ( 'ALFA' , 3 , 0.11 ), ( 'TAU' , 1.2 , 0.13 )] print amostra Acesso aos campos funciona pela indexa\u00e7\u00e3o com nomes do campo: amostra = np . zeros (( 6 ,), dtype = [( 'codigo_sensor' , 'S4' ), ( 'posicao' , float ), ( 'valor' , float )]) amostra [ 'codigo_sensor' ] amostra [ 'valor' ] amostra [ 0 ] amostra [ 0 ][ 'codigo_sensor' ] = 'TAU' amostra [ 0 ] M\u00faltiplos campos ao mesmo tempo: samples [[ 'posicao' , 'valor' ]] A indexa\u00e7\u00e3o sofisticada funciona, como usual: samples [ samples [ 'sensor_code' ] == 'ALFA' ] Observa\u00e7\u00e3o: existem um monte de outras sintaxes para a constru\u00e7\u00e3o de arranjos estruturados, veja aqui e aqui . Tarefa Desafio: Criar uma aplica\u00e7\u00e3o que contenha pelo menos uma ramifica\u00e7\u00e3o e um la\u00e7o sem utilizar declara\u00e7\u00f5es com if , for e while . O que \u00e9 uma aplica\u00e7\u00e3o? \u00c9 a utiliza\u00e7\u00e3o de um conceito matem\u00e1tico ou f\u00edsico para a resolu\u00e7\u00e3o de um determinado problema. Requisitos \u00e0 cumprir na tarefa: A aplica\u00e7\u00e3o deve ser composta de um programa principal e seus m\u00f3dulos (pelo menos 1); Tanto no programa principal quanto nos m\u00f3dulos devem ser utilizadas fun\u00e7\u00f5es e fun\u00e7\u00f5es teste (pelo menos uma teste em cada); Levante seus poss\u00edveis erros com try e except ; Todas as fun\u00e7\u00f5es devem estar documentadas; Os resultados da aplica\u00e7\u00e3o devem ser ilustrados com um gr\u00e1fico; O gr\u00e1fico de resultados deve ser personalizado.","title":"Aprofundando em arranjos"},{"location":"arranjosgraficos/aprofundandoarranjos/#atribuicao-de-um-arranjo-nao-copia-os-elementos","text":"x = np . linspace ( 0 , 10 , 11 ) a = x a [ - 1 ] = 1000 x[-1] tamb\u00e9m se modifica para 1000? Sim, porque arranjos s\u00e3o mut\u00e1veis! Da mesma forma que listas. Para evitar isso, pode-se criar uma c\u00f3pia: a = x . copy () O mesmo ocorre para os cortes: a = x [ 4 :] ## a \u00e9 uma visualiza\u00e7\u00e3o de parte de x a [ - 1 ] = 1000 ## muda x[-1]! a = x [ 4 :] . copy () a [ - 1 ] = 1000 ## n\u00e3o muda x[-1]","title":"Atribui\u00e7\u00e3o de um arranjo n\u00e3o copia os elementos!"},{"location":"arranjosgraficos/aprofundandoarranjos/#operacoes-elemento-a-elemento-em-arranjos","text":"As duas seguintes declara\u00e7\u00f5es s\u00e3o matematicamente equivalentes: a = a + b ## a e b s\u00e3o arranjos (arrays) a += b No entanto: a = a + b \u00e9 calculado como: r1 = a + b a = r1 a += b \u00e9 calculado como a[i] += b[i] para todos os \u00edndices; a += b \u00e9 uma adi\u00e7\u00e3o elemento-a-elemento, pois modifica todo elemento de a , al\u00e9m de resultar em um novo arranjo, o resultado de a + b","title":"Opera\u00e7\u00f5es elemento-a-elemento em arranjos"},{"location":"arranjosgraficos/aprofundandoarranjos/#operacoes-elemento-a-elemento-podem-reduzir-o-consumo-de-memoria","text":"Considere: a = ( 3 * x ** 4 + 2 * x + 4 ) / ( x + 1 ) Essas s\u00e3o os c\u00e1lculos efetuados pelo computador: r1 = x ** 4 ; r2 = 3 * r1 ; r3 = 2 * x ; r4 = r1 + r3 r5 = r4 + 4 ; r6 = x + 1 ; r7 = r5 / r6 ; a = r7 Com as opera\u00e7\u00f5es elemento-a-elemento pode-se eliminar 4 arranjos extras: a = x . copy () a **= 4 a *= 3 a += 2 * x a += 4 a /= x + 1","title":"Opera\u00e7\u00f5es elemento-a-elemento podem reduzir o consumo de mem\u00f3ria"},{"location":"arranjosgraficos/aprofundandoarranjos/#economiza-memoria-mas-nao-acelera-tanto-o-codigo","text":"Vamos medir o tempo computacional entre os dois: In [ 1 ]: def expression ( x ): ... : return ( 3 * x ** 4 + 2 * x + 4 ) / ( x + 1 ) ... : In [ 2 ]: def expression_inplace ( x ): ... : a = x . copy () ... : a **= 4 ... : a *= 3 ... : a += 2 * x ... : a += 4 ... : a /= x + 1 ... : return a ... : In [ 3 ]: import numpy as np In [ 4 ]: x = np . linspace ( 0 , 1 , 10000000 ) In [ 5 ]: % timeit expression ( x ) 1 loops , best of 3 : 771 ms per loop In [ 6 ]: % timeit expression_inplace ( x ) 1 loops , best of 3 : 728 ms per loop Apenas 5% de ganho de velocidade. Quando os arranjos s\u00e3o grandes, voc\u00ea precisa economizar mem\u00f3ria!","title":"Economiza mem\u00f3ria mas n\u00e3o acelera tanto o c\u00f3digo"},{"location":"arranjosgraficos/aprofundandoarranjos/#operacoes-uteis-com-arranjos","text":"Fa\u00e7a um novo arranjo do mesmo tamanho que outro: import numpy as np x = np . linspace ( 0 , 1 , 100 ) ## x is numpy array a = x . copy () ## ou a = np . zeros ( x . shape , x . dtype ) ## ou a = np . zeros_like ( x ) ## zeros e o mesmo tamanho de x Convertendo para arranjos: a = asarray ( a ) b = asarray ( algumArranjo , dtype = float ) ## especificando o tipo dos dados Testando se um objeto \u00e9 um arranjo: >>> type ( a ) < type 'numpy.ndarray' > >>> isinstance ( a , ndarray ) True","title":"Opera\u00e7\u00f5es \u00fateis com arranjos"},{"location":"arranjosgraficos/aprofundandoarranjos/#exemplo-vetorizando-uma-funcao-constante","text":"def f ( x ): return 2 A fun\u00e7\u00e3o vetorizada deve retornar 2. def fv ( x ): return zeros ( x . shape , x . dtype ) + 2 Vers\u00e3o mais completa, v\u00e1lida para escalares e arranjos: def f ( x ): if isinstance ( x , ( float , int )): return 2 elif isinstance ( x , ndarray ): return zeros ( x . shape , x . dtype ) + 2 else : raise TypeError ( 'x must be int/float/ndarray, not %s ' % type ( x ))","title":"Exemplo: vetorizando uma fun\u00e7\u00e3o constante"},{"location":"arranjosgraficos/aprofundandoarranjos/#indexacao-generalizada-de-arranjos","text":"Lembra-se da forma de corte: a[f:t:i] onde f, t e i s\u00e3o os \u00edndices in\u00edcio, fim e incremento? Qualquer lista ou arranjo de inteiros pode ser utilizado para indicar um conjunto de \u00edndices: >>> a = linspace ( 1 , 8 , 8 ) >>> a array ([ 1. , 2. , 3. , 4. , 5. , 6. , 7. , 8. ]) >>> a [[ 1 , 6 , 7 ]] = 10 >>> a array ([ 1. , 10. , 3. , 4. , 5. , 6. , 10. , 10. ]) >>> a [ range ( 2 , 8 , 3 )] = - 2 ## mesmo que a[2:8:3] = -2 >>> a array ([ 1. , 10. , - 2. , 4. , 5. , - 2. , 10. , 10. ])","title":"Indexa\u00e7\u00e3o generalizada de arranjos"},{"location":"arranjosgraficos/aprofundandoarranjos/#indexacao-generalizada-de-arranjos-com-expressoes-boleanas","text":">>> a < 0 [ False , False , True , False , False , True , False , False ] >>> a [ a < 0 ] ## todos os elementos negativos array ([ - 2. , - 2. ]) >>> a [ a < 0 ] = a . max () ## se a[i]<10, fa\u00e7a a[i]=10 >>> a array ([ 1. , 10. , 10. , 4. , 5. , 10. , 10. , 10. ]) >>> a [ a % 2 == 0 ] = - 1 Mais alguns exemplos:","title":"Indexa\u00e7\u00e3o generalizada de arranjos com express\u00f5es boleanas"},{"location":"arranjosgraficos/aprofundandoarranjos/#arranjos-bidimensionais","text":"Fazendo e preenchendo um arranjo bidimensional do numpy: A = zeros (( 3 , 4 )) ## tabela de n\u00fameros 3x4 A [ 0 , 0 ] = - 1 A [ 1 , 0 ] = 1 A [ 2 , 0 ] = 10 A [ 0 , 1 ] = - 5 ... A [ 2 , 3 ] = - 100","title":"Arranjos bidimensionais"},{"location":"arranjosgraficos/aprofundandoarranjos/#de-uma-lista-para-um-arranjo","text":"Vamos fazer uma tabela de n\u00fameros em uma lista de listas: >>> Cgraus = [ - 30 + i * 10 for i in range ( 3 )] >>> Fgraus = [ 9. / 5 * C + 32 for C in Cgrauss ] >>> tabela = [[ C , F ] for C , F in zip ( Cgrauss , Fgraus )] >>> print tabela [[ - 30 , - 22.0 ], [ - 20 , - 4.0 ], [ - 10 , 14.0 ]] Convertendo em arranjo (NumPy array): >>> tabela2 = array ( tabela ) >>> print tabela2 [[ - 30. - 22. ] [ - 20. - 4. ] [ - 10. 14. ]]","title":"De uma lista para um arranjo"},{"location":"arranjosgraficos/aprofundandoarranjos/#como-corre-um-laco-sobre-um-arranjo-bidimensional","text":">>> tabela2 . shape ## o numero de elementos por dire\u00e7\u00e3o ( 3 , 2 ) ## 3 linhas, 2 colunas Um la\u00e7o sobre todos os elementos do arranjo: >>> for i in range ( tabela2 . shape [ 0 ]): ... for j in range ( tabela2 . shape [ 1 ]): ... print 'tabela2[ %d , %d ] = %g ' % ( i , j , tabela2 [ i , j ]) ... tabela2 [ 0 , 0 ] = - 30 tabela2 [ 0 , 1 ] = - 22 ... tabela2 [ 2 , 1 ] = 14 Uma forma alternativa com \u00fanico la\u00e7o: >> for tupla_indice , valor in np . ndenumerate ( tabela2 ): ... print 'indice %s tem valor %g ' % \\ ... ( tupla_indice , tabela2 [ tupla_indice ]) ... indice ( 0 , 0 ) tem valor - 30 indice ( 0 , 1 ) tem valor - 22 ... indice ( 2 , 1 ) tem valor 14 >>> type ( tupla_indice ) < type 'tuple' >","title":"Como corre um la\u00e7o sobre um arranjo bidimensional"},{"location":"arranjosgraficos/aprofundandoarranjos/#como-fazer-cortes-em-arranjos-bidimensionais","text":"Regra: podemos usar cortes no formato inicio:fim:incremento tabela2 [ 0 : tabela2 . shape [ 0 ], 1 ] ## 2 coluna (indice 1) array ([ - 22. , - 4. , 14. ]) >>> tabela2 [ 0 :, 1 ] ## mesmo array ([ - 22. , - 4. , 14. ]) >>> tabela2 [:, 1 ] ## mesmo array ([ - 22. , - 4. , 14. ]) >>> t = linspace ( 1 , 30 , 30 ) . reshape ( 5 , 6 ) >>> t [ 1 : - 1 : 2 , 2 :] array ([[ 9. , 10. , 11. , 12. ], [ 21. , 22. , 23. , 24. ]]) >>> t array ([[ 1. , 2. , 3. , 4. , 5. , 6. ], [ 7. , 8. , 9. , 10. , 11. , 12. ], [ 13. , 14. , 15. , 16. , 17. , 18. ], [ 19. , 20. , 21. , 22. , 23. , 24. ], [ 25. , 26. , 27. , 28. , 29. , 30. ]]) Sendo o t acima, o que t[1:-1:2, 2:] ser\u00e1? Mais alguns exemplos:","title":"Como fazer cortes em arranjos bidimensionais"},{"location":"arranjosgraficos/aprofundandoarranjos/#reducoes-basicas","text":"Calculando somas: x = np . array ([ 1 , 2 , 3 , 4 ]) np . sum ( x ) x . sum () Soma por linha e por coluna: x = np . array ([[ 1 , 1 ], [ 2 , 2 ]]) x x . sum ( axis = 0 ) ## colunas (primeira dimens\u00e3o) x [:, 0 ] . sum (), x [:, 1 ] . sum () x . sum ( axis = 1 ) ## linhas (segunda dimens\u00e3o) x [ 0 , :] . sum (), x [ 1 , :] . sum () A ideia \u00e9 a mesma em maiores dimens\u00f5es: x = np . random . rand ( 2 , 2 , 2 ) x . sum ( axis = 2 )[ 0 , 1 ] x [ 0 , 1 , :] . sum () Extremos: x = np . array ([ 1 , 3 , 2 ]) x . min () x . max () x . argmin () ## \u00edndice do m\u00ednimo x . argmax () ## \u00edndice do m\u00e1ximo Compara\u00e7\u00f5es de arranjos: a = np . zeros (( 100 , 100 )) np . any ( a != 0 ) np . all ( a == a ) a = np . array ([ 1 , 2 , 3 , 2 ]) b = np . array ([ 2 , 2 , 3 , 2 ]) c = np . array ([ 6 , 4 , 4 , 5 ]) (( a <= b ) & ( b <= c )) . all ()","title":"Redu\u00e7\u00f5es b\u00e1sicas"},{"location":"arranjosgraficos/aprofundandoarranjos/#transmissao","text":"As opera\u00e7\u00f5es b\u00e1sicas nos arranjos do NumPy s\u00e3o elemento a elemento; Essas opera\u00e7\u00f5es s\u00f3 funcionam em arranjos de mesmo tamanho, no entanto, \u00e9 poss\u00edvel fazer opera\u00e7\u00f5es em arranjos de diferentes tamanhos se o NumPy puder transform\u00e1-las para que todas tenham o mesmo tamanho: essa conven\u00e7\u00e3o \u00e9 chamada de transmiss\u00e3o (Broadcasting). A imagem abaixo d\u00e1 um exemplo de broadcasting: Verificando: a = np . tile ( np . arange ( 0 , 40 , 10 ), ( 3 , 1 )) . T a b = np . array ([ 0 , 1 , 2 ]) a + b Um truque \u00fatil: a = np . arange ( 0 , 40 , 10 ) a . shape a = a [:, np . newaxis ] ## adiciona um novo eixo -> array 2D a . shape a a + b Ou seja, acabamos de utilizar a transmiss\u00e3o sem saber: a = np . ones (( 4 , 5 )) a [ 0 ] = 2 ## atribuimos uma array de dimens\u00e3o 0 a uma array de dimens\u00e3o 1 a Transmiss\u00e3o parece ser um pouco m\u00e1gico, mas na verdade \u00e9 bem natural utiliz\u00e1-lo quando se deseja resolver um problema no qual os dados de sa\u00edda s\u00e3o um arranjo com mais dimens\u00f5es que os dados de entrada. V\u00e1rios problemas do tipo grid-based ou netword-bases podem tamb\u00e9m utilizar transmiss\u00e3o. Por exemplo, se desejarmos calcular a dist\u00e2ncia da origem aos pontos em um grid de 10x10, podemos fazer: x , y = np . arange ( 5 ), np . arange ( 5 ) distance = np . sqrt ( x ** 2 + y [:, np . newaxis ] ** 2 ) distance Ou, em cores: plt . pcolor ( distance ) plt . colorbar () Detalhe: a fun\u00e7\u00e3o np.pgrid permite criar diretamento vetores x e y do exemplo anterior com duas \"dimens\u00f5es significativas\". x , y = np . ogrid [ 0 : 5 , 0 : 5 ] x , y x . shape , y . shape distance = np . sqrt ( x ** 2 + y ** 2 ) Ent\u00e3o, o np.ogrid \u00e9 muito \u00fatil quando precisarmos lidar com computa\u00e7\u00e3o de dados em grids. Por outro lado, np.mgrid oferece matrizes cheias de \u00edndices para os casos os n\u00e3o quisermos ou n\u00e3o pudermos nos beneficiar da transmiss\u00e3o: x , y = np . mgrid [ 0 : 4 , 0 : 4 ] x y Na pr\u00e1tica \u00e9 muito pouco utilizado.","title":"Transmiss\u00e3o"},{"location":"arranjosgraficos/aprofundandoarranjos/#manipulacao-de-forma-do-arranjo","text":"Achatamento (flattening): a = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) a . ravel () a . T a . T . ravel () Maiores dimens\u00f5es se desfazem primeiro. Remodelagem (reshaping) opera\u00e7\u00e3o inversa ao achatamento: a . shape b = a . ravel () b b . reshape (( 2 , 3 )) Criando um array de forma diferente com outro array: a = np . arange ( 36 ) b = a . reshape (( 6 , 6 )) b ou: b = a . reshape (( 6 , - 1 )) Embaralhamento da dimens\u00e3o: a = np . arange ( 4 * 3 * 2 ) . reshape ( 4 , 3 , 2 ) a . shape a [ 0 , 2 , 1 ] b = a . transpose ( 1 , 2 , 0 ) b . shape b [ 2 , 1 , 0 ] Aten\u00e7\u00e3o: essa opera\u00e7\u00e3o cria uma visualiza\u00e7\u00e3o! Redimensionamento: a = np . arange ( 4 ) a . resize (( 8 ,)) a Mas para modificar redimensionar o arranjo ele n\u00e3o pode ter nenhuma visualiza\u00e7\u00e3o: b = a a . resize (( 4 ,))","title":"Manipula\u00e7\u00e3o de forma do arranjo"},{"location":"arranjosgraficos/aprofundandoarranjos/#formato-do-numpy","text":"O NumPy possui seu pr\u00f3prio formato de arquivo, n\u00e3o port\u00e1vel mas eficiente: dados = np . ones (( 3 , 3 )) np . save ( 'pop.npy' , dados ) dados3 = np . load ( 'pop.npy' ) As vantagens desse formato de arquivo s\u00e3o: Pode-se escrever arranjos diretamente em um arquivo; O formato \u00e9 bin\u00e1rio (r\u00e1pido)./li> A desvantagem \u00e9 que n\u00e3o \u00e9 port\u00e1vel, ou seja, voc\u00ea somente consegue abrir com um c\u00f3digo em Python usando o NumPy.","title":"Formato do NumPy"},{"location":"arranjosgraficos/aprofundandoarranjos/#tipos-de-dados-estruturados","text":"\u00c9 poss\u00edvel estruturar os dados de um arranjo definindo o seu tipo: codigo_sensor: cadeia de caracteres com 4 caracteres; posicao: ponto flutuante; valor: ponto flutuante. amostra = np . zeros (( 6 ,), dtype = [( 'codigo_sensor' , 'S4' ), ( 'posicao' , float ), ( 'valor' , float )]) print amostra . ndim print amostra . shape print amostra . dtype . names amostra [:] = [( 'ALFA' , 1 , 0.37 ), ( 'BETA' , 1 , 0.11 ), ( 'TAU' , 1 , 0.13 ), ( 'ALFA' , 1.5 , 0.37 ), ( 'ALFA' , 3 , 0.11 ), ( 'TAU' , 1.2 , 0.13 )] print amostra Acesso aos campos funciona pela indexa\u00e7\u00e3o com nomes do campo: amostra = np . zeros (( 6 ,), dtype = [( 'codigo_sensor' , 'S4' ), ( 'posicao' , float ), ( 'valor' , float )]) amostra [ 'codigo_sensor' ] amostra [ 'valor' ] amostra [ 0 ] amostra [ 0 ][ 'codigo_sensor' ] = 'TAU' amostra [ 0 ] M\u00faltiplos campos ao mesmo tempo: samples [[ 'posicao' , 'valor' ]] A indexa\u00e7\u00e3o sofisticada funciona, como usual: samples [ samples [ 'sensor_code' ] == 'ALFA' ] Observa\u00e7\u00e3o: existem um monte de outras sintaxes para a constru\u00e7\u00e3o de arranjos estruturados, veja aqui e aqui .","title":"Tipos de dados estruturados"},{"location":"arranjosgraficos/aprofundandoarranjos/#tarefa","text":"Desafio: Criar uma aplica\u00e7\u00e3o que contenha pelo menos uma ramifica\u00e7\u00e3o e um la\u00e7o sem utilizar declara\u00e7\u00f5es com if , for e while . O que \u00e9 uma aplica\u00e7\u00e3o? \u00c9 a utiliza\u00e7\u00e3o de um conceito matem\u00e1tico ou f\u00edsico para a resolu\u00e7\u00e3o de um determinado problema. Requisitos \u00e0 cumprir na tarefa: A aplica\u00e7\u00e3o deve ser composta de um programa principal e seus m\u00f3dulos (pelo menos 1); Tanto no programa principal quanto nos m\u00f3dulos devem ser utilizadas fun\u00e7\u00f5es e fun\u00e7\u00f5es teste (pelo menos uma teste em cada); Levante seus poss\u00edveis erros com try e except ; Todas as fun\u00e7\u00f5es devem estar documentadas; Os resultados da aplica\u00e7\u00e3o devem ser ilustrados com um gr\u00e1fico; O gr\u00e1fico de resultados deve ser personalizado.","title":"Tarefa"},{"location":"arranjosgraficos/arranjosgraficos/","text":"Arranjos e gr\u00e1ficos de curvas S\u00e3o muitos os dados: use arranjos e grafique para melhor visualizar! Um objeto lista \u00e9 \u00fatil para o armazenamento de dados, como uma sequ\u00eancia de objetos ou uma tabela de objetos. Um arranjo (no ingl\u00eas array) \u00e9 similar a uma lista, mas menos flex\u00edvel e muito mais eficiente computacionalmente. Quando usa-se um computador para a execu\u00e7\u00e3o de opera\u00e7\u00f5es matem\u00e1ticas usualmente termina-se com um monte de n\u00fameros e opera\u00e7\u00f5es matem\u00e1ticas associadas. Armazenar n\u00fameros em uma lista em tal contexto pode levar a programas lentos, enquanto com \\\"arrays\\\" pode-se ter um programa mais r\u00e1pido. Isso se torna crucial quando aplica\u00e7\u00f5es avan\u00e7adas demandam horas, dias, inclusive semanas para terminar de processar um programa. Qualquer id\u00e9ia inteligente que reduza o tempo de execu\u00e7\u00e3o \u00e9 primordial. Vamos aprender a visualizar fun\u00e7\u00f5es como: Como escrever programas para produzir tais gr\u00e1ficos? Precisamos primeiro aprender sobre um novo objeto, os arranjos (array) Curvas $y=f(x)$ s\u00e3o visualizadas atrav\u00e9s do desenho de linhas retas entre pontos ao longo de uma curva; As coordenadas desses pontos precisam ser armazenadas; Podemos usar listas ou os arranjos; Os arranjos s\u00e3o como as listas, mas mais eficientes computacionalmente; Os arranjos fazem muito mais que ajudar no gr\u00e1fico de curvas! O que precisamos saber sobre arranjos Em geral, arranjos unidimensionais podem representar um vetor $v=(v_0, ..., v_{n-1}); Arranjos tamb\u00e9m podem ser multidimensionais, podemos representar com eles matrizes e tensores. \\left\\lbrack\\begin{array}{cccc} 0 & 12 & -1 & 5\\\\ -1 & -1 & -1 & 0\\\\ 11 & 5 & 5 & -2 \\end{array}\\right\\rbrack \\hspace{1cm} A = \\left\\lbrack\\begin{array}{ccc} A\\_{0,0} & \\cdots & A\\_{0,n-1}\\\\ \\vdots & \\ddots & \\vdots\\\\ A\\_{m-1,0} & \\cdots & A\\_{m-1,n-1} \\end{array}\\right\\rbrack Arranjos (arrays) est\u00e3o dispon\u00edveis em Python atrav\u00e9s do pacote NumPy (Numerical Python). Armazenando pontos $(x,y)$ sobre uma curva em arranjos Coletando os pontos de uma fun\u00e7\u00e3o $y=f(x)$: >>> import numpy as np >>> n = 5 ## n\u00famero de pontos >>> x = np . linspace ( 0 , 1 , n ) ## n pontos em [0, 1] >>> y = np . zeros ( n ) ## n zeros (em float) >>> for i in xrange ( n ): ... y [ i ] = f ( x [ i ]) ... Notas: xrange \u00e9 com o range mas mais veloz, pois em valores de n grandes, ele n\u00e3o gera uma lista de inteiros, mas permite correr sobre os valores diretamente; Arranjos s\u00e3o sempre criados por fun\u00e7\u00f5es numpy . Arranjos n\u00e3o s\u00e3o flex\u00edveis como as listas, mas muito mais eficientes computacionalmente Elementos da lista podem ser qualquer objeto Python; Elementos dos arranjos devem ser de apenas um \u00fanico tipo; Os arranjos s\u00e3o muito eficientes no armazenamento na mem\u00f3ria e no c\u00e1lculo se os elementos forem int , float ou complex ; Dica: use arranjos para sequencias de n\u00fameros! Podemos trabalhar com arranjos inteiros de uma s\u00f3 vez Podemos manipular arranjos inteiros ao inv\u00e9s de manipular um elemento por vez. Calcule o seno de um arranjo: from math import sin for i in xrange ( len ( x )): y [ i ] = sin ( x [ i ]) No entanto, se x for um arranjo, y pode ser calculado por: from math import sin y = np . sin ( x ) O la\u00e7o est\u00e1 agora dentro no np.sin e \u00e9 implementado em um c\u00f3digo muito eficiente em linguagem C. Operar sobre arranjos inteiros \u00e9 chamado de vetoriza\u00e7\u00e3o Temos com a vetoriza\u00e7\u00e3o: C\u00f3digo curtos, mais leg\u00edveis e mais pr\u00f3ximos da matem\u00e1tica; C\u00f3digos bem mais r\u00e1pidos! Vamos usar o %timeit no console IPython para medir o ganho de desempenho para $y = sen xe^{-x}$: In [ 1 ]: n = 100000 In [ 2 ]: import numpy as np In [ 3 ]: x = np . linspace ( 0 , 2 * np . pi , n + 1 ) In [ 4 ]: y = np . zeros ( len ( x )) In [ 5 ]: % timeit for i in xrange ( len ( x )): y [ i ] = np . sin ( x [ i ]) * np . exp ( - x [ i ]) 1 loops , best of 3 : 247 ms per loop In [ 6 ]: % timeit y = np . sin ( x ) * np . exp ( - x ) 100 loops , best of 3 : 4.77 ms per loop In [ 7 ]: 247 / 4.77 Out [ 7 ]: 51.781970649895186 ## vetoriza\u00e7\u00e3o: 50x mais r\u00e1pida! Uma fun\u00e7\u00e3o $f(x)$ escrita para um n\u00famero $x$ normalmente funciona para um arranjo tamb\u00e9m from numpy import sin , exp , linspace def f ( x ): return x ** 3 + sin ( x ) * exp ( - 3 * x ) x = 1.2 ## objeto float y = f ( x ) ## y \u00e9 float x = linspace ( 0 , 3 , 10001 ) ## 10000 intervalos em [0,3] y = f ( x ) ## y \u00e9 um arranjo Nota: math \u00e9 para n\u00fameros e numpy \u00e9 para arranjos (arrays) >>> import math , numpy >>> x = numpy . linspace ( 0 , 1 , 11 ) >>> math . sin ( x [ 3 ]) 0.2955202066613396 >>> math . sin ( x ) ... TypeError : only length - 1 arrays can be converted to Python scalars >>> numpy . sin ( x ) array ([ 0. , 0.09983 , 0.19866 , 0.29552 , 0.38941 , 0.47942 , 0.56464 , 0.64421 , 0.71735 , 0.78332 , 0.84147 ]) A aritm\u00e9tica de arranjos A aritm\u00e9tica dos arranjos \u00e9 uma s\u00e9rie de opera\u00e7\u00f5es bin\u00e1rias, por isso \u00e9 r\u00e1pida. Considere y = f(x) , onde f retorna x**3 + sin(x)*exp(-3*x) f(x) leva ao seguinte conjunto de sub-c\u00e1lculos vetorizados: r1 = x**3 for i in range(len(x)): r1[i] = x[i]**3 (mas com la\u00e7o em C) r2 = sin(x) (calculados elemento a elemento em C) r3 = -3*x r4 = exp(r3) r5 = r3*r4 r6 = r1 + r5 y = r6 Nota: isso \u00e9 o mesmo conjunto de opera\u00e7\u00f5es que voc\u00ea faria com uma calculadora quando x \u00e9 um n\u00famero C\u00f3digo vetorizado para c\u00e1lculo de pontos sobre uma curva f(x) = x^2e^{-\\frac{1}{2}x}\\sin(x-\\frac{1}{3}\\pi),\\quad x\\in [0, 4\\pi] C\u00e1lculo vetorizado de $n+1$ pontos sobre uma curva: import numpy as np n = 100 x = np . linspace ( 0 , 4 * np . pi , n + 1 ) y = 2.5 + x ** 2 * np . exp ( - 0.5 * x ) * np . sin ( x - np . pi / 3 ) Novo termo: vetoriza\u00e7\u00e3o Escalar: um n\u00famero; Arranjo (array): sequ\u00eancia de n\u00fameros; C\u00e1lculos escalares atuam em um n\u00famero por vez, equanto que c\u00e1lculos vetorizados atuam em arranjos inteiros por vez (sem la\u00e7os em Python). Fun\u00e7\u00f5es vetorizadas podem operar arranjos; Vetoriza\u00e7\u00e3o \u00e9 o processo de convers\u00e3o de um c\u00f3digo em Python com la\u00e7os em uma vers\u00e3o vetorizada sem la\u00e7os em Python; Fun\u00e7\u00f5es matem\u00e1ticas em Python sem testes if automaticamente trabalham com argumentos de escalares e arranjos, sem a necessidade de um processo de vetoriza\u00e7\u00e3o.","title":"Arranjos"},{"location":"arranjosgraficos/arranjosgraficos/#arranjos-e-graficos-de-curvas","text":"S\u00e3o muitos os dados: use arranjos e grafique para melhor visualizar! Um objeto lista \u00e9 \u00fatil para o armazenamento de dados, como uma sequ\u00eancia de objetos ou uma tabela de objetos. Um arranjo (no ingl\u00eas array) \u00e9 similar a uma lista, mas menos flex\u00edvel e muito mais eficiente computacionalmente. Quando usa-se um computador para a execu\u00e7\u00e3o de opera\u00e7\u00f5es matem\u00e1ticas usualmente termina-se com um monte de n\u00fameros e opera\u00e7\u00f5es matem\u00e1ticas associadas. Armazenar n\u00fameros em uma lista em tal contexto pode levar a programas lentos, enquanto com \\\"arrays\\\" pode-se ter um programa mais r\u00e1pido. Isso se torna crucial quando aplica\u00e7\u00f5es avan\u00e7adas demandam horas, dias, inclusive semanas para terminar de processar um programa. Qualquer id\u00e9ia inteligente que reduza o tempo de execu\u00e7\u00e3o \u00e9 primordial. Vamos aprender a visualizar fun\u00e7\u00f5es como: Como escrever programas para produzir tais gr\u00e1ficos?","title":"Arranjos e gr\u00e1ficos de curvas"},{"location":"arranjosgraficos/arranjosgraficos/#precisamos-primeiro-aprender-sobre-um-novo-objeto-os-arranjos-array","text":"Curvas $y=f(x)$ s\u00e3o visualizadas atrav\u00e9s do desenho de linhas retas entre pontos ao longo de uma curva; As coordenadas desses pontos precisam ser armazenadas; Podemos usar listas ou os arranjos; Os arranjos s\u00e3o como as listas, mas mais eficientes computacionalmente; Os arranjos fazem muito mais que ajudar no gr\u00e1fico de curvas!","title":"Precisamos primeiro aprender sobre um novo objeto, os arranjos (array)"},{"location":"arranjosgraficos/arranjosgraficos/#o-que-precisamos-saber-sobre-arranjos","text":"Em geral, arranjos unidimensionais podem representar um vetor $v=(v_0, ..., v_{n-1}); Arranjos tamb\u00e9m podem ser multidimensionais, podemos representar com eles matrizes e tensores. \\left\\lbrack\\begin{array}{cccc} 0 & 12 & -1 & 5\\\\ -1 & -1 & -1 & 0\\\\ 11 & 5 & 5 & -2 \\end{array}\\right\\rbrack \\hspace{1cm} A = \\left\\lbrack\\begin{array}{ccc} A\\_{0,0} & \\cdots & A\\_{0,n-1}\\\\ \\vdots & \\ddots & \\vdots\\\\ A\\_{m-1,0} & \\cdots & A\\_{m-1,n-1} \\end{array}\\right\\rbrack Arranjos (arrays) est\u00e3o dispon\u00edveis em Python atrav\u00e9s do pacote NumPy (Numerical Python).","title":"O que precisamos saber sobre arranjos"},{"location":"arranjosgraficos/arranjosgraficos/#armazenando-pontos-xy-sobre-uma-curva-em-arranjos","text":"Coletando os pontos de uma fun\u00e7\u00e3o $y=f(x)$: >>> import numpy as np >>> n = 5 ## n\u00famero de pontos >>> x = np . linspace ( 0 , 1 , n ) ## n pontos em [0, 1] >>> y = np . zeros ( n ) ## n zeros (em float) >>> for i in xrange ( n ): ... y [ i ] = f ( x [ i ]) ... Notas: xrange \u00e9 com o range mas mais veloz, pois em valores de n grandes, ele n\u00e3o gera uma lista de inteiros, mas permite correr sobre os valores diretamente; Arranjos s\u00e3o sempre criados por fun\u00e7\u00f5es numpy .","title":"Armazenando pontos $(x,y)$ sobre uma curva em arranjos"},{"location":"arranjosgraficos/arranjosgraficos/#arranjos-nao-sao-flexiveis-como-as-listas-mas-muito-mais-eficientes-computacionalmente","text":"Elementos da lista podem ser qualquer objeto Python; Elementos dos arranjos devem ser de apenas um \u00fanico tipo; Os arranjos s\u00e3o muito eficientes no armazenamento na mem\u00f3ria e no c\u00e1lculo se os elementos forem int , float ou complex ; Dica: use arranjos para sequencias de n\u00fameros!","title":"Arranjos n\u00e3o s\u00e3o flex\u00edveis como as listas, mas muito mais eficientes computacionalmente"},{"location":"arranjosgraficos/arranjosgraficos/#podemos-trabalhar-com-arranjos-inteiros-de-uma-so-vez","text":"Podemos manipular arranjos inteiros ao inv\u00e9s de manipular um elemento por vez. Calcule o seno de um arranjo: from math import sin for i in xrange ( len ( x )): y [ i ] = sin ( x [ i ]) No entanto, se x for um arranjo, y pode ser calculado por: from math import sin y = np . sin ( x ) O la\u00e7o est\u00e1 agora dentro no np.sin e \u00e9 implementado em um c\u00f3digo muito eficiente em linguagem C.","title":"Podemos trabalhar com arranjos inteiros de uma s\u00f3 vez"},{"location":"arranjosgraficos/arranjosgraficos/#operar-sobre-arranjos-inteiros-e-chamado-de-vetorizacao","text":"Temos com a vetoriza\u00e7\u00e3o: C\u00f3digo curtos, mais leg\u00edveis e mais pr\u00f3ximos da matem\u00e1tica; C\u00f3digos bem mais r\u00e1pidos! Vamos usar o %timeit no console IPython para medir o ganho de desempenho para $y = sen xe^{-x}$: In [ 1 ]: n = 100000 In [ 2 ]: import numpy as np In [ 3 ]: x = np . linspace ( 0 , 2 * np . pi , n + 1 ) In [ 4 ]: y = np . zeros ( len ( x )) In [ 5 ]: % timeit for i in xrange ( len ( x )): y [ i ] = np . sin ( x [ i ]) * np . exp ( - x [ i ]) 1 loops , best of 3 : 247 ms per loop In [ 6 ]: % timeit y = np . sin ( x ) * np . exp ( - x ) 100 loops , best of 3 : 4.77 ms per loop In [ 7 ]: 247 / 4.77 Out [ 7 ]: 51.781970649895186 ## vetoriza\u00e7\u00e3o: 50x mais r\u00e1pida!","title":"Operar sobre arranjos inteiros \u00e9 chamado de vetoriza\u00e7\u00e3o"},{"location":"arranjosgraficos/arranjosgraficos/#uma-funcao-fx-escrita-para-um-numero-x-normalmente-funciona-para-um-arranjo-tambem","text":"from numpy import sin , exp , linspace def f ( x ): return x ** 3 + sin ( x ) * exp ( - 3 * x ) x = 1.2 ## objeto float y = f ( x ) ## y \u00e9 float x = linspace ( 0 , 3 , 10001 ) ## 10000 intervalos em [0,3] y = f ( x ) ## y \u00e9 um arranjo Nota: math \u00e9 para n\u00fameros e numpy \u00e9 para arranjos (arrays) >>> import math , numpy >>> x = numpy . linspace ( 0 , 1 , 11 ) >>> math . sin ( x [ 3 ]) 0.2955202066613396 >>> math . sin ( x ) ... TypeError : only length - 1 arrays can be converted to Python scalars >>> numpy . sin ( x ) array ([ 0. , 0.09983 , 0.19866 , 0.29552 , 0.38941 , 0.47942 , 0.56464 , 0.64421 , 0.71735 , 0.78332 , 0.84147 ])","title":"Uma fun\u00e7\u00e3o $f(x)$ escrita para um n\u00famero $x$ normalmente funciona para um arranjo tamb\u00e9m"},{"location":"arranjosgraficos/arranjosgraficos/#a-aritmetica-de-arranjos","text":"A aritm\u00e9tica dos arranjos \u00e9 uma s\u00e9rie de opera\u00e7\u00f5es bin\u00e1rias, por isso \u00e9 r\u00e1pida. Considere y = f(x) , onde f retorna x**3 + sin(x)*exp(-3*x) f(x) leva ao seguinte conjunto de sub-c\u00e1lculos vetorizados: r1 = x**3 for i in range(len(x)): r1[i] = x[i]**3 (mas com la\u00e7o em C) r2 = sin(x) (calculados elemento a elemento em C) r3 = -3*x r4 = exp(r3) r5 = r3*r4 r6 = r1 + r5 y = r6 Nota: isso \u00e9 o mesmo conjunto de opera\u00e7\u00f5es que voc\u00ea faria com uma calculadora quando x \u00e9 um n\u00famero","title":"A aritm\u00e9tica de arranjos"},{"location":"arranjosgraficos/arranjosgraficos/#codigo-vetorizado-para-calculo-de-pontos-sobre-uma-curva","text":"f(x) = x^2e^{-\\frac{1}{2}x}\\sin(x-\\frac{1}{3}\\pi),\\quad x\\in [0, 4\\pi] C\u00e1lculo vetorizado de $n+1$ pontos sobre uma curva: import numpy as np n = 100 x = np . linspace ( 0 , 4 * np . pi , n + 1 ) y = 2.5 + x ** 2 * np . exp ( - 0.5 * x ) * np . sin ( x - np . pi / 3 )","title":"C\u00f3digo vetorizado para c\u00e1lculo de pontos sobre uma curva"},{"location":"arranjosgraficos/arranjosgraficos/#novo-termo-vetorizacao","text":"Escalar: um n\u00famero; Arranjo (array): sequ\u00eancia de n\u00fameros; C\u00e1lculos escalares atuam em um n\u00famero por vez, equanto que c\u00e1lculos vetorizados atuam em arranjos inteiros por vez (sem la\u00e7os em Python). Fun\u00e7\u00f5es vetorizadas podem operar arranjos; Vetoriza\u00e7\u00e3o \u00e9 o processo de convers\u00e3o de um c\u00f3digo em Python com la\u00e7os em uma vers\u00e3o vetorizada sem la\u00e7os em Python; Fun\u00e7\u00f5es matem\u00e1ticas em Python sem testes if automaticamente trabalham com argumentos de escalares e arranjos, sem a necessidade de um processo de vetoriza\u00e7\u00e3o.","title":"Novo termo: vetoriza\u00e7\u00e3o"},{"location":"arranjosgraficos/graficos/","text":"Gr\u00e1fico de uma fun\u00e7\u00e3o: o b\u00e1sico Fa\u00e7a o gr\u00e1fico da curva y(t) = t^2e^{-t^2} : import numpy as np ## importando numpy import matplotlib.pyplot as plt ## importanto o matplotlib para a gera\u00e7\u00e3o dos gr\u00e1ficos ## fazendo os pontos da curva t = np . linspace ( 0 , 3 , 51 ) ## 50 intervalos em [0, 3] y = t ** 2 * np . exp ( - t ** 2 ) ## express\u00e3o vetorizada plt . plot ( t , y ) ## fa\u00e7a o gr\u00e1fico em uma janela plt . savefig ( 'fig.pdf' ) ## salvando imagem em PDF plt . savefig ( 'fig.png' ) ## salvando imagem em PNG Um gr\u00e1fico deve conter legenda, r\u00f3tulo nos eixos e t\u00edtulo import numpy as np import matplotlib.pyplot as plt def f ( t ): return t ** 2 * np . exp ( - t ** 2 ) t = np . linspace ( 0 , 3 , 51 ) ## coordenadas em t y = f ( t ) ## valores correspondentes em y plt . plot ( t , y , label = r '$t^2 exp(-t^2)$' ) ## fa\u00e7a o gr\u00e1fico em uma janela plt . xlabel ( 't' ) ## r\u00f3tulo do eixo x plt . ylabel ( 'y' ) ## r\u00f3tulo do eixo y plt . legend () ## gera a legenda plt . axis ([ 0 , 3 , - 0.05 , 0.6 ]) ## limites [tmin, tmax, ymin, ymax] plt . title ( u 'Meu primeiro gr\u00e1fico completo' ) Gr\u00e1fico com v\u00e1rias curvas Como colocar as curvas de cos(\\theta) e sen(\\theta) no mesmo gr\u00e1fico: import numpy as np import matplotlib.pyplot as plt theta = np . linspace ( - np . pi , np . pi , 30 , endpoint = True ) ## coordenadas de theta y1 = np . cos ( theta ) ## valores de y no cos y2 = np . sin ( theta ) ## valores de y no sen plt . plot ( theta , y1 , 'g' , label = r '$cos(\\theta)$' , linewidth = 5 ) #linha vermelha com espessura de 5 em pontos plt . plot ( theta , y2 , 'b-o' , label = r '$sen(\\theta)$' ) #azul com c\u00edrculos plt . xlabel ( r '$\\theta$' ) ## r\u00f3tulo do eixo x plt . ylabel ( 'y' ) ## r\u00f3tulo do eixo y plt . legend ( loc = 'best' ) ## gera a legenda e posiciona melhor plt . title ( u 'Plotando duas curvas no mesmo gr\u00e1fico' ) plt . savefig ( 'cos_sen.png' ) Outras posi\u00e7\u00f5es para a legenda s\u00e3o: right, center left, upper right, lower right, best, center, lower left, center right, upper left, upper center e lower center. Controlando os estilos das linhas Quando s\u00e3o muitas as curvas a serem exibidas no mesmo gr\u00e1fico \u00e9 interessante mudar o visual de cada curva. Podemos controlar o tipo da linha, a cor, a espessura e eventualmente marcadores sobre a curva se quisermos: plt . plot ( theta , y1 , 'r-' , label = r '$cos(\\theta)$' , linewidth = 5 ) #linha vermelha com espessura de 5 pontos plt . plot ( theta , y2 , 'b-o' , label = r '$sen(\\theta)$' ) #azul com c\u00edrculos Lembando que os argumentos posicionais sempre devem aparecer antes do argumentos palavra-chave. Se for constru\u00eddo assim: plt . plot ( t , y1 , label = r '$cos(\\theta)$' , 'r-' ) #linha vermelha Vai ser levantado um erro de sintaxe, pois label \u00e9 um argumento palavra-chave. Al\u00e9m disso, para mostrar o gr\u00e1fico em um novo console voc\u00ea precisa ao final de todos os c\u00f3digos, o comando plt.show() . C\u00f3digos para o estilo da linha e marcadores Os c\u00f3digos para estilo de linhas podem ser acessados com: import matplotlib.lines as lines lines . lineStyles . keys () >>> [ u '' , u ' ' , u 'None' , u '--' , u '-.' , u '-' , u ':' ] Os c\u00f3digos para estilo de marcadores tamb\u00e9m: import matplotlib.markers as markers markers . MarkerStyle . markers . keys () >>> [ 0 , 1 , 2 , 3 , 4 , u 'D' , 6 , 7 , u 's' , u '|' , u '' , u 'None' , ... u '<' , u '>' ] Os c\u00f3digos para estilo de linha e de marcadores podem ser combinados. Reorganizando os eixos e adicionando anota\u00e7\u00f5es Podemos reposicionar os eixos e os marcadores de cada eixo, com seus respectivos valores, para melhor visualiza\u00e7\u00e3o: plt . xlim ( - 4.0 , 4.0 ) #define os limites em x plt . xticks ([ - np . pi , - np . pi / 2 , 0 , np . pi / 2 , np . pi ], [ r '$-\\pi$' , r '$-\\pi/2$' , r '$0$' , r '$+\\pi/2$' , r '$+\\pi$' ]) #marcadores espec\u00edficos plt . ylim ( - 1.0 , 1.0 ) #define os limites em y plt . yticks ([ - 1 , 0 , + 1 ], [ r '$-1$' , r '$0$' , r '$+1$' ]) #marcadores com nomes ax = plt . gca () ## gca significa 'get current axis' ax . spines [ 'right' ] . set_color ( 'none' ) #removendo o fechamento da direita ax . spines [ 'top' ] . set_color ( 'none' ) #removendo o fechamento de cima ax . xaxis . set_ticks_position ( 'bottom' ) #mantendo os marcadores abaixo ax . spines [ 'bottom' ] . set_position (( 'data' , 0 )) #movendo o limite inferior para 0 dos dados ax . yaxis . set_ticks_position ( 'left' ) #mantendo os marcadores \u00e0 esquerda ax . spines [ 'left' ] . set_position (( 'data' , 0 )) #movendo o limite da esquerda para 0 dos dados \u00c9 poss\u00edvel tamb\u00e9m adicionar notas sobre o gr\u00e1fico e melhorar a visualiza\u00e7\u00e3o dos elementos: t = 2 * np . pi / 3 plt . plot ([ t , t ], [ 0 , np . cos ( t )], color = 'blue' , linewidth = 2.5 , linestyle = \"--\" ) plt . scatter ([ t , ], [ np . cos ( t ), ], 50 , color = 'blue' ) plt . annotate ( r '$sin(\\frac{2\\pi} {3} )=\\frac{\\sqrt {3} } {2} $' , xy = ( t , np . sin ( t )), xycoords = 'data' , xytext = ( + 30 , + 5 ), textcoords = 'offset points' , fontsize = 16 , arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = \"arc3,rad=.2\" )) plt . plot ([ t , t ],[ 0 , np . sin ( t )], color = 'red' , linewidth = 2.5 , linestyle = \"--\" ) plt . scatter ([ t , ],[ np . sin ( t ), ], 50 , color = 'red' ) plt . annotate ( r '$cos(\\frac{2\\pi} {3} )=-\\frac {1}{2} $' , xy = ( t , np . cos ( t )), xycoords = 'data' , xytext = ( - 90 , - 50 ), textcoords = 'offset points' , fontsize = 16 , arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = \"arc3,rad=.2\" )) for label in ax . get_xticklabels () + ax . get_yticklabels (): label . set_fontsize ( 16 ) label . set_bbox ( dict ( facecolor = 'white' , edgecolor = 'None' , alpha = 0.65 )) Separando os gr\u00e1ficos \u00c9 poss\u00edvel separarmos os gr\u00e1ficos em duas regi\u00f5es distintas, como sub-gr\u00e1ficos. Para isso precisamos criar uma figura: import numpy as np import matplotlib.pyplot as plt theta = np . linspace ( - np . pi , np . pi , 30 , endpoint = True ) ## coordenadas de theta y1 = np . cos ( theta ) ## valores de y no cos y2 = np . sin ( theta ) ## valores de y no sen ## Cria uma figura de tamanho 8x6 pontos, 80 pontos por polegada plt . figure ( figsize = ( 8 , 6 ), dpi = 80 ) ## Cria um novo sub-gr\u00e1fico a partir de um grid de 2x1 e posiciona no 1 plt . subplot ( 2 , 1 , 1 ) plt . plot ( theta , y1 , 'g' , label = r '$cos(\\theta)$' , linewidth = 5 ) #linha vermelha com espessura de 5 em pontos ## Cria um novo sub-gr\u00e1fico a partir de um grid de 2x1 e posiciona no 2 plt . subplot ( 2 , 1 , 2 ) plt . plot ( theta , y2 , 'b-o' , label = r '$sen(\\theta)$' ) #azul com c\u00edrculos Todas as demais personaliza\u00e7\u00f5es mostradas anteriomente se aplicam a cada sub-gr\u00e1fico. Vamos tentar um gr\u00e1fico de uma fun\u00e7\u00e3o discont\u00ednua A fun\u00e7\u00e3o Heaviside \u00e9 frequentemente usada na ci\u00eancia e na engenharia: H(x) = \\left\\lbrace\\begin{array}{ll} 0, & x < 0\\\\ 1, & x\\geq 0 \\end{array}\\right. Implementa\u00e7\u00e3o em Python: def H ( x ): return ( 0 if x < 0 else 1 ) Gr\u00e1fico da fun\u00e7\u00e3o Heaviside: primeira tentativa Abordagem padr\u00e3o: x = linspace ( - 10 , 10 , 5 ) ## few points (simple curve) y = H ( x ) plot ( x , y ) Primeiro problema: Erro de ValueError em H(x) do if x < 0 . O erro completo: return ( 0 if x < 0 else 1 ) ValueError : The truth value of an array with more than one element is ambiguous . Use a . any () or a . all () if x < 0 n\u00e3o funciona se x \u00e9 um arranjo Solu\u00e7\u00e3o 1: usar um la\u00e7o sobre os valores de x import numpy as np import matplotlib.pyplot as plt def H ( x ): return ( 0 if x < 0 else 1 ) def H_loop ( x ): r = np . zeros ( len ( x )) ## ou r = x.copy() for i in xrange ( len ( x )): r [ i ] = H ( x [ i ]) return r n = 5 x = np . linspace ( - 5 , 5 , n + 1 ) y = H_loop ( x ) plt . plot ( x , y ) Muito c\u00f3digo e lento se n \u00e9 grande. Solu\u00e7\u00e3o 2: usar a vetoriza\u00e7\u00e3o import numpy as np import matplotlib.pyplot as plt def H ( x ): return ( 0 if x < 0 else 1 ) ## vetoriza\u00e7\u00e3o autom\u00e1tica da fun\u00e7\u00e3o H Hv = np . vectorize ( H ) ## Hv(x) funciona com o arranjo x n = 5 x = np . linspace ( - 5 , 5 , n + 1 ) y = Hv ( x ) plt . plot ( x , y ) Continua sendo t\u00e3o lento quanto a solu\u00e7\u00e3o 1. Solu\u00e7\u00e3o 3: escrever o teste if de forma diferente. import numpy as np import matplotlib.pyplot as plt def Hv ( x ): return np . where ( x < 0 , 0.0 , 1.0 ) n = 5 x = np . linspace ( - 5 , 5 , n + 1 ) y = Hv ( x ) plt . plot ( x , y ) Como fazer a fun\u00e7\u00e3o aparecer descont\u00ednua no gr\u00e1fico? Amador: fazer um monte de pontos x; Pro: fazer o gr\u00e1fico com dois segmentos de linha horizontais, um de x=-10 at\u00e9 x=0, com y=0 e outro de x=0 at\u00e9 x=10, com y=1: import matplotlib.pyplot as plt plt . xlim ( - 10 , 10 ) plt . ylim ( - 0.1 , 1.1 ) plt . plot ([ - 10 , 0 , 0 , 10 ], [ 0 , 0 , 1 , 1 ]) Algumas fun\u00e7\u00f5es s\u00e3o dif\u00edceis de se visualizar Fa\u00e7a o gr\u00e1fico de $f(x) = sen(\\dfrac{1}{x})$: import numpy as np import matplotlib.pyplot as plt def f ( x ): return np . sin ( 1.0 / x ) x1 = np . linspace ( - 1 , 1 , 10 ) ## uso de 10 pontos, azul x2 = np . linspace ( - 1 , 1 , 1000 ) ## uso de 1000 pontos, verde plt . plot ( x1 , f ( x1 ), label = ' %d points' % len ( x1 )) plt . plot ( x2 , f ( x2 ), label = ' %d points' % len ( x2 ))","title":"Gr\u00e1ficos"},{"location":"arranjosgraficos/graficos/#grafico-de-uma-funcao-o-basico","text":"Fa\u00e7a o gr\u00e1fico da curva y(t) = t^2e^{-t^2} : import numpy as np ## importando numpy import matplotlib.pyplot as plt ## importanto o matplotlib para a gera\u00e7\u00e3o dos gr\u00e1ficos ## fazendo os pontos da curva t = np . linspace ( 0 , 3 , 51 ) ## 50 intervalos em [0, 3] y = t ** 2 * np . exp ( - t ** 2 ) ## express\u00e3o vetorizada plt . plot ( t , y ) ## fa\u00e7a o gr\u00e1fico em uma janela plt . savefig ( 'fig.pdf' ) ## salvando imagem em PDF plt . savefig ( 'fig.png' ) ## salvando imagem em PNG","title":"Gr\u00e1fico de uma fun\u00e7\u00e3o: o b\u00e1sico"},{"location":"arranjosgraficos/graficos/#um-grafico-deve-conter-legenda-rotulo-nos-eixos-e-titulo","text":"import numpy as np import matplotlib.pyplot as plt def f ( t ): return t ** 2 * np . exp ( - t ** 2 ) t = np . linspace ( 0 , 3 , 51 ) ## coordenadas em t y = f ( t ) ## valores correspondentes em y plt . plot ( t , y , label = r '$t^2 exp(-t^2)$' ) ## fa\u00e7a o gr\u00e1fico em uma janela plt . xlabel ( 't' ) ## r\u00f3tulo do eixo x plt . ylabel ( 'y' ) ## r\u00f3tulo do eixo y plt . legend () ## gera a legenda plt . axis ([ 0 , 3 , - 0.05 , 0.6 ]) ## limites [tmin, tmax, ymin, ymax] plt . title ( u 'Meu primeiro gr\u00e1fico completo' )","title":"Um gr\u00e1fico deve conter legenda, r\u00f3tulo nos eixos e t\u00edtulo"},{"location":"arranjosgraficos/graficos/#grafico-com-varias-curvas","text":"Como colocar as curvas de cos(\\theta) e sen(\\theta) no mesmo gr\u00e1fico: import numpy as np import matplotlib.pyplot as plt theta = np . linspace ( - np . pi , np . pi , 30 , endpoint = True ) ## coordenadas de theta y1 = np . cos ( theta ) ## valores de y no cos y2 = np . sin ( theta ) ## valores de y no sen plt . plot ( theta , y1 , 'g' , label = r '$cos(\\theta)$' , linewidth = 5 ) #linha vermelha com espessura de 5 em pontos plt . plot ( theta , y2 , 'b-o' , label = r '$sen(\\theta)$' ) #azul com c\u00edrculos plt . xlabel ( r '$\\theta$' ) ## r\u00f3tulo do eixo x plt . ylabel ( 'y' ) ## r\u00f3tulo do eixo y plt . legend ( loc = 'best' ) ## gera a legenda e posiciona melhor plt . title ( u 'Plotando duas curvas no mesmo gr\u00e1fico' ) plt . savefig ( 'cos_sen.png' ) Outras posi\u00e7\u00f5es para a legenda s\u00e3o: right, center left, upper right, lower right, best, center, lower left, center right, upper left, upper center e lower center.","title":"Gr\u00e1fico com v\u00e1rias curvas"},{"location":"arranjosgraficos/graficos/#controlando-os-estilos-das-linhas","text":"Quando s\u00e3o muitas as curvas a serem exibidas no mesmo gr\u00e1fico \u00e9 interessante mudar o visual de cada curva. Podemos controlar o tipo da linha, a cor, a espessura e eventualmente marcadores sobre a curva se quisermos: plt . plot ( theta , y1 , 'r-' , label = r '$cos(\\theta)$' , linewidth = 5 ) #linha vermelha com espessura de 5 pontos plt . plot ( theta , y2 , 'b-o' , label = r '$sen(\\theta)$' ) #azul com c\u00edrculos Lembando que os argumentos posicionais sempre devem aparecer antes do argumentos palavra-chave. Se for constru\u00eddo assim: plt . plot ( t , y1 , label = r '$cos(\\theta)$' , 'r-' ) #linha vermelha Vai ser levantado um erro de sintaxe, pois label \u00e9 um argumento palavra-chave. Al\u00e9m disso, para mostrar o gr\u00e1fico em um novo console voc\u00ea precisa ao final de todos os c\u00f3digos, o comando plt.show() .","title":"Controlando os estilos das linhas"},{"location":"arranjosgraficos/graficos/#codigos-para-o-estilo-da-linha-e-marcadores","text":"Os c\u00f3digos para estilo de linhas podem ser acessados com: import matplotlib.lines as lines lines . lineStyles . keys () >>> [ u '' , u ' ' , u 'None' , u '--' , u '-.' , u '-' , u ':' ] Os c\u00f3digos para estilo de marcadores tamb\u00e9m: import matplotlib.markers as markers markers . MarkerStyle . markers . keys () >>> [ 0 , 1 , 2 , 3 , 4 , u 'D' , 6 , 7 , u 's' , u '|' , u '' , u 'None' , ... u '<' , u '>' ] Os c\u00f3digos para estilo de linha e de marcadores podem ser combinados.","title":"C\u00f3digos para o estilo da linha e marcadores"},{"location":"arranjosgraficos/graficos/#reorganizando-os-eixos-e-adicionando-anotacoes","text":"Podemos reposicionar os eixos e os marcadores de cada eixo, com seus respectivos valores, para melhor visualiza\u00e7\u00e3o: plt . xlim ( - 4.0 , 4.0 ) #define os limites em x plt . xticks ([ - np . pi , - np . pi / 2 , 0 , np . pi / 2 , np . pi ], [ r '$-\\pi$' , r '$-\\pi/2$' , r '$0$' , r '$+\\pi/2$' , r '$+\\pi$' ]) #marcadores espec\u00edficos plt . ylim ( - 1.0 , 1.0 ) #define os limites em y plt . yticks ([ - 1 , 0 , + 1 ], [ r '$-1$' , r '$0$' , r '$+1$' ]) #marcadores com nomes ax = plt . gca () ## gca significa 'get current axis' ax . spines [ 'right' ] . set_color ( 'none' ) #removendo o fechamento da direita ax . spines [ 'top' ] . set_color ( 'none' ) #removendo o fechamento de cima ax . xaxis . set_ticks_position ( 'bottom' ) #mantendo os marcadores abaixo ax . spines [ 'bottom' ] . set_position (( 'data' , 0 )) #movendo o limite inferior para 0 dos dados ax . yaxis . set_ticks_position ( 'left' ) #mantendo os marcadores \u00e0 esquerda ax . spines [ 'left' ] . set_position (( 'data' , 0 )) #movendo o limite da esquerda para 0 dos dados \u00c9 poss\u00edvel tamb\u00e9m adicionar notas sobre o gr\u00e1fico e melhorar a visualiza\u00e7\u00e3o dos elementos: t = 2 * np . pi / 3 plt . plot ([ t , t ], [ 0 , np . cos ( t )], color = 'blue' , linewidth = 2.5 , linestyle = \"--\" ) plt . scatter ([ t , ], [ np . cos ( t ), ], 50 , color = 'blue' ) plt . annotate ( r '$sin(\\frac{2\\pi} {3} )=\\frac{\\sqrt {3} } {2} $' , xy = ( t , np . sin ( t )), xycoords = 'data' , xytext = ( + 30 , + 5 ), textcoords = 'offset points' , fontsize = 16 , arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = \"arc3,rad=.2\" )) plt . plot ([ t , t ],[ 0 , np . sin ( t )], color = 'red' , linewidth = 2.5 , linestyle = \"--\" ) plt . scatter ([ t , ],[ np . sin ( t ), ], 50 , color = 'red' ) plt . annotate ( r '$cos(\\frac{2\\pi} {3} )=-\\frac {1}{2} $' , xy = ( t , np . cos ( t )), xycoords = 'data' , xytext = ( - 90 , - 50 ), textcoords = 'offset points' , fontsize = 16 , arrowprops = dict ( arrowstyle = \"->\" , connectionstyle = \"arc3,rad=.2\" )) for label in ax . get_xticklabels () + ax . get_yticklabels (): label . set_fontsize ( 16 ) label . set_bbox ( dict ( facecolor = 'white' , edgecolor = 'None' , alpha = 0.65 ))","title":"Reorganizando os eixos e adicionando anota\u00e7\u00f5es"},{"location":"arranjosgraficos/graficos/#separando-os-graficos","text":"\u00c9 poss\u00edvel separarmos os gr\u00e1ficos em duas regi\u00f5es distintas, como sub-gr\u00e1ficos. Para isso precisamos criar uma figura: import numpy as np import matplotlib.pyplot as plt theta = np . linspace ( - np . pi , np . pi , 30 , endpoint = True ) ## coordenadas de theta y1 = np . cos ( theta ) ## valores de y no cos y2 = np . sin ( theta ) ## valores de y no sen ## Cria uma figura de tamanho 8x6 pontos, 80 pontos por polegada plt . figure ( figsize = ( 8 , 6 ), dpi = 80 ) ## Cria um novo sub-gr\u00e1fico a partir de um grid de 2x1 e posiciona no 1 plt . subplot ( 2 , 1 , 1 ) plt . plot ( theta , y1 , 'g' , label = r '$cos(\\theta)$' , linewidth = 5 ) #linha vermelha com espessura de 5 em pontos ## Cria um novo sub-gr\u00e1fico a partir de um grid de 2x1 e posiciona no 2 plt . subplot ( 2 , 1 , 2 ) plt . plot ( theta , y2 , 'b-o' , label = r '$sen(\\theta)$' ) #azul com c\u00edrculos Todas as demais personaliza\u00e7\u00f5es mostradas anteriomente se aplicam a cada sub-gr\u00e1fico.","title":"Separando os gr\u00e1ficos"},{"location":"arranjosgraficos/graficos/#vamos-tentar-um-grafico-de-uma-funcao-discontinua","text":"A fun\u00e7\u00e3o Heaviside \u00e9 frequentemente usada na ci\u00eancia e na engenharia: H(x) = \\left\\lbrace\\begin{array}{ll} 0, & x < 0\\\\ 1, & x\\geq 0 \\end{array}\\right. Implementa\u00e7\u00e3o em Python: def H ( x ): return ( 0 if x < 0 else 1 )","title":"Vamos tentar um gr\u00e1fico de uma fun\u00e7\u00e3o discont\u00ednua"},{"location":"arranjosgraficos/graficos/#grafico-da-funcao-heaviside-primeira-tentativa","text":"Abordagem padr\u00e3o: x = linspace ( - 10 , 10 , 5 ) ## few points (simple curve) y = H ( x ) plot ( x , y ) Primeiro problema: Erro de ValueError em H(x) do if x < 0 . O erro completo: return ( 0 if x < 0 else 1 ) ValueError : The truth value of an array with more than one element is ambiguous . Use a . any () or a . all ()","title":"Gr\u00e1fico da fun\u00e7\u00e3o Heaviside: primeira tentativa"},{"location":"arranjosgraficos/graficos/#if-x-0-nao-funciona-se-x-e-um-arranjo","text":"Solu\u00e7\u00e3o 1: usar um la\u00e7o sobre os valores de x import numpy as np import matplotlib.pyplot as plt def H ( x ): return ( 0 if x < 0 else 1 ) def H_loop ( x ): r = np . zeros ( len ( x )) ## ou r = x.copy() for i in xrange ( len ( x )): r [ i ] = H ( x [ i ]) return r n = 5 x = np . linspace ( - 5 , 5 , n + 1 ) y = H_loop ( x ) plt . plot ( x , y ) Muito c\u00f3digo e lento se n \u00e9 grande. Solu\u00e7\u00e3o 2: usar a vetoriza\u00e7\u00e3o import numpy as np import matplotlib.pyplot as plt def H ( x ): return ( 0 if x < 0 else 1 ) ## vetoriza\u00e7\u00e3o autom\u00e1tica da fun\u00e7\u00e3o H Hv = np . vectorize ( H ) ## Hv(x) funciona com o arranjo x n = 5 x = np . linspace ( - 5 , 5 , n + 1 ) y = Hv ( x ) plt . plot ( x , y ) Continua sendo t\u00e3o lento quanto a solu\u00e7\u00e3o 1. Solu\u00e7\u00e3o 3: escrever o teste if de forma diferente. import numpy as np import matplotlib.pyplot as plt def Hv ( x ): return np . where ( x < 0 , 0.0 , 1.0 ) n = 5 x = np . linspace ( - 5 , 5 , n + 1 ) y = Hv ( x ) plt . plot ( x , y )","title":"if x &lt; 0 n\u00e3o funciona se x \u00e9 um arranjo"},{"location":"arranjosgraficos/graficos/#como-fazer-a-funcao-aparecer-descontinua-no-grafico","text":"Amador: fazer um monte de pontos x; Pro: fazer o gr\u00e1fico com dois segmentos de linha horizontais, um de x=-10 at\u00e9 x=0, com y=0 e outro de x=0 at\u00e9 x=10, com y=1: import matplotlib.pyplot as plt plt . xlim ( - 10 , 10 ) plt . ylim ( - 0.1 , 1.1 ) plt . plot ([ - 10 , 0 , 0 , 10 ], [ 0 , 0 , 1 , 1 ])","title":"Como fazer a fun\u00e7\u00e3o aparecer descont\u00ednua no gr\u00e1fico?"},{"location":"arranjosgraficos/graficos/#algumas-funcoes-sao-dificeis-de-se-visualizar","text":"Fa\u00e7a o gr\u00e1fico de $f(x) = sen(\\dfrac{1}{x})$: import numpy as np import matplotlib.pyplot as plt def f ( x ): return np . sin ( 1.0 / x ) x1 = np . linspace ( - 1 , 1 , 10 ) ## uso de 10 pontos, azul x2 = np . linspace ( - 1 , 1 , 1000 ) ## uso de 1000 pontos, verde plt . plot ( x1 , f ( x1 ), label = ' %d points' % len ( x1 )) plt . plot ( x2 , f ( x2 ), label = ' %d points' % len ( x2 ))","title":"Algumas fun\u00e7\u00f5es s\u00e3o dif\u00edceis de se visualizar"},{"location":"classes/aplicacoes/","text":"Generalizando a representa\u00e7\u00e3o de uma fun\u00e7\u00e3o por classes Dada uma fun\u00e7\u00e3o com $ n+1 $ par\u00e2metros e uma vari\u00e1vel independente, f(x; p_0,\\ldots,p_n) \u00e9 \u00fatil representar f por uma classe onde $ p_0,\\ldots,p_n $ s\u00e3o atributos e __call__(x) calcula $ f(x) $. class MyFunc : def __init__ ( self , p0 , p1 , p2 , ... , pn ): self . p0 = p0 self . p1 = p1 ... self . pn = pn def __call__ ( self , x ): return ... Classe para derivar uma fun\u00e7\u00e3o Dada certa fun\u00e7\u00e3o matem\u00e1tica em Python, digamos: def f ( x ): return x ** 3 Podemos fazer uma classe Derivada e escrever: dfdx = Derivada ( f ) Ent\u00e3o, dfdx se comporta como uma fun\u00e7\u00e3o que calcula a derivada de f(x) ? print dfdx ( 2 ) ## calcula 3*x**2 para x=2 Solu\u00e7\u00e3o M\u00e9todo Vamos usar uma deriva\u00e7\u00e3o num\u00e9rica por de tr\u00e1s dos panos: f'(x) \\approx {f(x+h)-f(x)\\over h} para um pequeno $ h $, digamos de $ h=10^{-5} $ Implementa\u00e7\u00e3o class Derivada : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) def __call__ ( self , x ): f = self . f h = self . h return ( f ( x + h ) - f ( x )) / h Uso >>> import math >>> df = Derivada ( math . sin ) >>> x = math . pi >>> df ( x ) - 0.9999999999898844 >>> math . cos ( x ) ## exato - 1.0 >>> def g ( t ): ... return t ** 3 ... >>> dg = Derivada ( g ) >>> t = 1 >>> dg ( t ) ## compare com 3 (exato) 3.000030000110953 Essa \u00e9 uma implementa\u00e7\u00e3o \u00fatil para o uso em outros m\u00e9todos que necessitam da derivada, como por exemplo o m\u00e9todo de Newton para a solu\u00e7\u00e3o de equa\u00e7\u00f5es n\u00e3o lineares. Fun\u00e7\u00e3o de teste Como podemos testar a classe Derivada ? M\u00e9todo 1: calcular $ (f(x+h)-f(x))/h $ na m\u00e3o para algum valor de $ f $ e $ h $; M\u00e9todo 2: utilize fun\u00e7\u00f5es lineares que resultam em derivadas exatas pela nossa classe, independente de $ h $. Fun\u00e7\u00e3o de teste baseada no m\u00e9todo 2: def test_Derivada (): ## A formula fornece valores exatos para fun\u00e7\u00f5es lineares, independente de h f = lambda x : a * x + b a = 3.5 b = 8 dfdx = Derivada ( f , h = 0.5 ) dif = abs ( dfdx ( 4.5 ) - a ) assert dif < 1E-14 , 'Problema na classe Derivada, dif= %s ' % dif Explica\u00e7\u00e3o da fun\u00e7\u00e3o teste Uso fun\u00e7\u00f5es lambda : f = lambda x : a * x + b \u00c9 equivalente a: def f ( x ): return a * x + b Fun\u00e7\u00f5es lambda s\u00e3o convenientes para produzir c\u00f3digos r\u00e1pidos e curtos. Uso de fechamentos: f = lambda x : a * x + b a = 3.5 b = 8 dfdx = Derivada ( f , h = 0.5 ) dfdx ( 4.5 ) Parece claro... mas: Como Derivada.__call__ sabe a e b quando chama nossa fun\u00e7\u00e3o f(x) ? Fun\u00e7\u00f5es locais dentro de fun\u00e7\u00f5es tem acesso a todas as vari\u00e1veis locais na fun\u00e7\u00e3o que s\u00e3o definidas! f pode acessar a e b em test_Derivada mesmo quando chamada de __call__ na classe Derivada ; f \u00e9 conhecida como fechamento (closure) na ci\u00eancia da computa\u00e7\u00e3o. A solu\u00e7\u00e3o exata mesmo Podemos tamb\u00e9m executar a deriva\u00e7\u00e3o simb\u00f3lica utilizando o SymPy: >>> import sympy as sp >>> def g ( t ): ... return t ** 3 ... >>> t = sp . Symbol ( 't' ) >>> dgdt = sp . diff ( g ( t ), t ) ## calcula g'(t) >>> dgdt 3 * t ** 2 >>> ## Transformando a express\u00e3o sympy dgdt em fun\u00e7\u00e3o python dg(t) >>> dg = lambdify ([ t ], dgdt ) >>> dg ( 1 ) 3 Classe baseada no SymPy import sympy as sp class Derivada_sympy : def __init__ ( self , f ): ## f: Python f(x) x = sp . Symbol ( 'x' ) sympy_f = f ( x ) sympy_dfdx = sp . diff ( sympy_f , x ) self . __call__ = sp . lambdify ([ x ], sympy_dfdx ) Uso: >>> def g ( t ): ... return t ** 3 >>> def h ( y ): ... return sp . sin ( y ) >>> dg = Derivada_sympy ( g ) >>> dh = Derivada_sympy ( h ) >>> dg ( 1 ) ## 3*1**2 = 3 3 >>> import math >>> dh ( pi ) ## cos(math.pi) = -1 - 1.0 Classe para Integrar uma fun\u00e7\u00e3o Dada a fun\u00e7\u00e3o $ f(x) $, n\u00f3s queremos calcular F(x; a) = \\int_a^x f(t)dt A t\u00e9cnica Podemos utilizar, por exemplo, a regra dos trap\u00e9zios: \\int_a^x f(t)dt = h\\left({1\\over2}f(a) + \\sum_{i=1}^{n-1} f(a+ih) + {1\\over2}f(x)\\right) O objetivo \u00e9 obter um c\u00f3digo que resolva da seguinte forma: def f ( x ): return math . exp ( - x ** 2 ) * math . sin ( 10 * x ) a = 0 n = 200 F = Integral ( f , a , n ) x = 1.2 print F ( x ) Implementa\u00e7\u00e3o def trapezios ( f , a , x , n ): h = ( x - a ) / float ( n ) I = 0.5 * f ( a ) for i in range ( 1 , n ): I += f ( a + i * h ) I += 0.5 * f ( x ) I *= h return I A classe Integral possui f , a e n como atributos e tem um m\u00e9todo especial de chamada para o c\u00e1lculo da integral: class Integral : def __init__ ( self , f , a , n = 100 ): self . f , self . a , self . n = f , a , n def __call__ ( self , x ): return trapezios ( self . f , self . a , x , self . n ) Fun\u00e7\u00e3o de teste Como podemos testar a classe integral ? M\u00e9todo 1: calcular na m\u00e3o alguma $f$ para um $n$ pequeno; M\u00e9todo 2: utilizar aquelas fun\u00e7\u00f5es lineares que s\u00e3o integradas exatamente pela nossa integra\u00e7\u00e3o num\u00e9rica, independente de $n$. Fun\u00e7\u00e3o de teste baseada no m\u00e9todo 2: def test_Integral (): f = lambda x : 2 * x + 5 F = lambda x : x ** 2 + 5 * x - ( a ** 2 + 5 * a ) a = 2 dfdx = Integralf , a , n = 4 ) x = 6 dif = abs ( I ( x ) - ( F ( x ) - F ( a ))) assert dif < 1E-15 , 'Problema na classe Integral, dif= %s ' % dif Classe para polin\u00f4mios Um polin\u00f4mio pode ser especificado por uma lista de seus coeficientes, por exemplo $ 1 - x^2 + 2x^3 $ \u00e9 1 + 0\\cdot x - 1\\cdot x^2 + 2\\cdot x^3 e os coeficientes podem ser armazenados como [1, 0, -1, 2] . C\u00f3digo desejado da aplica\u00e7\u00e3o: >>> p1 = Polinomial ([ 1 , - 1 ]) >>> print p1 1 - x >>> p2 = Polinomial ([ 0 , 1 , 0 , 0 , - 6 , - 1 ]) >>> p3 = p1 + p2 >>> print p3 . coef [ 1 , 0 , 0 , 0 , - 6 , - 1 ] >>> print p3 1 - 6 * x ^ 4 - x ^ 5 >>> p2 . derivada () >>> print p2 1 - 24 * x ^ 3 - 5 * x ^ 4 Como podemos fazer a classe Polinomial ? C\u00f3digo b\u00e1sico class Polinomial : def __init__ ( self , coeficientes ): self . coef = coeficientes def __call__ ( self , x ): s = 0 for i in range ( len ( self . coef )): s += self . coef [ i ] * x ** i return s Adi\u00e7\u00e3o class Polinomial : ... def __add__ ( self , outro ): ## return self + outro ## inicia com a lista mais longa e adiciona a outra: if len ( self . coef ) > len ( outro . coef ): coefsoma = self . coeff [:] ## copia! for i in range ( len ( outro . coef )): coefsoma [ i ] += outro . coef [ i ] else : coefsoma = outro . coef [:] ## copia! for i in range ( len ( self . coef )): coefsoma [ i ] += self . coef [ i ] return Polinomial ( coefsoma ) Multiplica\u00e7\u00e3o Multiplica\u00e7\u00e3o gen\u00e9rica de dois polin\u00f4mios quaisquer: \\left(\\sum_{i=0}^Mc_ix^i\\right)\\left(\\sum_{j=0}^N d_jx^j\\right) = \\sum_{i=0}^M \\sum_{j=0}^N c_id_j x^{i+j} O coeficiente que corresponde a pot\u00eancia $ i+j $ \u00e9 $ c_i\\cdot d_j $. A lista r dos coeficientes do resultado \u00e9: r[i+j] = c[i]*d[j] ( i e j variando de 0 a $ M $ e $ N $, respectivamente.) Implementa\u00e7\u00e3o class Polinomial : ... def __mul__ ( self , outro ): M = len ( self . coef ) - 1 N = len ( outro . coef ) - 1 coef = [ 0 ] * ( M + N + 1 ) ## or zeros(M+N+1) for i in range ( 0 , M + 1 ): for j in range ( 0 , N + 1 ): coef [ i + j ] += self . coef [ i ] * outro . coef [ j ] return Polinomial ( coef ) Derivada A regra da derivada de um polin\u00f4mio gen\u00e9rico da matem\u00e1tica \u00e9? {d\\over dx}\\sum_{i=0}^n c_ix^i = \\sum_{i=1}^n ic_ix^{i-1} Se c \u00e9 a lista de coeficientes, a derivada tem uma lista de coeficientes, dc , onde dc[i-1] = i*c[i] para i variando de 1 at\u00e9 o m\u00e1ximo \u00edndice em c . Note que dc tem um elemento a menos que c . Implementa\u00e7\u00e3o: class Polinomial : ... def derivacao ( self ): ## muda o self for i in range ( 1 , len ( self . coef )): self . coef [ i - 1 ] = i * self . coef [ i ] del self . coef [ - 1 ] def derivada ( self ): ## retorna um novo polin\u00f4mio dpdx = Polinomial ( self . coef [:]) ## copia dpdx . derivacao () return dpdx Sa\u00edda formatada class Polinomial : ... def __str__ ( self ): s = '' for i in range ( 0 , len ( self . coef )): if self . coef [ i ] != 0 : s += ' + %g *x^ %d ' % ( self . coef [ i ], i ) ## corrigindo os casos especiais: s = s . replace ( '+ -' , '- ' ) s = s . replace ( ' 1*' , ' ' ) s = s . replace ( 'x^0' , '1' ) s = s . replace ( 'x^1 ' , 'x ' ) s = s . replace ( 'x^1' , 'x' ) if s [ 0 : 3 ] == ' + ' : ## removendo o + inicial s = s [ 3 :] if s [ 0 : 3 ] == ' - ' : ## corrigindo espa\u00e7os para - inicial s = '-' + s [ 3 :] return s Uso Considere p_1(x)= 1-x,\\quad p_2(x)=x - 6x^4 - x^5 e sua soma p_3(x) = p_1(x) + p_2(x) = 1 -6x^4 - x^5 >>> p1 = Polinomial ([ 1 , - 1 ]) >>> print p1 1 - x >>> p2 = Polinomial ([ 0 , 1 , 0 , 0 , - 6 , - 1 ]) >>> p3 = p1 + p2 >>> print p3 . coef [ 1 , 0 , 0 , 0 , - 6 , - 1 ] >>> p2 . derivacao () >>> print p2 1 - 24 * x ^ 3 - 5 * x ^ 4 Classe para vetores no plano Opera\u00e7\u00f5es matem\u00e1ticas para vetores no plano: \\begin{align} (a,b) + (c,d) &= (a+c, b+d)\\\\ (a,b) - (c,d) &= (a-c, b-d)\\\\ (a,b)\\cdot(c,d) &= ac + bd\\\\ (a,b) &= (c, d)\\hbox{ if }a=c\\hbox{ and }b=d \\end{align} C\u00f3digo de aplica\u00e7\u00e3o desejado: >>> u = Vet2D ( 0 , 1 ) >>> v = Vet2D ( 1 , 0 ) >>> print u + v ( 1 , 1 ) >>> a = u + v >>> w = Vet2D ( 1 , 1 ) >>> a == w True >>> print u - v ( - 1 , 1 ) >>> print u * v 0 Implementa\u00e7\u00e3o class Vey2D : def __init__ ( self , x , y ): self . x = x self . y = y def __add__ ( self , outro ): return Vet2D ( self . x + outro . x , self . y + outro . y ) def __sub__ ( self , outro ): return Vet2D ( self . x - outro . x , self . y - outro . y ) def __mul__ ( self , outro ): return self . x * outro . x + self . y * outro . y def __abs__ ( self ): return math . sqrt ( self . x ** 2 + self . y ** 2 ) def __eq__ ( self , outro ): return self . x == outro . x and self . y == outro . y def __str__ ( self ): return '( %g , %g )' % ( self . x , self . y ) def __ne__ ( self , outro ): return not self . __eq__ ( outro ) ## reusando __eq__ O que tem em uma classe? class A : \"\"\"Uma classe para demonstra\u00e7\u00e3o.\"\"\" def __init__ ( self , valor ): self . v = valor Qualquer inst\u00e2ncia mant\u00e9m seus atributos em um dicion\u00e1rio criado automaticamente pelo Python self.__dict__ dictionary . >>> a = A ([ 1 , 2 ]) >>> print a . __dict__ ## todos os atributos { 'v' : [ 1 , 2 ]} >>> dir ( a ) ## o que tem no objeto a? '__doc__' , '__init__' , '__module__' , 'dump' , 'v' ] >>> a . __doc__ ## documenta\u00e7\u00e3o de A 'Uma classe para demonstra\u00e7\u00e3o.' Podemos adicionais quantos novos atributos quisermos! >>> a . minha_var = 10 ## add new attribute (!) >>> a . __dict__ { 'minha_var' : 10 , 'v' : [ 1 , 2 ]} >>> dir ( a ) [ '__doc__' , '__init__' , '__module__' , 'dump' , 'minha_var' , 'v' ] >>> b = A ( - 1 ) >>> b . __dict__ ## b n\u00e3o tem atributo minha_var { 'v' : - 1 } >>> dir ( b ) [ '__doc__' , '__init__' , '__module__' , 'dump' , 'v' ] Resumo de classes Definindo a classe Exemplo sobre a defini\u00e7\u00e3o de uma classe com atributos e m\u00e9todos import numpy as np import matplotlib.pyplot as plt class Gravidade : \"\"\"For\u00e7a da Gravidade entre dois objetos.\"\"\" def __init__ ( self , m , M ): self . m = m self . M = M self . G = 6.67428E-11 ## Constante de gravita\u00e7\u00e3o def forca ( self , r ): G , m , M = self . G , self . m , self . M return G * m * M / r ** 2 def visualizacao ( self , r_start , r_stop , n = 100 ): r = np . linspace ( r_start , r_stop , n ) g = self . forca ( r ) plt . title ( 'm= %g , M= %g ' % ( self . m , self . M )) plt . plot ( r , g ) plt . show () Exemplo de uso dessa classe mass_lua = 7.35E+22 mass_terra = 5.97E+24 ## criando a inst\u00e2ncia (objeto) da classe Gravidade: gravidade = Gravidade ( mass_lua , mass_terra ) r = 3.85E+8 ## dist\u00e2ncia da lua \u00e0 terra em metros Fg = gravity . force ( r ) ## chamando o m\u00e9todo for\u00e7a da classe gravidade . visualizacao ( 0 , 100 ) ## visualizando Resumos dos m\u00e9todos especiais c = a + b implica c = a.__add__(b) Existem m\u00e9todos especiais para a+b , a-b , a*b , a/b , a**b , -a , if a: , len(a) , str(a) (sa\u00edda formatada), repr(a) (recria a com eval ), etc. Com os m\u00e9todos especiais podemos criar novos objetos matem\u00e1ticos como vetores, polinoniais, n\u00fameros complexos e escrever \"codigos matem\u00e1ticos\" (aritm\u00e9tica) A chamada dos m\u00e9todos especiais \u00e9 particularmente \u00fatil: v = c(5) significa v = c.__call__(5) Fun\u00e7\u00f5es com par\u00e2metros devem ser representadas por uma classe com os par\u00e2metros como atributos e com uma chamada a um m\u00e9todo especial para a avalia\u00e7\u00e3o da fun\u00e7\u00e3o. Tarefa Quantifica\u00e7\u00e3o da incerteza: Considere a medi\u00e7\u00e3o da gravidade $g$ atrav\u00e9s da queda de uma bola de $ y=y_0 $ para $ y=0 $ no tempo $ T $: g = 2y_0T^{-2} E se $ y_0 $ e $ T $ s\u00e3o incertos? Digamos $ y_0\\in [0.99,1.01] $ m e $ T\\in [0.43, 0.47] $ s. Qual \u00e9 o grau de incerteza em $ g $? Regras para calcular com intervalos, $ p=[a,b] $ e $ q=[c,d] $: $ p+q = [a + c, b + d] $ $ p-q = [a - d, b - c] $ $ pq = [\\min(ac, ad, bc, bd), \\max(ac, ad, bc, bd)] $ $ p/q = [\\min(a/c, a/d, b/c, b/d), \\max(a/c, a/d, b/c, b/d)] $ ($ [c,d] $ n\u00e3o pode conter zero) Objetivo: fazer uma classe para a aritm\u00e9tica com intervalos. Voltar ao topo","title":"Aplica\u00e7\u00f5es"},{"location":"classes/aplicacoes/#generalizando-a-representacao-de-uma-funcao-por-classes","text":"Dada uma fun\u00e7\u00e3o com $ n+1 $ par\u00e2metros e uma vari\u00e1vel independente, f(x; p_0,\\ldots,p_n) \u00e9 \u00fatil representar f por uma classe onde $ p_0,\\ldots,p_n $ s\u00e3o atributos e __call__(x) calcula $ f(x) $. class MyFunc : def __init__ ( self , p0 , p1 , p2 , ... , pn ): self . p0 = p0 self . p1 = p1 ... self . pn = pn def __call__ ( self , x ): return ...","title":"Generalizando a representa\u00e7\u00e3o de uma fun\u00e7\u00e3o por classes"},{"location":"classes/aplicacoes/#classe-para-derivar-uma-funcao","text":"Dada certa fun\u00e7\u00e3o matem\u00e1tica em Python, digamos: def f ( x ): return x ** 3 Podemos fazer uma classe Derivada e escrever: dfdx = Derivada ( f ) Ent\u00e3o, dfdx se comporta como uma fun\u00e7\u00e3o que calcula a derivada de f(x) ? print dfdx ( 2 ) ## calcula 3*x**2 para x=2","title":"Classe para derivar uma fun\u00e7\u00e3o"},{"location":"classes/aplicacoes/#solucao","text":"M\u00e9todo Vamos usar uma deriva\u00e7\u00e3o num\u00e9rica por de tr\u00e1s dos panos: f'(x) \\approx {f(x+h)-f(x)\\over h} para um pequeno $ h $, digamos de $ h=10^{-5} $","title":"Solu\u00e7\u00e3o"},{"location":"classes/aplicacoes/#implementacao","text":"class Derivada : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) def __call__ ( self , x ): f = self . f h = self . h return ( f ( x + h ) - f ( x )) / h","title":"Implementa\u00e7\u00e3o"},{"location":"classes/aplicacoes/#uso","text":">>> import math >>> df = Derivada ( math . sin ) >>> x = math . pi >>> df ( x ) - 0.9999999999898844 >>> math . cos ( x ) ## exato - 1.0 >>> def g ( t ): ... return t ** 3 ... >>> dg = Derivada ( g ) >>> t = 1 >>> dg ( t ) ## compare com 3 (exato) 3.000030000110953 Essa \u00e9 uma implementa\u00e7\u00e3o \u00fatil para o uso em outros m\u00e9todos que necessitam da derivada, como por exemplo o m\u00e9todo de Newton para a solu\u00e7\u00e3o de equa\u00e7\u00f5es n\u00e3o lineares.","title":"Uso"},{"location":"classes/aplicacoes/#funcao-de-teste","text":"Como podemos testar a classe Derivada ? M\u00e9todo 1: calcular $ (f(x+h)-f(x))/h $ na m\u00e3o para algum valor de $ f $ e $ h $; M\u00e9todo 2: utilize fun\u00e7\u00f5es lineares que resultam em derivadas exatas pela nossa classe, independente de $ h $. Fun\u00e7\u00e3o de teste baseada no m\u00e9todo 2: def test_Derivada (): ## A formula fornece valores exatos para fun\u00e7\u00f5es lineares, independente de h f = lambda x : a * x + b a = 3.5 b = 8 dfdx = Derivada ( f , h = 0.5 ) dif = abs ( dfdx ( 4.5 ) - a ) assert dif < 1E-14 , 'Problema na classe Derivada, dif= %s ' % dif","title":"Fun\u00e7\u00e3o de teste"},{"location":"classes/aplicacoes/#explicacao-da-funcao-teste","text":"Uso fun\u00e7\u00f5es lambda : f = lambda x : a * x + b \u00c9 equivalente a: def f ( x ): return a * x + b Fun\u00e7\u00f5es lambda s\u00e3o convenientes para produzir c\u00f3digos r\u00e1pidos e curtos. Uso de fechamentos: f = lambda x : a * x + b a = 3.5 b = 8 dfdx = Derivada ( f , h = 0.5 ) dfdx ( 4.5 ) Parece claro... mas: Como Derivada.__call__ sabe a e b quando chama nossa fun\u00e7\u00e3o f(x) ? Fun\u00e7\u00f5es locais dentro de fun\u00e7\u00f5es tem acesso a todas as vari\u00e1veis locais na fun\u00e7\u00e3o que s\u00e3o definidas! f pode acessar a e b em test_Derivada mesmo quando chamada de __call__ na classe Derivada ; f \u00e9 conhecida como fechamento (closure) na ci\u00eancia da computa\u00e7\u00e3o.","title":"Explica\u00e7\u00e3o da fun\u00e7\u00e3o teste"},{"location":"classes/aplicacoes/#a-solucao-exata-mesmo","text":"Podemos tamb\u00e9m executar a deriva\u00e7\u00e3o simb\u00f3lica utilizando o SymPy: >>> import sympy as sp >>> def g ( t ): ... return t ** 3 ... >>> t = sp . Symbol ( 't' ) >>> dgdt = sp . diff ( g ( t ), t ) ## calcula g'(t) >>> dgdt 3 * t ** 2 >>> ## Transformando a express\u00e3o sympy dgdt em fun\u00e7\u00e3o python dg(t) >>> dg = lambdify ([ t ], dgdt ) >>> dg ( 1 ) 3","title":"A solu\u00e7\u00e3o exata mesmo"},{"location":"classes/aplicacoes/#classe-baseada-no-sympy","text":"import sympy as sp class Derivada_sympy : def __init__ ( self , f ): ## f: Python f(x) x = sp . Symbol ( 'x' ) sympy_f = f ( x ) sympy_dfdx = sp . diff ( sympy_f , x ) self . __call__ = sp . lambdify ([ x ], sympy_dfdx ) Uso: >>> def g ( t ): ... return t ** 3 >>> def h ( y ): ... return sp . sin ( y ) >>> dg = Derivada_sympy ( g ) >>> dh = Derivada_sympy ( h ) >>> dg ( 1 ) ## 3*1**2 = 3 3 >>> import math >>> dh ( pi ) ## cos(math.pi) = -1 - 1.0","title":"Classe baseada no SymPy"},{"location":"classes/aplicacoes/#classe-para-integrar-uma-funcao","text":"Dada a fun\u00e7\u00e3o $ f(x) $, n\u00f3s queremos calcular F(x; a) = \\int_a^x f(t)dt","title":"Classe para Integrar uma fun\u00e7\u00e3o"},{"location":"classes/aplicacoes/#a-tecnica","text":"Podemos utilizar, por exemplo, a regra dos trap\u00e9zios: \\int_a^x f(t)dt = h\\left({1\\over2}f(a) + \\sum_{i=1}^{n-1} f(a+ih) + {1\\over2}f(x)\\right) O objetivo \u00e9 obter um c\u00f3digo que resolva da seguinte forma: def f ( x ): return math . exp ( - x ** 2 ) * math . sin ( 10 * x ) a = 0 n = 200 F = Integral ( f , a , n ) x = 1.2 print F ( x )","title":"A t\u00e9cnica"},{"location":"classes/aplicacoes/#implementacao_1","text":"def trapezios ( f , a , x , n ): h = ( x - a ) / float ( n ) I = 0.5 * f ( a ) for i in range ( 1 , n ): I += f ( a + i * h ) I += 0.5 * f ( x ) I *= h return I A classe Integral possui f , a e n como atributos e tem um m\u00e9todo especial de chamada para o c\u00e1lculo da integral: class Integral : def __init__ ( self , f , a , n = 100 ): self . f , self . a , self . n = f , a , n def __call__ ( self , x ): return trapezios ( self . f , self . a , x , self . n )","title":"Implementa\u00e7\u00e3o"},{"location":"classes/aplicacoes/#funcao-de-teste_1","text":"Como podemos testar a classe integral ? M\u00e9todo 1: calcular na m\u00e3o alguma $f$ para um $n$ pequeno; M\u00e9todo 2: utilizar aquelas fun\u00e7\u00f5es lineares que s\u00e3o integradas exatamente pela nossa integra\u00e7\u00e3o num\u00e9rica, independente de $n$. Fun\u00e7\u00e3o de teste baseada no m\u00e9todo 2: def test_Integral (): f = lambda x : 2 * x + 5 F = lambda x : x ** 2 + 5 * x - ( a ** 2 + 5 * a ) a = 2 dfdx = Integralf , a , n = 4 ) x = 6 dif = abs ( I ( x ) - ( F ( x ) - F ( a ))) assert dif < 1E-15 , 'Problema na classe Integral, dif= %s ' % dif","title":"Fun\u00e7\u00e3o de teste"},{"location":"classes/aplicacoes/#classe-para-polinomios","text":"Um polin\u00f4mio pode ser especificado por uma lista de seus coeficientes, por exemplo $ 1 - x^2 + 2x^3 $ \u00e9 1 + 0\\cdot x - 1\\cdot x^2 + 2\\cdot x^3 e os coeficientes podem ser armazenados como [1, 0, -1, 2] . C\u00f3digo desejado da aplica\u00e7\u00e3o: >>> p1 = Polinomial ([ 1 , - 1 ]) >>> print p1 1 - x >>> p2 = Polinomial ([ 0 , 1 , 0 , 0 , - 6 , - 1 ]) >>> p3 = p1 + p2 >>> print p3 . coef [ 1 , 0 , 0 , 0 , - 6 , - 1 ] >>> print p3 1 - 6 * x ^ 4 - x ^ 5 >>> p2 . derivada () >>> print p2 1 - 24 * x ^ 3 - 5 * x ^ 4 Como podemos fazer a classe Polinomial ?","title":"Classe para polin\u00f4mios"},{"location":"classes/aplicacoes/#codigo-basico","text":"class Polinomial : def __init__ ( self , coeficientes ): self . coef = coeficientes def __call__ ( self , x ): s = 0 for i in range ( len ( self . coef )): s += self . coef [ i ] * x ** i return s","title":"C\u00f3digo b\u00e1sico"},{"location":"classes/aplicacoes/#adicao","text":"class Polinomial : ... def __add__ ( self , outro ): ## return self + outro ## inicia com a lista mais longa e adiciona a outra: if len ( self . coef ) > len ( outro . coef ): coefsoma = self . coeff [:] ## copia! for i in range ( len ( outro . coef )): coefsoma [ i ] += outro . coef [ i ] else : coefsoma = outro . coef [:] ## copia! for i in range ( len ( self . coef )): coefsoma [ i ] += self . coef [ i ] return Polinomial ( coefsoma )","title":"Adi\u00e7\u00e3o"},{"location":"classes/aplicacoes/#multiplicacao","text":"Multiplica\u00e7\u00e3o gen\u00e9rica de dois polin\u00f4mios quaisquer: \\left(\\sum_{i=0}^Mc_ix^i\\right)\\left(\\sum_{j=0}^N d_jx^j\\right) = \\sum_{i=0}^M \\sum_{j=0}^N c_id_j x^{i+j} O coeficiente que corresponde a pot\u00eancia $ i+j $ \u00e9 $ c_i\\cdot d_j $. A lista r dos coeficientes do resultado \u00e9: r[i+j] = c[i]*d[j] ( i e j variando de 0 a $ M $ e $ N $, respectivamente.) Implementa\u00e7\u00e3o class Polinomial : ... def __mul__ ( self , outro ): M = len ( self . coef ) - 1 N = len ( outro . coef ) - 1 coef = [ 0 ] * ( M + N + 1 ) ## or zeros(M+N+1) for i in range ( 0 , M + 1 ): for j in range ( 0 , N + 1 ): coef [ i + j ] += self . coef [ i ] * outro . coef [ j ] return Polinomial ( coef )","title":"Multiplica\u00e7\u00e3o"},{"location":"classes/aplicacoes/#derivada","text":"A regra da derivada de um polin\u00f4mio gen\u00e9rico da matem\u00e1tica \u00e9? {d\\over dx}\\sum_{i=0}^n c_ix^i = \\sum_{i=1}^n ic_ix^{i-1} Se c \u00e9 a lista de coeficientes, a derivada tem uma lista de coeficientes, dc , onde dc[i-1] = i*c[i] para i variando de 1 at\u00e9 o m\u00e1ximo \u00edndice em c . Note que dc tem um elemento a menos que c . Implementa\u00e7\u00e3o: class Polinomial : ... def derivacao ( self ): ## muda o self for i in range ( 1 , len ( self . coef )): self . coef [ i - 1 ] = i * self . coef [ i ] del self . coef [ - 1 ] def derivada ( self ): ## retorna um novo polin\u00f4mio dpdx = Polinomial ( self . coef [:]) ## copia dpdx . derivacao () return dpdx","title":"Derivada"},{"location":"classes/aplicacoes/#saida-formatada","text":"class Polinomial : ... def __str__ ( self ): s = '' for i in range ( 0 , len ( self . coef )): if self . coef [ i ] != 0 : s += ' + %g *x^ %d ' % ( self . coef [ i ], i ) ## corrigindo os casos especiais: s = s . replace ( '+ -' , '- ' ) s = s . replace ( ' 1*' , ' ' ) s = s . replace ( 'x^0' , '1' ) s = s . replace ( 'x^1 ' , 'x ' ) s = s . replace ( 'x^1' , 'x' ) if s [ 0 : 3 ] == ' + ' : ## removendo o + inicial s = s [ 3 :] if s [ 0 : 3 ] == ' - ' : ## corrigindo espa\u00e7os para - inicial s = '-' + s [ 3 :] return s","title":"Sa\u00edda formatada"},{"location":"classes/aplicacoes/#uso_1","text":"Considere p_1(x)= 1-x,\\quad p_2(x)=x - 6x^4 - x^5 e sua soma p_3(x) = p_1(x) + p_2(x) = 1 -6x^4 - x^5 >>> p1 = Polinomial ([ 1 , - 1 ]) >>> print p1 1 - x >>> p2 = Polinomial ([ 0 , 1 , 0 , 0 , - 6 , - 1 ]) >>> p3 = p1 + p2 >>> print p3 . coef [ 1 , 0 , 0 , 0 , - 6 , - 1 ] >>> p2 . derivacao () >>> print p2 1 - 24 * x ^ 3 - 5 * x ^ 4","title":"Uso"},{"location":"classes/aplicacoes/#classe-para-vetores-no-plano","text":"Opera\u00e7\u00f5es matem\u00e1ticas para vetores no plano: \\begin{align} (a,b) + (c,d) &= (a+c, b+d)\\\\ (a,b) - (c,d) &= (a-c, b-d)\\\\ (a,b)\\cdot(c,d) &= ac + bd\\\\ (a,b) &= (c, d)\\hbox{ if }a=c\\hbox{ and }b=d \\end{align} C\u00f3digo de aplica\u00e7\u00e3o desejado: >>> u = Vet2D ( 0 , 1 ) >>> v = Vet2D ( 1 , 0 ) >>> print u + v ( 1 , 1 ) >>> a = u + v >>> w = Vet2D ( 1 , 1 ) >>> a == w True >>> print u - v ( - 1 , 1 ) >>> print u * v 0","title":"Classe para vetores no plano"},{"location":"classes/aplicacoes/#implementacao_2","text":"class Vey2D : def __init__ ( self , x , y ): self . x = x self . y = y def __add__ ( self , outro ): return Vet2D ( self . x + outro . x , self . y + outro . y ) def __sub__ ( self , outro ): return Vet2D ( self . x - outro . x , self . y - outro . y ) def __mul__ ( self , outro ): return self . x * outro . x + self . y * outro . y def __abs__ ( self ): return math . sqrt ( self . x ** 2 + self . y ** 2 ) def __eq__ ( self , outro ): return self . x == outro . x and self . y == outro . y def __str__ ( self ): return '( %g , %g )' % ( self . x , self . y ) def __ne__ ( self , outro ): return not self . __eq__ ( outro ) ## reusando __eq__","title":"Implementa\u00e7\u00e3o"},{"location":"classes/aplicacoes/#o-que-tem-em-uma-classe","text":"class A : \"\"\"Uma classe para demonstra\u00e7\u00e3o.\"\"\" def __init__ ( self , valor ): self . v = valor Qualquer inst\u00e2ncia mant\u00e9m seus atributos em um dicion\u00e1rio criado automaticamente pelo Python self.__dict__ dictionary . >>> a = A ([ 1 , 2 ]) >>> print a . __dict__ ## todos os atributos { 'v' : [ 1 , 2 ]} >>> dir ( a ) ## o que tem no objeto a? '__doc__' , '__init__' , '__module__' , 'dump' , 'v' ] >>> a . __doc__ ## documenta\u00e7\u00e3o de A 'Uma classe para demonstra\u00e7\u00e3o.'","title":"O que tem em uma classe?"},{"location":"classes/aplicacoes/#podemos-adicionais-quantos-novos-atributos-quisermos","text":">>> a . minha_var = 10 ## add new attribute (!) >>> a . __dict__ { 'minha_var' : 10 , 'v' : [ 1 , 2 ]} >>> dir ( a ) [ '__doc__' , '__init__' , '__module__' , 'dump' , 'minha_var' , 'v' ] >>> b = A ( - 1 ) >>> b . __dict__ ## b n\u00e3o tem atributo minha_var { 'v' : - 1 } >>> dir ( b ) [ '__doc__' , '__init__' , '__module__' , 'dump' , 'v' ]","title":"Podemos adicionais quantos novos atributos quisermos!"},{"location":"classes/aplicacoes/#resumo-de-classes","text":"","title":"Resumo de classes"},{"location":"classes/aplicacoes/#definindo-a-classe","text":"Exemplo sobre a defini\u00e7\u00e3o de uma classe com atributos e m\u00e9todos import numpy as np import matplotlib.pyplot as plt class Gravidade : \"\"\"For\u00e7a da Gravidade entre dois objetos.\"\"\" def __init__ ( self , m , M ): self . m = m self . M = M self . G = 6.67428E-11 ## Constante de gravita\u00e7\u00e3o def forca ( self , r ): G , m , M = self . G , self . m , self . M return G * m * M / r ** 2 def visualizacao ( self , r_start , r_stop , n = 100 ): r = np . linspace ( r_start , r_stop , n ) g = self . forca ( r ) plt . title ( 'm= %g , M= %g ' % ( self . m , self . M )) plt . plot ( r , g ) plt . show ()","title":"Definindo a classe"},{"location":"classes/aplicacoes/#exemplo-de-uso-dessa-classe","text":"mass_lua = 7.35E+22 mass_terra = 5.97E+24 ## criando a inst\u00e2ncia (objeto) da classe Gravidade: gravidade = Gravidade ( mass_lua , mass_terra ) r = 3.85E+8 ## dist\u00e2ncia da lua \u00e0 terra em metros Fg = gravity . force ( r ) ## chamando o m\u00e9todo for\u00e7a da classe gravidade . visualizacao ( 0 , 100 ) ## visualizando","title":"Exemplo de uso dessa classe"},{"location":"classes/aplicacoes/#resumos-dos-metodos-especiais","text":"c = a + b implica c = a.__add__(b) Existem m\u00e9todos especiais para a+b , a-b , a*b , a/b , a**b , -a , if a: , len(a) , str(a) (sa\u00edda formatada), repr(a) (recria a com eval ), etc. Com os m\u00e9todos especiais podemos criar novos objetos matem\u00e1ticos como vetores, polinoniais, n\u00fameros complexos e escrever \"codigos matem\u00e1ticos\" (aritm\u00e9tica) A chamada dos m\u00e9todos especiais \u00e9 particularmente \u00fatil: v = c(5) significa v = c.__call__(5) Fun\u00e7\u00f5es com par\u00e2metros devem ser representadas por uma classe com os par\u00e2metros como atributos e com uma chamada a um m\u00e9todo especial para a avalia\u00e7\u00e3o da fun\u00e7\u00e3o.","title":"Resumos dos m\u00e9todos especiais"},{"location":"classes/aplicacoes/#tarefa","text":"Quantifica\u00e7\u00e3o da incerteza: Considere a medi\u00e7\u00e3o da gravidade $g$ atrav\u00e9s da queda de uma bola de $ y=y_0 $ para $ y=0 $ no tempo $ T $: g = 2y_0T^{-2} E se $ y_0 $ e $ T $ s\u00e3o incertos? Digamos $ y_0\\in [0.99,1.01] $ m e $ T\\in [0.43, 0.47] $ s. Qual \u00e9 o grau de incerteza em $ g $? Regras para calcular com intervalos, $ p=[a,b] $ e $ q=[c,d] $: $ p+q = [a + c, b + d] $ $ p-q = [a - d, b - c] $ $ pq = [\\min(ac, ad, bc, bd), \\max(ac, ad, bc, bd)] $ $ p/q = [\\min(a/c, a/d, b/c, b/d), \\max(a/c, a/d, b/c, b/d)] $ ($ [c,d] $ n\u00e3o pode conter zero) Objetivo: fazer uma classe para a aritm\u00e9tica com intervalos. Voltar ao topo","title":"Tarefa"},{"location":"classes/classes/","text":"Introdu\u00e7\u00e3o a Classes Dividir para conquistar. Uma classe empacota um conjunto de dados (vari\u00e1veis) com um conjunto de fun\u00e7\u00f5es que operam sobre esses dados. O objetivo \u00e9 alcan\u00e7ar um c\u00f3digo mais modular atrav\u00e9s do agrupamento de dados e fun\u00e7\u00f5es em unidades gerenci\u00e1veis (normalmente pequenas). A maioria dos c\u00e1lculos matem\u00e1ticos podem ser programados facilmente sem o uso de classes, mas em v\u00e1rios problemas, classes tornam as solu\u00e7\u00f5es mais elegantes e/ou deixam o c\u00f3digo mais f\u00e1cil de ser estendido a um novo est\u00e1gio. No mundo n\u00e3o matem\u00e1tico, existem conceitos e algoritmos a eles associados que ajudam a estruturar a solu\u00e7\u00e3o de um problema. Classes podem ajudar no entendimento do problema e contribuir para simplificar a modelagem dos dados e as a\u00e7\u00f5es em programas. O b\u00e1sico de classes Classe = fun\u00e7\u00f5es + dados(vari\u00e1veis) em uma unidade Uma classe empacota dados (uma cole\u00e7\u00e3o de vari\u00e1veis) e fun\u00e7\u00f5es em uma simples unidade; Como um programador voc\u00ea pode criar uma nova classe e desse modo um novo tipo de objeto (como float, lista, arquivo,...); Uma classe \u00e9 muito parecida com um m\u00f3dulo: uma cole\u00e7\u00e3o de vari\u00e1veis \"globais\" e fun\u00e7\u00f5es que pertencem a um mesmo escopo; Existe uma inst\u00e2ncia de um m\u00f3dulo enquanto uma classe pode ter muitas inst\u00e2ncias (c\u00f3pias); Programa\u00e7\u00e3o moderna aplica classes sempre que poss\u00edvel; Vai tomar algum tempo para dominar o conceito de classes; Vamos aprender fazendo! Representando uma fun\u00e7\u00e3o por uma classe O fundamento Considere uma fun\u00e7\u00e3o de $t$ com um par\u00e2metro $v_0$: y(t; v_0)=v_0t - {1\\over2}gt^2 Precisamos de $v_0$ e $t$ para avaliar $y$ (e $g = 9,81$), mas como devemos implementar isso? Tendo $t$ e $v_0$ como argumentos: def y ( t , v0 ): g = 9.81 return v0 * t - 0.5 * g * t ** 2 Tento $t$ como argumento e $v_0$ como vari\u00e1vel global: def y ( t ): g = 9.81 return v0 * t - 0.5 * g * t ** 2 Motiva\u00e7\u00e3o: $y(t)$ \u00e9 uma fun\u00e7\u00e3o de $t$ apenas. A id\u00e9ia Com uma classe, $y(t)$ pode ser uma fun\u00e7\u00e3o de $t$ apenas, mas ainda tem $v_0$ e $g$ como par\u00e2metros com valores dados; A classe empacota uma fun\u00e7\u00e3o $y(t)$ e os dados $(v_0, g)$. A vis\u00e3o t\u00e9cnica Faremos uma classe Y para $y(t; v_0)$ com vari\u00e1veis $v_0$ e $g$ e uma fun\u00e7\u00e3o de $t$ para calcular $y(t; v_0)$; Qualquer classe deve tamb\u00e9m ter uma fun\u00e7\u00e3o __init__ para a inicializa\u00e7\u00e3o das vari\u00e1veis. O c\u00f3digo class Y : def __init__ ( self , v0 ): self . v0 = v0 self . g = 9.81 def valor ( self , t ): return self . v0 * t - 0.5 * self . g * t ** 2 Uso: y = Y ( v0 = 3 ) ## cria a inst\u00e2ncia (objeto) v = y . valor ( 0.1 ) ## calcule o valor da fun\u00e7\u00e3o O construtor Quando escrevemos: y = Y ( v0 = 3 ) ## cria a inst\u00e2ncia (objeto) criamos uma nova vari\u00e1vel (inst\u00e2ncia) y do tipo Y . Y(3) \u00e9 uma chamada ao construtor: class Y : def __init__ ( self , v0 ): self . v0 = v0 self . g = 9.81 O que \u00e9 essa tal de vari\u00e1vel self ? Fique calmo, isso ser\u00e1 entendido mais a frente quando voc\u00ea se acostumar com ele! Pense no self como y , a nova vari\u00e1vel a ser criada. self.v0 = ... significa que nos anexamos a vari\u00e1vel v0 a self(y) ; Y(3) significa Y.__init__(y, 3) , isto \u00e9, definir self = y , v0 = 3 ; Lembre-se: self \u00e9 sempre o primeiro par\u00e2metro em uma fun\u00e7\u00e3o, mas nunca inserido na chamada! Ap\u00f3s y = Y(3) , y tem duas vari\u00e1veis v0 e g . Cita\u00e7\u00e3o In mathematics you don't understand things. You just get used to them. John von Neumann, mathematician, 1903-1957 1 . Representando uma fun\u00e7\u00e3o por uma classe O m\u00e9todo valor Fun\u00e7\u00f5es em classes s\u00e3o chamadas de m\u00e9todos; Vari\u00e1veis em classes s\u00e3o chamadas de atributos. Aqui est\u00e1 o m\u00e9todo valor: def valor ( self , t ): return self . v0 * t - 0.5 * self . g * t ** 2 Exemplo em uma chamada: v = y . valor ( t = 0.1 ) self \u00e9 deixado fora da chamada, mas o Python insere y automaticamente como o argumento self dentro do m\u00e9todo de valor. Pense na chamada como: Y . valor ( y , t = 0.1 ) Dentro de valor as coisas \"aparecem\" como: return y . v0 * t - 0.5 * y . g * t ** 2 self d\u00e1 acesso \u00e0s \"vari\u00e1veis globais\" do objeto classe. Resumo do objeto classe A classe Y coleta os atributos v0 e g e o m\u00e9todo valor como uma unidade; valor(t) \u00e9 uma fun\u00e7\u00e3o de t apenas, mas tem acesso autom\u00e1tico aos par\u00e2metros v0 e g como self.v0 e self.g respectivamente; A grande vantagem: podemos enviar y.valor como uma fun\u00e7\u00e3o ordin\u00e1ria de t \u00e0 qualquer outra fun\u00e7\u00e3o que espera uma fun\u00e7\u00e3o f(t) de uma vari\u00e1vel: def fazer_tabela ( f , t_fim , n ): for t in np . linspace ( 0 , t_fim , n ): print t , f ( t ) def g ( t ): return np . sin ( t ) * np . exp ( - t ) fazer_tabela ( g , 2 * pi , 101 ) ## enviar uma fun\u00e7\u00e3o normal y = Y ( 6.5 ) fazer_tabela ( y . valor , 2 * pi , 101 ) ## enviar um m\u00e9todo de uma classe O caso gen\u00e9rico Dada uma fun\u00e7\u00e3o com n+1 par\u00e2metros e uma vari\u00e1vel independente, f(x; p_0,\\ldots,p_n) \u00e9 elegante e esperto representar $f$ por uma classe onde p_0,\\ldots,p_n s\u00e3o atributos e que tenha um m\u00e9todo, digamos, valor(self, x) para calcular f(x) . class MinhaFuncao : def __init__ ( self , p0 , p1 , p2 , ... , pn ): self . p0 = p0 self . p1 = p1 ... self . pn = pn def valor ( self , x ): return ... Classe para uma fun\u00e7\u00e3o com 4 par\u00e2metros v(r; \\beta, \\mu_0, n, R) = \\left({\\beta\\over 2\\mu_0}\\right)^{{1\\over n}} {n \\over n+1}\\left( R^{1 + {1\\over n}} - r^{1 + {1\\over n}}\\right) class PerfilVelocidades : def __init__ ( self , beta , mu0 , n , R ): self . beta , self . mu0 , self . n , self . R = \\ beta , mu0 , n , R def valor ( self , r ): beta , mu0 , n , R = \\ self . beta , self . mu0 , self . n , self . R n = float ( n ) ## garantir as divis\u00f5es por float v = ( beta / ( 2.0 * mu0 )) ** ( 1 / n ) * ( n / ( n + 1 )) * \\ ( R ** ( 1 + 1 / n ) - r ** ( 1 + 1 / n )) return v v = PerfilVelocidades ( R = 1 , beta = 0.06 , mu0 = 0.02 , n = 0.1 ) print v . valor ( r = 0.1 ) Sintaxe gen\u00e9rica de uma classe em Python class MinhaClasse : def __init__ ( self , p1 , p2 ): self . atr1 = p1 self . atr2 = p2 def metodo1 ( self , arg ): ## pode-se iniciar um novo atributo fora do construtor: self . atr3 = arg return self . atr1 + self . atr2 + self . atr3 def metodo2 ( self ): print 'Oi!' m = MinhaClasse ( 4 , 10 ) print m . metodo1 ( - 2 ) m . metodo2 () \u00c9 comum iniciar todos os atributos no construtor, mas n\u00e3o \u00e9 uma obrigatoriedade. Os atributos podem ser iniciados onde forem necess\u00e1rios! Mas o que \u00e9 a tal da vari\u00e1vel self , quero saber! Cuidado: Voc\u00ea tem duas escolhas: Seguir as explica\u00e7\u00f5es detalhadas sobre o que self realmente \u00e9; Deixar para aprender aos poucos e ir absorvendo conforme a experi\u00eancia (de reprente self fica claro!). A sintaxe: y = Y ( 3 ) Pode ser entendida como: Y . __init__ ( y , 3 ) ## o prefixo da classe Y \u00e9 como um prefixo de m\u00f3dulo Ent\u00e3o: self . v0 = v0 \u00c9 na verdade: y . v0 = 3 Como self trabalha no m\u00e9todo valor y . v0 = 3 Pode ser alternativamente escrito como: v = Y . valor ( y , 2 ) Ent\u00e3o, n\u00f3s fazemos instance.method(arg1, arg2), self se tornar instance dentro de method . Trabalhando com m\u00faltiplas inst\u00e2ncias pode ajudar a explicar self id(obj) : mostra o identificador Python \u00fanico de um objeto: class ExploradorDeSiMesmo : \"\"\"Classe para calcular a*x.\"\"\" def __init__ ( self , a ): self . a = a print 'init: a= %g , id(self)= %d ' % ( self . a , id ( self )) def valor ( self , x ): print 'valor: a= %g , id(self)= %d ' % ( self . a , id ( self )) return self . a * x >>> s1 = ExploradorDeSiMesmo ( 1 ) init : a = 1 , id ( self ) = 38085696 >>> id ( s1 ) 38085696 >>> s2 = ExploradorDeSiMesmo ( 2 ) init : a = 2 , id ( self ) = 38085192 >>> id ( s2 ) 38085192 >>> s1 . valor ( 4 ) valor : a = 1 , id ( self ) = 38085696 4 >>> ExploradorDeSiMesmo . valor ( s1 , 4 ) valor : a = 1 , id ( self ) = 38085696 4 >>> s2 . value ( 5 ) value : a = 2 , id ( self ) = 38085192 10 >>> SelfExplorer . value ( s2 , 5 ) value : a = 2 , id ( self ) = 38085192 10 Em matem\u00e1tica voc\u00ea n\u00e3o entende as coisas. Voc\u00ea apenas se acostuma a elas. \u21a9","title":"Classes"},{"location":"classes/classes/#introducao-a-classes","text":"Dividir para conquistar. Uma classe empacota um conjunto de dados (vari\u00e1veis) com um conjunto de fun\u00e7\u00f5es que operam sobre esses dados. O objetivo \u00e9 alcan\u00e7ar um c\u00f3digo mais modular atrav\u00e9s do agrupamento de dados e fun\u00e7\u00f5es em unidades gerenci\u00e1veis (normalmente pequenas). A maioria dos c\u00e1lculos matem\u00e1ticos podem ser programados facilmente sem o uso de classes, mas em v\u00e1rios problemas, classes tornam as solu\u00e7\u00f5es mais elegantes e/ou deixam o c\u00f3digo mais f\u00e1cil de ser estendido a um novo est\u00e1gio. No mundo n\u00e3o matem\u00e1tico, existem conceitos e algoritmos a eles associados que ajudam a estruturar a solu\u00e7\u00e3o de um problema. Classes podem ajudar no entendimento do problema e contribuir para simplificar a modelagem dos dados e as a\u00e7\u00f5es em programas.","title":"Introdu\u00e7\u00e3o a Classes"},{"location":"classes/classes/#o-basico-de-classes","text":"Classe = fun\u00e7\u00f5es + dados(vari\u00e1veis) em uma unidade Uma classe empacota dados (uma cole\u00e7\u00e3o de vari\u00e1veis) e fun\u00e7\u00f5es em uma simples unidade; Como um programador voc\u00ea pode criar uma nova classe e desse modo um novo tipo de objeto (como float, lista, arquivo,...); Uma classe \u00e9 muito parecida com um m\u00f3dulo: uma cole\u00e7\u00e3o de vari\u00e1veis \"globais\" e fun\u00e7\u00f5es que pertencem a um mesmo escopo; Existe uma inst\u00e2ncia de um m\u00f3dulo enquanto uma classe pode ter muitas inst\u00e2ncias (c\u00f3pias); Programa\u00e7\u00e3o moderna aplica classes sempre que poss\u00edvel; Vai tomar algum tempo para dominar o conceito de classes; Vamos aprender fazendo!","title":"O b\u00e1sico de classes"},{"location":"classes/classes/#representando-uma-funcao-por-uma-classe","text":"","title":"Representando uma fun\u00e7\u00e3o por uma classe"},{"location":"classes/classes/#o-fundamento","text":"Considere uma fun\u00e7\u00e3o de $t$ com um par\u00e2metro $v_0$: y(t; v_0)=v_0t - {1\\over2}gt^2 Precisamos de $v_0$ e $t$ para avaliar $y$ (e $g = 9,81$), mas como devemos implementar isso? Tendo $t$ e $v_0$ como argumentos: def y ( t , v0 ): g = 9.81 return v0 * t - 0.5 * g * t ** 2 Tento $t$ como argumento e $v_0$ como vari\u00e1vel global: def y ( t ): g = 9.81 return v0 * t - 0.5 * g * t ** 2 Motiva\u00e7\u00e3o: $y(t)$ \u00e9 uma fun\u00e7\u00e3o de $t$ apenas.","title":"O fundamento"},{"location":"classes/classes/#a-ideia","text":"Com uma classe, $y(t)$ pode ser uma fun\u00e7\u00e3o de $t$ apenas, mas ainda tem $v_0$ e $g$ como par\u00e2metros com valores dados; A classe empacota uma fun\u00e7\u00e3o $y(t)$ e os dados $(v_0, g)$.","title":"A id\u00e9ia"},{"location":"classes/classes/#a-visao-tecnica","text":"Faremos uma classe Y para $y(t; v_0)$ com vari\u00e1veis $v_0$ e $g$ e uma fun\u00e7\u00e3o de $t$ para calcular $y(t; v_0)$; Qualquer classe deve tamb\u00e9m ter uma fun\u00e7\u00e3o __init__ para a inicializa\u00e7\u00e3o das vari\u00e1veis.","title":"A vis\u00e3o t\u00e9cnica"},{"location":"classes/classes/#o-codigo","text":"class Y : def __init__ ( self , v0 ): self . v0 = v0 self . g = 9.81 def valor ( self , t ): return self . v0 * t - 0.5 * self . g * t ** 2 Uso: y = Y ( v0 = 3 ) ## cria a inst\u00e2ncia (objeto) v = y . valor ( 0.1 ) ## calcule o valor da fun\u00e7\u00e3o","title":"O c\u00f3digo"},{"location":"classes/classes/#o-construtor","text":"Quando escrevemos: y = Y ( v0 = 3 ) ## cria a inst\u00e2ncia (objeto) criamos uma nova vari\u00e1vel (inst\u00e2ncia) y do tipo Y . Y(3) \u00e9 uma chamada ao construtor: class Y : def __init__ ( self , v0 ): self . v0 = v0 self . g = 9.81","title":"O construtor"},{"location":"classes/classes/#o-que-e-essa-tal-de-variavel-self","text":"Fique calmo, isso ser\u00e1 entendido mais a frente quando voc\u00ea se acostumar com ele! Pense no self como y , a nova vari\u00e1vel a ser criada. self.v0 = ... significa que nos anexamos a vari\u00e1vel v0 a self(y) ; Y(3) significa Y.__init__(y, 3) , isto \u00e9, definir self = y , v0 = 3 ; Lembre-se: self \u00e9 sempre o primeiro par\u00e2metro em uma fun\u00e7\u00e3o, mas nunca inserido na chamada! Ap\u00f3s y = Y(3) , y tem duas vari\u00e1veis v0 e g . Cita\u00e7\u00e3o In mathematics you don't understand things. You just get used to them. John von Neumann, mathematician, 1903-1957 1 .","title":"O que \u00e9 essa tal de vari\u00e1vel self?"},{"location":"classes/classes/#representando-uma-funcao-por-uma-classe_1","text":"","title":"Representando uma fun\u00e7\u00e3o por uma classe"},{"location":"classes/classes/#o-metodo-valor","text":"Fun\u00e7\u00f5es em classes s\u00e3o chamadas de m\u00e9todos; Vari\u00e1veis em classes s\u00e3o chamadas de atributos. Aqui est\u00e1 o m\u00e9todo valor: def valor ( self , t ): return self . v0 * t - 0.5 * self . g * t ** 2 Exemplo em uma chamada: v = y . valor ( t = 0.1 ) self \u00e9 deixado fora da chamada, mas o Python insere y automaticamente como o argumento self dentro do m\u00e9todo de valor. Pense na chamada como: Y . valor ( y , t = 0.1 ) Dentro de valor as coisas \"aparecem\" como: return y . v0 * t - 0.5 * y . g * t ** 2 self d\u00e1 acesso \u00e0s \"vari\u00e1veis globais\" do objeto classe.","title":"O m\u00e9todo valor"},{"location":"classes/classes/#resumo-do-objeto-classe","text":"A classe Y coleta os atributos v0 e g e o m\u00e9todo valor como uma unidade; valor(t) \u00e9 uma fun\u00e7\u00e3o de t apenas, mas tem acesso autom\u00e1tico aos par\u00e2metros v0 e g como self.v0 e self.g respectivamente; A grande vantagem: podemos enviar y.valor como uma fun\u00e7\u00e3o ordin\u00e1ria de t \u00e0 qualquer outra fun\u00e7\u00e3o que espera uma fun\u00e7\u00e3o f(t) de uma vari\u00e1vel: def fazer_tabela ( f , t_fim , n ): for t in np . linspace ( 0 , t_fim , n ): print t , f ( t ) def g ( t ): return np . sin ( t ) * np . exp ( - t ) fazer_tabela ( g , 2 * pi , 101 ) ## enviar uma fun\u00e7\u00e3o normal y = Y ( 6.5 ) fazer_tabela ( y . valor , 2 * pi , 101 ) ## enviar um m\u00e9todo de uma classe","title":"Resumo do objeto classe"},{"location":"classes/classes/#o-caso-generico","text":"Dada uma fun\u00e7\u00e3o com n+1 par\u00e2metros e uma vari\u00e1vel independente, f(x; p_0,\\ldots,p_n) \u00e9 elegante e esperto representar $f$ por uma classe onde p_0,\\ldots,p_n s\u00e3o atributos e que tenha um m\u00e9todo, digamos, valor(self, x) para calcular f(x) . class MinhaFuncao : def __init__ ( self , p0 , p1 , p2 , ... , pn ): self . p0 = p0 self . p1 = p1 ... self . pn = pn def valor ( self , x ): return ...","title":"O caso gen\u00e9rico"},{"location":"classes/classes/#classe-para-uma-funcao-com-4-parametros","text":"v(r; \\beta, \\mu_0, n, R) = \\left({\\beta\\over 2\\mu_0}\\right)^{{1\\over n}} {n \\over n+1}\\left( R^{1 + {1\\over n}} - r^{1 + {1\\over n}}\\right) class PerfilVelocidades : def __init__ ( self , beta , mu0 , n , R ): self . beta , self . mu0 , self . n , self . R = \\ beta , mu0 , n , R def valor ( self , r ): beta , mu0 , n , R = \\ self . beta , self . mu0 , self . n , self . R n = float ( n ) ## garantir as divis\u00f5es por float v = ( beta / ( 2.0 * mu0 )) ** ( 1 / n ) * ( n / ( n + 1 )) * \\ ( R ** ( 1 + 1 / n ) - r ** ( 1 + 1 / n )) return v v = PerfilVelocidades ( R = 1 , beta = 0.06 , mu0 = 0.02 , n = 0.1 ) print v . valor ( r = 0.1 )","title":"Classe para uma fun\u00e7\u00e3o com 4 par\u00e2metros"},{"location":"classes/classes/#sintaxe-generica-de-uma-classe-em-python","text":"class MinhaClasse : def __init__ ( self , p1 , p2 ): self . atr1 = p1 self . atr2 = p2 def metodo1 ( self , arg ): ## pode-se iniciar um novo atributo fora do construtor: self . atr3 = arg return self . atr1 + self . atr2 + self . atr3 def metodo2 ( self ): print 'Oi!' m = MinhaClasse ( 4 , 10 ) print m . metodo1 ( - 2 ) m . metodo2 () \u00c9 comum iniciar todos os atributos no construtor, mas n\u00e3o \u00e9 uma obrigatoriedade. Os atributos podem ser iniciados onde forem necess\u00e1rios!","title":"Sintaxe gen\u00e9rica de uma classe em Python"},{"location":"classes/classes/#mas-o-que-e-a-tal-da-variavel-self-quero-saber","text":"Cuidado: Voc\u00ea tem duas escolhas: Seguir as explica\u00e7\u00f5es detalhadas sobre o que self realmente \u00e9; Deixar para aprender aos poucos e ir absorvendo conforme a experi\u00eancia (de reprente self fica claro!). A sintaxe: y = Y ( 3 ) Pode ser entendida como: Y . __init__ ( y , 3 ) ## o prefixo da classe Y \u00e9 como um prefixo de m\u00f3dulo Ent\u00e3o: self . v0 = v0 \u00c9 na verdade: y . v0 = 3","title":"Mas o que \u00e9 a tal da vari\u00e1vel self, quero saber!"},{"location":"classes/classes/#como-self-trabalha-no-metodo-valor","text":"y . v0 = 3 Pode ser alternativamente escrito como: v = Y . valor ( y , 2 ) Ent\u00e3o, n\u00f3s fazemos instance.method(arg1, arg2), self se tornar instance dentro de method .","title":"Como self trabalha no m\u00e9todo valor"},{"location":"classes/classes/#trabalhando-com-multiplas-instancias-pode-ajudar-a-explicar-self","text":"id(obj) : mostra o identificador Python \u00fanico de um objeto: class ExploradorDeSiMesmo : \"\"\"Classe para calcular a*x.\"\"\" def __init__ ( self , a ): self . a = a print 'init: a= %g , id(self)= %d ' % ( self . a , id ( self )) def valor ( self , x ): print 'valor: a= %g , id(self)= %d ' % ( self . a , id ( self )) return self . a * x >>> s1 = ExploradorDeSiMesmo ( 1 ) init : a = 1 , id ( self ) = 38085696 >>> id ( s1 ) 38085696 >>> s2 = ExploradorDeSiMesmo ( 2 ) init : a = 2 , id ( self ) = 38085192 >>> id ( s2 ) 38085192 >>> s1 . valor ( 4 ) valor : a = 1 , id ( self ) = 38085696 4 >>> ExploradorDeSiMesmo . valor ( s1 , 4 ) valor : a = 1 , id ( self ) = 38085696 4 >>> s2 . value ( 5 ) value : a = 2 , id ( self ) = 38085192 10 >>> SelfExplorer . value ( s2 , 5 ) value : a = 2 , id ( self ) = 38085192 10 Em matem\u00e1tica voc\u00ea n\u00e3o entende as coisas. Voc\u00ea apenas se acostuma a elas. \u21a9","title":"Trabalhando com m\u00faltiplas inst\u00e2ncias pode ajudar a explicar self"},{"location":"classes/exemplosclasses/","text":"Um outro exemplo de Classe: conta no banco Atributos: nome, n\u00famero da conta, saldo; M\u00e9todos: dep\u00f3sito, saque, sa\u00edda formatada. class ContaBanco : def __init__ ( self , nome , numero_conta , deposito_inicial ): self . nome = nome self . no = numero_conta self . saldo = deposito_inicial def deposito ( self , movimentacao ): self . saldo += movimentacao def saque ( self , movimentacao ): self . saldo -= movimentacao def info ( self ): s = ' %s , %s , saldo: %s ' % \\ ( self . nome , self . no , self . saldo ) print s Exemplo de uso: >>> a1 = ContaBanco ( 'Joaquim Porto' , '19371554951' , 20000 ) >>> a2 = ContaBanco ( 'Manuel Carvalho' , '19371564761' , 20000 ) >>> a1 . deposito ( 1000 ) >>> a1 . saque ( 4000 ) >>> a2 . saque ( 10500 ) >>> a1 . saque ( 3500 ) >>> print \"a1's saldo:\" , a1 . saldo a1 's saldo: 13500 >>> a1 . info () Joaquim Porto , 19371554951 , saldo : 13500 >>> a2 . info () Manuel Carvalho , 19371564761 , saldo : 9500 Use o caractere _ para evitar o mau uso Poss\u00edvel, mas n\u00e3o intencionado ao uso: >>> a1 . nome = 'Qualquer Outro Nome' >>> a1 . saldo = 100000 >>> a1 . no = '19371564768' As afirma\u00e7\u00f5es para o uso correto: Os atributos n\u00e3o devem ser modificados! O atributo saldo pode ser visualizado. Modifica\u00e7\u00e3o do saldo \u00e9 feita atrav\u00e9s de saque ou deposito . Rem\u00e9dio: Atributos ou m\u00e9todos n\u00e3o intencionados ao uso fora da classe podem ser marcados como protegidos atrav\u00e9s do prefixo _ antes de seu nome (ex.: _nome ). Isso \u00e9 apenas uma conven\u00e7\u00e3o, n\u00e3o existe forma t\u00e9cnica de evitar que atributos e m\u00e9todos seja acessados. class ContaBancoM : def __init__ ( self , nome , numero_conta , deposito_inicial ): self . _nome = nome self . _no = numero_conta self . _saldo = deposito_inicial def deposito ( self , movimentacao ): self . _saldo += movimentacao def saque ( self , movimentacao ): self . _saldo -= movimentacao def ver_saldo ( self ): ## NOVO - ver o valor do saldo return self . _saldo def info ( self ): s = ' %s , %s , saldo: %s ' % \\ ( self . _nome , self . _no , self . _saldo ) print s Uso: a1 = ContaBancoM ( 'Maria Albertina' , '19371554951' , 20000 ) a1 . saque ( 4000 ) print a1 . _saldo ## funciona, mas quebra a conven\u00e7\u00e3o! print a1 . ver_saldo () ## forma correta de ver o saldo a1 . _no = '19371554955' ## isso \u00e9 \"crime\"! Um outro exemplo: contatos Contatos cont\u00e9m uma lista de dados de pessoas; Dados de uma pessoa: nome, celular, telefone comercial, telefone residencial, email; Vamos criar uma classe para os dados sobre uma pessoa: M\u00e9todos: Construtor para inicializar nome e outros dados; Adicionar novo n\u00famero de celular; Adicionar novo n\u00famero comercial; Adicionar novo n\u00famero residencial; Adicionar novo email; Escrever uma sa\u00edda sobre os dados pessoais. C\u00f3digo b\u00e1sico: class Pessoa : def __init__ ( self , nome , num_celular = None , num_comercial = None , num_residencial = None , email = None ): self . nome = nome self . celular = num_celular self . comercial = num_comercial self . residencial = num_residencial self . email = email def ad_num_celular ( self , numero ): self . celular = numero def ad_num_comercial ( self , numero ): self . comercial = numero def ad_num_residencial ( self , numero ): self . residencial = numero def ad_email ( self , endereco ): self . email = endereco Adicionando ao c\u00f3digo um m\u00e9todo de sa\u00edda para mostrar os dados de uma pessoa: class Pessoa : ... def saida ( self ): s = self . nome + ' \\n ' if self . celular is not None : s += 'Telefone celular: %s \\n ' % self . celular if self . comercial is not None : s += 'Telefone Comercial: %s \\n ' % self . comercial if self . residencial is not None : s += 'Telefone Redidencial: %s \\n ' % self . residencial if self . email is not None : s += 'Endere\u00e7o de e-mail: %s \\n ' % self . email print s Uso: p1 = Pessoa ( 'Hans Petter Langtangen' , email = 'hpl@simula.no' ) p1 . ad_num_comercial ( '67828283' ), p2 = Pessoa ( 'Marco Andr\u00e9 Argenta' , num_comercial = '33616447' ) p2 . ad_email ( 'marco.argenta@ufpr.br' ) contatos = [ p1 , p2 ] ## lista contatos = { 'Langtangen' : p1 , 'Argenta' : p2 } ## bem melhor! for p in contatos : contatos [ p ] . saida () Mais um exemplo: uma classe para um c\u00edrculo Um c\u00edrculo \u00e9 definido pelo seu ponto central $x_0$, $y_0$ e seu raio $R$; Esses dados podem ser atributos em uma classe; Poss\u00edveis m\u00e9todos na classe: area , circunferencia ; O construtor inicializa $x_0$, $y_0$ e $R$. class Circulo : def __init__ ( self , x0 , y0 , R ): self . x0 , self . y0 , self . R = x0 , y0 , R def area ( self ): return pi * self . R ** 2 def circunferencia ( self ): return 2 * pi * self . R Uso: >>> c = Circulo ( 2 , - 1 , 5 ) >>> print 'Um c\u00edrculo com raio %g e centro em ( %g , %g ) tem \u00e1rea %g ' % \\ ... ( c . R , c . x0 , c . y0 , c . area ()) Um c\u00edrculo com raio 5 e centro em ( 2 , - 1 ) tem \u00e1rea 78.5398 Para melhorar o c\u00f3digo, podemos adicionar uma fun\u00e7\u00e3o teste para a classe circulo : def test_Circulo (): R = 2.5 c = Circulo ( 7.4 , - 8.1 , R ) area_esperada = math . pi * R ** 2 area_calculada = c . area () dif = abs ( area_esperada - area_calculada ) tol = 1E-14 assert dif < tol , 'Problema no m\u00e9todo Circulo.area, dif= %s ' % dif circunferencia_esperada = 2 * math . pi * R circunferencia_calculada = c . circunferencia () dif = abs ( circunferencia_esperada - circunferencia_calculada ) assert dif < tol , 'Problema no m\u00e9todo Circulo.circunferencia, dif= %s ' % dif Aviso N\u00e3o esque\u00e7a do import math no in\u00edcio do c\u00f3digo!","title":"Exemplos"},{"location":"classes/exemplosclasses/#um-outro-exemplo-de-classe-conta-no-banco","text":"Atributos: nome, n\u00famero da conta, saldo; M\u00e9todos: dep\u00f3sito, saque, sa\u00edda formatada. class ContaBanco : def __init__ ( self , nome , numero_conta , deposito_inicial ): self . nome = nome self . no = numero_conta self . saldo = deposito_inicial def deposito ( self , movimentacao ): self . saldo += movimentacao def saque ( self , movimentacao ): self . saldo -= movimentacao def info ( self ): s = ' %s , %s , saldo: %s ' % \\ ( self . nome , self . no , self . saldo ) print s Exemplo de uso: >>> a1 = ContaBanco ( 'Joaquim Porto' , '19371554951' , 20000 ) >>> a2 = ContaBanco ( 'Manuel Carvalho' , '19371564761' , 20000 ) >>> a1 . deposito ( 1000 ) >>> a1 . saque ( 4000 ) >>> a2 . saque ( 10500 ) >>> a1 . saque ( 3500 ) >>> print \"a1's saldo:\" , a1 . saldo a1 's saldo: 13500 >>> a1 . info () Joaquim Porto , 19371554951 , saldo : 13500 >>> a2 . info () Manuel Carvalho , 19371564761 , saldo : 9500","title":"Um outro exemplo de Classe: conta no banco"},{"location":"classes/exemplosclasses/#use-o-caractere-_-para-evitar-o-mau-uso","text":"Poss\u00edvel, mas n\u00e3o intencionado ao uso: >>> a1 . nome = 'Qualquer Outro Nome' >>> a1 . saldo = 100000 >>> a1 . no = '19371564768' As afirma\u00e7\u00f5es para o uso correto: Os atributos n\u00e3o devem ser modificados! O atributo saldo pode ser visualizado. Modifica\u00e7\u00e3o do saldo \u00e9 feita atrav\u00e9s de saque ou deposito . Rem\u00e9dio: Atributos ou m\u00e9todos n\u00e3o intencionados ao uso fora da classe podem ser marcados como protegidos atrav\u00e9s do prefixo _ antes de seu nome (ex.: _nome ). Isso \u00e9 apenas uma conven\u00e7\u00e3o, n\u00e3o existe forma t\u00e9cnica de evitar que atributos e m\u00e9todos seja acessados. class ContaBancoM : def __init__ ( self , nome , numero_conta , deposito_inicial ): self . _nome = nome self . _no = numero_conta self . _saldo = deposito_inicial def deposito ( self , movimentacao ): self . _saldo += movimentacao def saque ( self , movimentacao ): self . _saldo -= movimentacao def ver_saldo ( self ): ## NOVO - ver o valor do saldo return self . _saldo def info ( self ): s = ' %s , %s , saldo: %s ' % \\ ( self . _nome , self . _no , self . _saldo ) print s Uso: a1 = ContaBancoM ( 'Maria Albertina' , '19371554951' , 20000 ) a1 . saque ( 4000 ) print a1 . _saldo ## funciona, mas quebra a conven\u00e7\u00e3o! print a1 . ver_saldo () ## forma correta de ver o saldo a1 . _no = '19371554955' ## isso \u00e9 \"crime\"!","title":"Use o caractere _ para evitar o mau uso"},{"location":"classes/exemplosclasses/#um-outro-exemplo-contatos","text":"Contatos cont\u00e9m uma lista de dados de pessoas; Dados de uma pessoa: nome, celular, telefone comercial, telefone residencial, email; Vamos criar uma classe para os dados sobre uma pessoa: M\u00e9todos: Construtor para inicializar nome e outros dados; Adicionar novo n\u00famero de celular; Adicionar novo n\u00famero comercial; Adicionar novo n\u00famero residencial; Adicionar novo email; Escrever uma sa\u00edda sobre os dados pessoais. C\u00f3digo b\u00e1sico: class Pessoa : def __init__ ( self , nome , num_celular = None , num_comercial = None , num_residencial = None , email = None ): self . nome = nome self . celular = num_celular self . comercial = num_comercial self . residencial = num_residencial self . email = email def ad_num_celular ( self , numero ): self . celular = numero def ad_num_comercial ( self , numero ): self . comercial = numero def ad_num_residencial ( self , numero ): self . residencial = numero def ad_email ( self , endereco ): self . email = endereco Adicionando ao c\u00f3digo um m\u00e9todo de sa\u00edda para mostrar os dados de uma pessoa: class Pessoa : ... def saida ( self ): s = self . nome + ' \\n ' if self . celular is not None : s += 'Telefone celular: %s \\n ' % self . celular if self . comercial is not None : s += 'Telefone Comercial: %s \\n ' % self . comercial if self . residencial is not None : s += 'Telefone Redidencial: %s \\n ' % self . residencial if self . email is not None : s += 'Endere\u00e7o de e-mail: %s \\n ' % self . email print s Uso: p1 = Pessoa ( 'Hans Petter Langtangen' , email = 'hpl@simula.no' ) p1 . ad_num_comercial ( '67828283' ), p2 = Pessoa ( 'Marco Andr\u00e9 Argenta' , num_comercial = '33616447' ) p2 . ad_email ( 'marco.argenta@ufpr.br' ) contatos = [ p1 , p2 ] ## lista contatos = { 'Langtangen' : p1 , 'Argenta' : p2 } ## bem melhor! for p in contatos : contatos [ p ] . saida ()","title":"Um outro exemplo: contatos"},{"location":"classes/exemplosclasses/#mais-um-exemplo-uma-classe-para-um-circulo","text":"Um c\u00edrculo \u00e9 definido pelo seu ponto central $x_0$, $y_0$ e seu raio $R$; Esses dados podem ser atributos em uma classe; Poss\u00edveis m\u00e9todos na classe: area , circunferencia ; O construtor inicializa $x_0$, $y_0$ e $R$. class Circulo : def __init__ ( self , x0 , y0 , R ): self . x0 , self . y0 , self . R = x0 , y0 , R def area ( self ): return pi * self . R ** 2 def circunferencia ( self ): return 2 * pi * self . R Uso: >>> c = Circulo ( 2 , - 1 , 5 ) >>> print 'Um c\u00edrculo com raio %g e centro em ( %g , %g ) tem \u00e1rea %g ' % \\ ... ( c . R , c . x0 , c . y0 , c . area ()) Um c\u00edrculo com raio 5 e centro em ( 2 , - 1 ) tem \u00e1rea 78.5398 Para melhorar o c\u00f3digo, podemos adicionar uma fun\u00e7\u00e3o teste para a classe circulo : def test_Circulo (): R = 2.5 c = Circulo ( 7.4 , - 8.1 , R ) area_esperada = math . pi * R ** 2 area_calculada = c . area () dif = abs ( area_esperada - area_calculada ) tol = 1E-14 assert dif < tol , 'Problema no m\u00e9todo Circulo.area, dif= %s ' % dif circunferencia_esperada = 2 * math . pi * R circunferencia_calculada = c . circunferencia () dif = abs ( circunferencia_esperada - circunferencia_calculada ) assert dif < tol , 'Problema no m\u00e9todo Circulo.circunferencia, dif= %s ' % dif Aviso N\u00e3o esque\u00e7a do import math no in\u00edcio do c\u00f3digo!","title":"Mais um exemplo: uma classe para um c\u00edrculo"},{"location":"classes/metodosespeciais/","text":"M\u00e9todos especiais class MinhaClasse : def __init__ ( self , a , b ): ... p1 = MinhaClasse ( 2 , 5 ) p2 = MinhaClasse ( - 1 , 10 ) p3 = p1 + p2 p4 = p1 - p2 p5 = p1 * p2 p6 = p1 ** 7 + 4 * p3 M\u00e9todos especiais permitem sintaxes diretas e s\u00e3o reconhecidos pelos duplos _ antes e depois do nome do m\u00e9todo: def __init__ ( self , ... ) def __call__ ( self , ... ) def __add__ ( self , outro ) ## sintaxe Python y = Y ( 4 ) print y ( 2 ) z = Y ( 6 ) print y + z ## O que realmente est\u00e1 acontecendo Y . __init__ ( y , 4 ) print Y . __call__ ( y , 2 ) Y . __init__ ( z , 6 ) print Y . __add__ ( y , z ) Vamos aprender mais sobre eles! Chamando um m\u00e9todo especial Substitua o m\u00e9todo valor pelo m\u00e9todo especial __call__ : class Y : def __init__ ( self , v0 ): self . v0 = v0 self . g = 9.81 def __call__ ( self , t ): return self . v0 * t - 0.5 * self . g * t ** 2 Agora podemos escrever: y = Y ( 3 ) v = y ( 0.1 ) ## o mesmo que v = y.__call__(0.1) ou Y.__call__(y, 0.1) Nota: A inst\u00e2ncia y se comporta e parece como uma fun\u00e7\u00e3o; O m\u00e9todo valor(t) faz a mesma coisa, mas __call__ permite uma sintaxe mais simples e limpa para calcular o valor da fun\u00e7\u00e3o. Um m\u00e9todo especial para a sa\u00edda Em Python, normalmente obtemos uma sa\u00edda em formato de texto usando o objeto print , que funciona para tipos de objetos j\u00e1 embutidos (strings, listas, floats...); Python n\u00e3o sabe como imprimir objetos de uma classe definida pelo usu\u00e1rio, mas se a classe definir um m\u00e9todo __str__ , o Python vai utilizar esse m\u00e9todo para converter um objeto em cadeia de caracteres. Exemplo: class Y : ... def __call__ ( self , t ): return self . v0 * t - 0.5 * self . g * t ** 2 def __str__ ( self ): return 'v0*t - 0.5*g*t**2; v0= %g ' % self . v0 Uso: >>> y = Y ( 1.5 ) >>> y ( 0.2 ) 0.1038 >>> print y v0 * t - 0.5 * g * t ** 2 ; v0 = 1.5 Defini\u00e7\u00e3o dos m\u00e9todos especiais Est\u00e9 a cargo do programador definir a a\u00e7\u00e3o dos m\u00e9todos especiais. Como deveria __add__(self, outro) ser definido? Isso depende completamente do programador, dependendo do significado de objeto1 + objeto2 . Um antropoligista estava perguntando a um homem das cavernas primitivo sobre aritm\u00e9tica. Quando o antropologista perguntava, O que dois e dois fazem? o homem das cavernas respondia, cinco. Perguntado para explicar, o homem das cavernas disse, se eu tenho uma corda com dois n\u00f3s, e outra corda com dois n\u00f3s, e eu unir as duas cordas para fazer uma, ent\u00e3o eu tenho cinco n\u00f3s. M\u00e9todos especiais para opera\u00e7\u00f5es aritm\u00e9ticas c = a + b ## c = a.__add__(b) c = a - b ## c = a.__sub__(b) c = a * b ## c = a.__mul__(b) c = a / b ## c = a.__div__(b) c = a ** e ## c = a.__pow__(e) M\u00e9todos especiais para compara\u00e7\u00e3o a == b ## a.__eq__(b) a != b ## a.__ne__(b) a < b ## a.__lt__(b) a <= b ## a.__le__(b) a > b ## a.__gt__(b) a >= b ## a.__ge__(b) O m\u00e9todo especial __repr__ O m\u00e9todo especial __repr__ cria p de eval(repr(p)) class MinhaClasse : def __init__ ( self , a , b ): self . a , self . b = a , b def __str__ ( self ): \"\"\"Retorna uma cadeia de caracteres formatada com a sa\u00edda\"\"\" return 'a= %s , b= %s ' % ( self . a , self . b ) def __repr__ ( self ): \"\"\"Retorna uma cadeia de caracteres tal que eval(s) cria self.\"\"\" return 'MinhaClasse( %s , %s )' % ( self . a , self . b ) Uso >>> m = MinhaClasse ( 1 , 5 ) >>> print m ## chama m.__str__() a = 1 , b = 5 >>> str ( m ) ## chama m.__str__() 'a=1, b=5' >>> s = repr ( m ) ## chama m.__repr__() >>> s 'MinhaClasse(1, 5)' >>> m2 = eval ( s ) ## o mesmo que m2 = MinhaClasse(1, 5) >>> m2 ## chama m.__repr__() 'MinhaClasse(1, 5)' Classe Y reescrita com o m\u00e9todo repr class Y : \"\"\"Classe para a fun\u00e7\u00e3o y(t; v0, g) = v0*t - 0.5*g*t**2.\"\"\" def __init__ ( self , v0 ): \"\"\"Armazenando par\u00e2metros.\"\"\" self . v0 = v0 self . g = 9.81 def __call__ ( self , t ): \"\"\"Avaliando a fun\u00e7\u00e3o.\"\"\" return self . v0 * t - 0.5 * self . g * t ** 2 def __str__ ( self ): \"\"\"Sa\u00edda formatada.\"\"\" return 'v0*t - 0.5*g*t**2; v0= %g ' % self . v0 def __repr__ ( self ): \"\"\"Mostre o c\u00f3digo para gerar essa inst\u00e2ncia.\"\"\" return 'Y( %s )' % self . v0 Classe para n\u00fameros complexos O Python j\u00e1 possui a classe complex para n\u00fameros complexos, mas implementar tal classe \u00e9 um bom exemplo pedag\u00f3gico especialmente com m\u00e9todos especiais. Uso esperado: >>> u = Complexo ( 2 , - 1 ) >>> v = Complexo ( 1 ) ## parte imagin\u00e1ria zero >>> w = u + v >>> print w ( 3 , - 1 ) >>> w != u True >>> u * v Complexo ( 2 , - 1 ) >>> u < v illegal operation \"<\" for complex numbers >>> print w + 4 ( 7 , - 1 ) >>> print 4 - w ( 1 , 1 ) Implementa\u00e7\u00e3o class Complexo : def __init__ ( self , real , imag = 0.0 ): self . real = real self . imag = imag def __add__ ( self , outro ): return Complexo ( self . real + outro . real , self . imag + outro . imag ) def __sub__ ( self , outro ): return Complexo ( self . real - outro . real , self . imag - outro . imag ) def __mul__ ( self , outro ): return Complexo ( self . real * outro . real - self . imag * outro . imag , self . imag * outro . real + self . real * outro . imag ) def __div__ ( self , outro ): ar , ai , br , bi = self . real , self . imag , \\ outro . real , outro . imag ## forma curta r = float ( br ** 2 + bi ** 2 ) return Complexo (( ar * br + ai * bi ) / r , ( ai * br - ar * bi ) / r ) M\u00e9todos adicionais def __abs__ ( self ): return sqrt ( self . real ** 2 + self . imag ** 2 ) def __neg__ ( self ): ## defines -c (c is Complexo) return Complexo ( - self . real , - self . imag ) def __eq__ ( self , outro ): return self . real == outro . real and \\ self . imag == outro . imag def __ne__ ( self , outro ): return not self . __eq__ ( outro ) def __str__ ( self ): return '( %g , %g )' % ( self . real , self . imag ) def __repr__ ( self ): return 'Complexo' + str ( self ) def __pow__ ( self , potencia ): raise NotImplementedError ( 'self**potencia ainda n\u00e3o implementado para Complexo' ) Refinando os m\u00e9todos especiais para aritm\u00e9tica Podemos adicionar um n\u00famero real a um n\u00famero complexo? >>> u = Complexo ( 1 , 2 ) >>> w = u + 4.5 ... AttributeError : 'float' object has no attribute 'real' Problema: vamos assumir que o outro \u00e9 Complexo . Solu\u00e7\u00e3o: class Complexo : ... def __add__ ( self , outro ): if isinstance ( outro , ( float , int )): outro = Complexo ( outro ) return Complexo ( self . real + outro . real , self . imag + outro . imag ) ## ou def __add__ ( self , outro ): if isinstance ( outro , ( float , int )): return Complexo ( self . real + outro , self . imag ) else : return Complexo ( self . real + outro . real , self . imag + outro . imag ) M\u00e9todos especiais para adi\u00e7\u00e3o E se tentarmos: >>> u = Complexo ( 1 , 2 ) >>> w = 4.5 + u ... TypeError : unsupported operand type ( s ) for + : 'float' and 'instance' Problema: o objeto float do Python n\u00e3o pode ser adicionado a um objeto Complexo . Solu\u00e7\u00e3o: se a classe tem o m\u00e9todo especial __radd__(self, other) , Python o aplica para outro + self . class Complexo : ... def __radd__ ( self , other ): \"\"\"Retorna outro + self.\"\"\" ## outro + self = self + outro: return self . __add__ ( outro ) M\u00e9todos especiais para subtra\u00e7\u00e3o Operadores para subtra\u00e7\u00e3o s\u00e3o um pouco mais complicados pois a-b \\neq b-a class Complexo : ... def __sub__ ( self , outro ): if isinstance ( outro , ( float , int )): outro = Complexo ( outro ) return Complexo ( self . real - outro . real , self . imag - outro . imag ) def __rsub__ ( self , outro ): if isinstance ( outro , ( float , int )): outro = Complexo ( outro ) return outro . __sub__ ( self )","title":"M\u00e9todos especiais"},{"location":"classes/metodosespeciais/#metodos-especiais","text":"class MinhaClasse : def __init__ ( self , a , b ): ... p1 = MinhaClasse ( 2 , 5 ) p2 = MinhaClasse ( - 1 , 10 ) p3 = p1 + p2 p4 = p1 - p2 p5 = p1 * p2 p6 = p1 ** 7 + 4 * p3 M\u00e9todos especiais permitem sintaxes diretas e s\u00e3o reconhecidos pelos duplos _ antes e depois do nome do m\u00e9todo: def __init__ ( self , ... ) def __call__ ( self , ... ) def __add__ ( self , outro ) ## sintaxe Python y = Y ( 4 ) print y ( 2 ) z = Y ( 6 ) print y + z ## O que realmente est\u00e1 acontecendo Y . __init__ ( y , 4 ) print Y . __call__ ( y , 2 ) Y . __init__ ( z , 6 ) print Y . __add__ ( y , z ) Vamos aprender mais sobre eles!","title":"M\u00e9todos especiais"},{"location":"classes/metodosespeciais/#chamando-um-metodo-especial","text":"Substitua o m\u00e9todo valor pelo m\u00e9todo especial __call__ : class Y : def __init__ ( self , v0 ): self . v0 = v0 self . g = 9.81 def __call__ ( self , t ): return self . v0 * t - 0.5 * self . g * t ** 2 Agora podemos escrever: y = Y ( 3 ) v = y ( 0.1 ) ## o mesmo que v = y.__call__(0.1) ou Y.__call__(y, 0.1) Nota: A inst\u00e2ncia y se comporta e parece como uma fun\u00e7\u00e3o; O m\u00e9todo valor(t) faz a mesma coisa, mas __call__ permite uma sintaxe mais simples e limpa para calcular o valor da fun\u00e7\u00e3o.","title":"Chamando um m\u00e9todo especial"},{"location":"classes/metodosespeciais/#um-metodo-especial-para-a-saida","text":"Em Python, normalmente obtemos uma sa\u00edda em formato de texto usando o objeto print , que funciona para tipos de objetos j\u00e1 embutidos (strings, listas, floats...); Python n\u00e3o sabe como imprimir objetos de uma classe definida pelo usu\u00e1rio, mas se a classe definir um m\u00e9todo __str__ , o Python vai utilizar esse m\u00e9todo para converter um objeto em cadeia de caracteres. Exemplo: class Y : ... def __call__ ( self , t ): return self . v0 * t - 0.5 * self . g * t ** 2 def __str__ ( self ): return 'v0*t - 0.5*g*t**2; v0= %g ' % self . v0 Uso: >>> y = Y ( 1.5 ) >>> y ( 0.2 ) 0.1038 >>> print y v0 * t - 0.5 * g * t ** 2 ; v0 = 1.5","title":"Um m\u00e9todo especial para a sa\u00edda"},{"location":"classes/metodosespeciais/#definicao-dos-metodos-especiais","text":"Est\u00e9 a cargo do programador definir a a\u00e7\u00e3o dos m\u00e9todos especiais. Como deveria __add__(self, outro) ser definido? Isso depende completamente do programador, dependendo do significado de objeto1 + objeto2 . Um antropoligista estava perguntando a um homem das cavernas primitivo sobre aritm\u00e9tica. Quando o antropologista perguntava, O que dois e dois fazem? o homem das cavernas respondia, cinco. Perguntado para explicar, o homem das cavernas disse, se eu tenho uma corda com dois n\u00f3s, e outra corda com dois n\u00f3s, e eu unir as duas cordas para fazer uma, ent\u00e3o eu tenho cinco n\u00f3s.","title":"Defini\u00e7\u00e3o dos m\u00e9todos especiais"},{"location":"classes/metodosespeciais/#metodos-especiais-para-operacoes-aritmeticas","text":"c = a + b ## c = a.__add__(b) c = a - b ## c = a.__sub__(b) c = a * b ## c = a.__mul__(b) c = a / b ## c = a.__div__(b) c = a ** e ## c = a.__pow__(e)","title":"M\u00e9todos especiais para opera\u00e7\u00f5es aritm\u00e9ticas"},{"location":"classes/metodosespeciais/#metodos-especiais-para-comparacao","text":"a == b ## a.__eq__(b) a != b ## a.__ne__(b) a < b ## a.__lt__(b) a <= b ## a.__le__(b) a > b ## a.__gt__(b) a >= b ## a.__ge__(b)","title":"M\u00e9todos especiais para compara\u00e7\u00e3o"},{"location":"classes/metodosespeciais/#o-metodo-especial-__repr__","text":"O m\u00e9todo especial __repr__ cria p de eval(repr(p)) class MinhaClasse : def __init__ ( self , a , b ): self . a , self . b = a , b def __str__ ( self ): \"\"\"Retorna uma cadeia de caracteres formatada com a sa\u00edda\"\"\" return 'a= %s , b= %s ' % ( self . a , self . b ) def __repr__ ( self ): \"\"\"Retorna uma cadeia de caracteres tal que eval(s) cria self.\"\"\" return 'MinhaClasse( %s , %s )' % ( self . a , self . b ) Uso >>> m = MinhaClasse ( 1 , 5 ) >>> print m ## chama m.__str__() a = 1 , b = 5 >>> str ( m ) ## chama m.__str__() 'a=1, b=5' >>> s = repr ( m ) ## chama m.__repr__() >>> s 'MinhaClasse(1, 5)' >>> m2 = eval ( s ) ## o mesmo que m2 = MinhaClasse(1, 5) >>> m2 ## chama m.__repr__() 'MinhaClasse(1, 5)'","title":"O m\u00e9todo especial __repr__"},{"location":"classes/metodosespeciais/#classe-y-reescrita-com-o-metodo-repr","text":"class Y : \"\"\"Classe para a fun\u00e7\u00e3o y(t; v0, g) = v0*t - 0.5*g*t**2.\"\"\" def __init__ ( self , v0 ): \"\"\"Armazenando par\u00e2metros.\"\"\" self . v0 = v0 self . g = 9.81 def __call__ ( self , t ): \"\"\"Avaliando a fun\u00e7\u00e3o.\"\"\" return self . v0 * t - 0.5 * self . g * t ** 2 def __str__ ( self ): \"\"\"Sa\u00edda formatada.\"\"\" return 'v0*t - 0.5*g*t**2; v0= %g ' % self . v0 def __repr__ ( self ): \"\"\"Mostre o c\u00f3digo para gerar essa inst\u00e2ncia.\"\"\" return 'Y( %s )' % self . v0","title":"Classe Y reescrita com o m\u00e9todo repr"},{"location":"classes/metodosespeciais/#classe-para-numeros-complexos","text":"O Python j\u00e1 possui a classe complex para n\u00fameros complexos, mas implementar tal classe \u00e9 um bom exemplo pedag\u00f3gico especialmente com m\u00e9todos especiais. Uso esperado: >>> u = Complexo ( 2 , - 1 ) >>> v = Complexo ( 1 ) ## parte imagin\u00e1ria zero >>> w = u + v >>> print w ( 3 , - 1 ) >>> w != u True >>> u * v Complexo ( 2 , - 1 ) >>> u < v illegal operation \"<\" for complex numbers >>> print w + 4 ( 7 , - 1 ) >>> print 4 - w ( 1 , 1 )","title":"Classe para n\u00fameros complexos"},{"location":"classes/metodosespeciais/#implementacao","text":"class Complexo : def __init__ ( self , real , imag = 0.0 ): self . real = real self . imag = imag def __add__ ( self , outro ): return Complexo ( self . real + outro . real , self . imag + outro . imag ) def __sub__ ( self , outro ): return Complexo ( self . real - outro . real , self . imag - outro . imag ) def __mul__ ( self , outro ): return Complexo ( self . real * outro . real - self . imag * outro . imag , self . imag * outro . real + self . real * outro . imag ) def __div__ ( self , outro ): ar , ai , br , bi = self . real , self . imag , \\ outro . real , outro . imag ## forma curta r = float ( br ** 2 + bi ** 2 ) return Complexo (( ar * br + ai * bi ) / r , ( ai * br - ar * bi ) / r )","title":"Implementa\u00e7\u00e3o"},{"location":"classes/metodosespeciais/#metodos-adicionais","text":"def __abs__ ( self ): return sqrt ( self . real ** 2 + self . imag ** 2 ) def __neg__ ( self ): ## defines -c (c is Complexo) return Complexo ( - self . real , - self . imag ) def __eq__ ( self , outro ): return self . real == outro . real and \\ self . imag == outro . imag def __ne__ ( self , outro ): return not self . __eq__ ( outro ) def __str__ ( self ): return '( %g , %g )' % ( self . real , self . imag ) def __repr__ ( self ): return 'Complexo' + str ( self ) def __pow__ ( self , potencia ): raise NotImplementedError ( 'self**potencia ainda n\u00e3o implementado para Complexo' )","title":"M\u00e9todos adicionais"},{"location":"classes/metodosespeciais/#refinando-os-metodos-especiais-para-aritmetica","text":"Podemos adicionar um n\u00famero real a um n\u00famero complexo? >>> u = Complexo ( 1 , 2 ) >>> w = u + 4.5 ... AttributeError : 'float' object has no attribute 'real' Problema: vamos assumir que o outro \u00e9 Complexo . Solu\u00e7\u00e3o: class Complexo : ... def __add__ ( self , outro ): if isinstance ( outro , ( float , int )): outro = Complexo ( outro ) return Complexo ( self . real + outro . real , self . imag + outro . imag ) ## ou def __add__ ( self , outro ): if isinstance ( outro , ( float , int )): return Complexo ( self . real + outro , self . imag ) else : return Complexo ( self . real + outro . real , self . imag + outro . imag )","title":"Refinando os m\u00e9todos especiais para aritm\u00e9tica"},{"location":"classes/metodosespeciais/#metodos-especiais-para-adicao","text":"E se tentarmos: >>> u = Complexo ( 1 , 2 ) >>> w = 4.5 + u ... TypeError : unsupported operand type ( s ) for + : 'float' and 'instance' Problema: o objeto float do Python n\u00e3o pode ser adicionado a um objeto Complexo . Solu\u00e7\u00e3o: se a classe tem o m\u00e9todo especial __radd__(self, other) , Python o aplica para outro + self . class Complexo : ... def __radd__ ( self , other ): \"\"\"Retorna outro + self.\"\"\" ## outro + self = self + outro: return self . __add__ ( outro )","title":"M\u00e9todos especiais para adi\u00e7\u00e3o"},{"location":"classes/metodosespeciais/#metodos-especiais-para-subtracao","text":"Operadores para subtra\u00e7\u00e3o s\u00e3o um pouco mais complicados pois a-b \\neq b-a class Complexo : ... def __sub__ ( self , outro ): if isinstance ( outro , ( float , int )): outro = Complexo ( outro ) return Complexo ( self . real - outro . real , self . imag - outro . imag ) def __rsub__ ( self , outro ): if isinstance ( outro , ( float , int )): outro = Complexo ( outro ) return outro . __sub__ ( self )","title":"M\u00e9todos especiais para subtra\u00e7\u00e3o"},{"location":"dicionariosstrings/cadeiacaracteres/","text":"Manipula\u00e7\u00e3o de cadeia de caracteres >>> s = 'Isso \u00e9 uma cadeia de caracteres' >>> s . split () [ 'Isso' , ' \\xc3\\xa9 ' , 'uma' , 'cadeia' , 'de' , 'caracteres' ] >>> 'Isso' in s True >>> s . find ( 'de' ) 14 >>> ', ' . join ( s . split ()) 'Isso, \\xc3\\xa9 , uma, cadeia, de, caracteres' A manipula\u00e7\u00e3o das cadeias de caracteres \u00e9 a chave para a interpreta\u00e7\u00e3o do conte\u00fado de arquivos. Texto em Python \u00e9 representado pelas cadeias de caracteres; Inspecionar e manipular essas cadeias \u00e9 o caminho para entender o conte\u00fado de arquivos; Plano: primeiro opera\u00e7\u00f5es b\u00e1sicas, depois exemplos reais. Um exemplo para ilustra\u00e7\u00e3o: >>> s = u 'Berlim: 18.4 C \\u2070 \u00e0s 16h' Veja mais Veja mais c\u00f3digos unicode para caracteres aqui As cadeias de caracteres se comportam como tuplas (listas imut\u00e1veis): >>> s [ 0 ] 'B' >>> s [ 1 ] 'e' >>> s [ - 1 ] 'h' Extraindo partes de cadeia de caracteres Partes de cadeias de caracteres podem ser obtidas da mesma forma que os cortes em listas: >>> s 'Berlim: 18.4 C \u00e0s 16h' >>> s [ 8 :] ## do indice 8 ao final da cadeia de caracteres '18.4 C \u00e0s 16h' >>> s [ 8 : 12 ] ## indice 8, 9, 10 e 11 (n\u00e3o 12!) '18.4' >>> s [ 8 : - 1 ] '18.4 C \u00e0s 16' >>> s [ 8 : - 8 ] '18.4 C' Achando o \u00ednicio de um texto na cadeia de caracteres: >>> s . find ( 'Berlim' ) ## onde 'Berlim' inicia? 0 ## no indice 0 >>> s . find ( 'h' ) 21 >>> s . find ( 'Oslo' ) ## n\u00e3o encontrado - 1 Checando se um texto est\u00e1 contido em uma cadeia de caracteres >>> 'Berlim' in s : True >>> 'Oslo' in s : False >>> if 'C' in s : ... print 'C achado' ... else : ... print 'nenhum C' ... C achado Substituindo um texto por outro Sintaxe: s.replace(s1, s2): substitui s1 por s2 >>> s . replace ( ' ' , '__' ) 'Berlim:__18.4__C__\u00e0s__4h' >>> s . replace ( 'Berlim' , 'Curitiba' ) 'Curitiba: 18.4 C \u00e0s 4h' Exemplo: substituindo o texto antes dos dois pontos >>> s 'Berlim: 18.4 C \u00e0s 4h' >>> s . replace ( s [: s . find ( ':' )], 'Curitiba' ) 'Curitiba: 18.4 C \u00e0s 4h' s.find(':') retorna 6; s[:6] \u00e9 Berlim; Berlim \u00e9 substituido por Curitiba. Dividindo uma cadeia de caracteres em uma lista de subtextos s.split(arg) divide em uma lista de subtextos separados pelo argumento arg. Exemplo: >>> s 'Berlim: 18.4 C \u00e0s 16h' >>> s . split ( ':' ) [ 'Berlim' , ' 18.4 C \\xc3\\xa0 s 16h' ] >>> s . split () [ 'Berlim:' , '18.4' , 'C' , ' \\xc3\\xa0 s' , '16h' ] Tente endenter esse: >>> s . split ( ':' )[ 1 ] . split ()[ 0 ] '18.4' >>> deg = float ( _ ) ## _ representa o \u00faltimo resultado no console >>> deg 18.4 Dividindo uma cadeia de caracteres em linhas Normalmente, os arquivos de dados cont\u00e9m muito texto e queremos separ\u00e1-lo em linhas. Linhas podem ser separadas por diferentes caracteres de controle em diferentes plataformas: \\n no Unix/Linux/Mac \\r\\n no windows >>> t = '1a linha \\n 2a linha \\n 3a linha' ## linha Unix >>> print t 1 a linha 2 a linha 3 a linha >>> t . split ( ' \\n ' ) [ '1a linha' , '2a linha' , '3a linha' ] >>> t . splitlines () [ '1a linha' , '2a linha' , '3a linha' ] >>> t = '1a linha \\r\\n 2a linha \\r\\n 3a linha' ## Windows >>> t . split ( ' \\n ' ) [ '1a linha \\r ' , '2a linha \\r ' , '3a linha' ] ## n\u00e3o \u00e9 o resultado esperado! >>> t . splitlines () ## qualquer plataforma! [ '1a linha' , '2a linha' , '3a linha' ] Cadeias de caracteres s\u00e3o objetos imut\u00e1veis N\u00e3o \u00e9 poss\u00edvel modificar uma cadeia de caracteres (da mesma forma que as listas). Todas as modifica\u00e7\u00f5es resultam em uma nova cadeia de caracteres. >>> s [ 18 ] = 5 ... TypeError : 'str' object does not support item assignment >>> ## criando uma nova cadeia de caracteres e adicionando partes de s: >>> s2 = s [: 19 ] + '5' + s [ 21 :] >>> s2 'Berlim: 18.4 C \u00e0s 5h' Removendo espa\u00e7os em branco >>> s = ' texto com espa\u00e7os em branco antes e depois \\n ' >>> s . strip () 'texto com espa\u00e7os em branco antes e depois' >>> s . lstrip () ## removendo da esquerda 'texto com espa\u00e7os em branco antes e depois \\n ' >>> s . rstrip () ## removendo da direita ' texto com espa\u00e7os em branco antes e depois' Algumas fun\u00e7\u00f5es convenientes para cadeias de caracteres >>> '214' . isdigit () True >>> ' 214 ' . isdigit () False >>> '2.14' . isdigit () False >>> s . lower () 'berlim: 18.4 c \u00e0s 4h' >>> s . upper () 'BERLIM: 18.4 C \u00c0S 4H' >>> s . startswith ( 'Berlim' ) True >>> s . endswith ( 'min' ) False >>> ' ' . isspace () ## espa\u00e7os em branco True >>> ' \\n ' . isspace () ## nova linha True >>> ' \\t ' . isspace () ## TAB True >>> '' . isspace () ## cadeia de caracteres vazia False Unindo cadeias de caracteres Podemos unir uma lista de cadeias de caracteres para uma \u00fanica cadeia: >>> strings = [ 'Newton' , 'Secante' , 'Bisec\u00e7\u00e3o' ] >>> ', ' . join ( strings ) 'Newton, Secante, Bisec\u00e7\u00e3o' As opera\u00e7\u00f5es inversas seriam: t = delimitador . join ( listaCadeias ) listaCadeias = t . split ( delimitador ) Eliminando as duas primeiras palavras em uma linha: >>> linha = 'Esta \u00e9 uma linha com palavras separadas por espa\u00e7os' >>> palavras = linha . split () >>> linha2 = ' ' . join ( palavras [ 2 :]) >>> print linha2 'uma linha com palavras separadas por espa\u00e7os' Lendo pares de n\u00fameros (x,y) de um arquivo Arquivo de exemplo: (1.3,0) (-1,2) (3,-1.5) (0,1) (1,0) (1,1) (0,-0.01) (10.5,-1) (2.5,-2.5) Algoritmo: Leia linha por linha; Divida cada linha em palavras; Em cada palavra, remova o par\u00eanteses e divida o resto na v\u00edrgula. O c\u00f3digo: linhas = open ( 'ler_pares.dat' , 'r' ) . readlines () pares = [] ## lista de (n1, n2) pares de n\u00fameros for linha in linhas : palavras = linha . split () for palavra in palavras : palavra = palavra [ 1 : - 1 ] ## removendo o par\u00eanteses n1 , n2 = palavra . split ( ',' ) n1 = float ( n1 ); n2 = float ( n2 ) par = ( n1 , n2 ) pares . append ( par ) Lista resultante em Python: \\[(1.3, 0.0), (-1.0, 2.0), (3.0, -1.5), (0.0, 1.0), (1.0, 0.0), (1.0, 1.0), (0.0, -0.01), (10.5, -1.0), (2.5, -2.5)\\] Solu\u00e7\u00e3o alternativa: sintaxe Python no formato do arquivo Suponha que o formato do arquivo (1.3, 0) (-1, 2) (3, -1.5) ... Seja um pouco diferente: \\[(1.3, 0), (-1, 2), (3, -1.5), ... \\] Chamando a fun\u00e7\u00e3o eval no formato diferente, \u00e9 poss\u00edvel obter a lista final diretamente: linhas = open ( 'ler_pares.dat' , 'r' ) . readlines () texto = open ( 'ler_pares2.dat' , 'r' ) . read () texto = '[' + texto . replace ( ')' , '),' ) + ']' pares = eval ( texto )","title":"Cadeia de Caracteres"},{"location":"dicionariosstrings/cadeiacaracteres/#manipulacao-de-cadeia-de-caracteres","text":">>> s = 'Isso \u00e9 uma cadeia de caracteres' >>> s . split () [ 'Isso' , ' \\xc3\\xa9 ' , 'uma' , 'cadeia' , 'de' , 'caracteres' ] >>> 'Isso' in s True >>> s . find ( 'de' ) 14 >>> ', ' . join ( s . split ()) 'Isso, \\xc3\\xa9 , uma, cadeia, de, caracteres' A manipula\u00e7\u00e3o das cadeias de caracteres \u00e9 a chave para a interpreta\u00e7\u00e3o do conte\u00fado de arquivos. Texto em Python \u00e9 representado pelas cadeias de caracteres; Inspecionar e manipular essas cadeias \u00e9 o caminho para entender o conte\u00fado de arquivos; Plano: primeiro opera\u00e7\u00f5es b\u00e1sicas, depois exemplos reais. Um exemplo para ilustra\u00e7\u00e3o: >>> s = u 'Berlim: 18.4 C \\u2070 \u00e0s 16h' Veja mais Veja mais c\u00f3digos unicode para caracteres aqui As cadeias de caracteres se comportam como tuplas (listas imut\u00e1veis): >>> s [ 0 ] 'B' >>> s [ 1 ] 'e' >>> s [ - 1 ] 'h'","title":"Manipula\u00e7\u00e3o de cadeia de caracteres"},{"location":"dicionariosstrings/cadeiacaracteres/#extraindo-partes-de-cadeia-de-caracteres","text":"Partes de cadeias de caracteres podem ser obtidas da mesma forma que os cortes em listas: >>> s 'Berlim: 18.4 C \u00e0s 16h' >>> s [ 8 :] ## do indice 8 ao final da cadeia de caracteres '18.4 C \u00e0s 16h' >>> s [ 8 : 12 ] ## indice 8, 9, 10 e 11 (n\u00e3o 12!) '18.4' >>> s [ 8 : - 1 ] '18.4 C \u00e0s 16' >>> s [ 8 : - 8 ] '18.4 C' Achando o \u00ednicio de um texto na cadeia de caracteres: >>> s . find ( 'Berlim' ) ## onde 'Berlim' inicia? 0 ## no indice 0 >>> s . find ( 'h' ) 21 >>> s . find ( 'Oslo' ) ## n\u00e3o encontrado - 1","title":"Extraindo partes de cadeia de caracteres"},{"location":"dicionariosstrings/cadeiacaracteres/#checando-se-um-texto-esta-contido-em-uma-cadeia-de-caracteres","text":">>> 'Berlim' in s : True >>> 'Oslo' in s : False >>> if 'C' in s : ... print 'C achado' ... else : ... print 'nenhum C' ... C achado","title":"Checando se um texto est\u00e1 contido em uma cadeia de caracteres"},{"location":"dicionariosstrings/cadeiacaracteres/#substituindo-um-texto-por-outro","text":"Sintaxe: s.replace(s1, s2): substitui s1 por s2 >>> s . replace ( ' ' , '__' ) 'Berlim:__18.4__C__\u00e0s__4h' >>> s . replace ( 'Berlim' , 'Curitiba' ) 'Curitiba: 18.4 C \u00e0s 4h' Exemplo: substituindo o texto antes dos dois pontos >>> s 'Berlim: 18.4 C \u00e0s 4h' >>> s . replace ( s [: s . find ( ':' )], 'Curitiba' ) 'Curitiba: 18.4 C \u00e0s 4h' s.find(':') retorna 6; s[:6] \u00e9 Berlim; Berlim \u00e9 substituido por Curitiba.","title":"Substituindo um texto por outro"},{"location":"dicionariosstrings/cadeiacaracteres/#dividindo-uma-cadeia-de-caracteres-em-uma-lista-de-subtextos","text":"s.split(arg) divide em uma lista de subtextos separados pelo argumento arg. Exemplo: >>> s 'Berlim: 18.4 C \u00e0s 16h' >>> s . split ( ':' ) [ 'Berlim' , ' 18.4 C \\xc3\\xa0 s 16h' ] >>> s . split () [ 'Berlim:' , '18.4' , 'C' , ' \\xc3\\xa0 s' , '16h' ] Tente endenter esse: >>> s . split ( ':' )[ 1 ] . split ()[ 0 ] '18.4' >>> deg = float ( _ ) ## _ representa o \u00faltimo resultado no console >>> deg 18.4","title":"Dividindo uma cadeia de caracteres em uma lista de subtextos"},{"location":"dicionariosstrings/cadeiacaracteres/#dividindo-uma-cadeia-de-caracteres-em-linhas","text":"Normalmente, os arquivos de dados cont\u00e9m muito texto e queremos separ\u00e1-lo em linhas. Linhas podem ser separadas por diferentes caracteres de controle em diferentes plataformas: \\n no Unix/Linux/Mac \\r\\n no windows >>> t = '1a linha \\n 2a linha \\n 3a linha' ## linha Unix >>> print t 1 a linha 2 a linha 3 a linha >>> t . split ( ' \\n ' ) [ '1a linha' , '2a linha' , '3a linha' ] >>> t . splitlines () [ '1a linha' , '2a linha' , '3a linha' ] >>> t = '1a linha \\r\\n 2a linha \\r\\n 3a linha' ## Windows >>> t . split ( ' \\n ' ) [ '1a linha \\r ' , '2a linha \\r ' , '3a linha' ] ## n\u00e3o \u00e9 o resultado esperado! >>> t . splitlines () ## qualquer plataforma! [ '1a linha' , '2a linha' , '3a linha' ]","title":"Dividindo uma cadeia de caracteres em linhas"},{"location":"dicionariosstrings/cadeiacaracteres/#cadeias-de-caracteres-sao-objetos-imutaveis","text":"N\u00e3o \u00e9 poss\u00edvel modificar uma cadeia de caracteres (da mesma forma que as listas). Todas as modifica\u00e7\u00f5es resultam em uma nova cadeia de caracteres. >>> s [ 18 ] = 5 ... TypeError : 'str' object does not support item assignment >>> ## criando uma nova cadeia de caracteres e adicionando partes de s: >>> s2 = s [: 19 ] + '5' + s [ 21 :] >>> s2 'Berlim: 18.4 C \u00e0s 5h'","title":"Cadeias de caracteres s\u00e3o objetos imut\u00e1veis"},{"location":"dicionariosstrings/cadeiacaracteres/#removendo-espacos-em-branco","text":">>> s = ' texto com espa\u00e7os em branco antes e depois \\n ' >>> s . strip () 'texto com espa\u00e7os em branco antes e depois' >>> s . lstrip () ## removendo da esquerda 'texto com espa\u00e7os em branco antes e depois \\n ' >>> s . rstrip () ## removendo da direita ' texto com espa\u00e7os em branco antes e depois'","title":"Removendo espa\u00e7os em branco"},{"location":"dicionariosstrings/cadeiacaracteres/#algumas-funcoes-convenientes-para-cadeias-de-caracteres","text":">>> '214' . isdigit () True >>> ' 214 ' . isdigit () False >>> '2.14' . isdigit () False >>> s . lower () 'berlim: 18.4 c \u00e0s 4h' >>> s . upper () 'BERLIM: 18.4 C \u00c0S 4H' >>> s . startswith ( 'Berlim' ) True >>> s . endswith ( 'min' ) False >>> ' ' . isspace () ## espa\u00e7os em branco True >>> ' \\n ' . isspace () ## nova linha True >>> ' \\t ' . isspace () ## TAB True >>> '' . isspace () ## cadeia de caracteres vazia False","title":"Algumas fun\u00e7\u00f5es convenientes para cadeias de caracteres"},{"location":"dicionariosstrings/cadeiacaracteres/#unindo-cadeias-de-caracteres","text":"Podemos unir uma lista de cadeias de caracteres para uma \u00fanica cadeia: >>> strings = [ 'Newton' , 'Secante' , 'Bisec\u00e7\u00e3o' ] >>> ', ' . join ( strings ) 'Newton, Secante, Bisec\u00e7\u00e3o' As opera\u00e7\u00f5es inversas seriam: t = delimitador . join ( listaCadeias ) listaCadeias = t . split ( delimitador ) Eliminando as duas primeiras palavras em uma linha: >>> linha = 'Esta \u00e9 uma linha com palavras separadas por espa\u00e7os' >>> palavras = linha . split () >>> linha2 = ' ' . join ( palavras [ 2 :]) >>> print linha2 'uma linha com palavras separadas por espa\u00e7os'","title":"Unindo cadeias de caracteres"},{"location":"dicionariosstrings/cadeiacaracteres/#lendo-pares-de-numeros-xy-de-um-arquivo","text":"Arquivo de exemplo: (1.3,0) (-1,2) (3,-1.5) (0,1) (1,0) (1,1) (0,-0.01) (10.5,-1) (2.5,-2.5) Algoritmo: Leia linha por linha; Divida cada linha em palavras; Em cada palavra, remova o par\u00eanteses e divida o resto na v\u00edrgula. O c\u00f3digo: linhas = open ( 'ler_pares.dat' , 'r' ) . readlines () pares = [] ## lista de (n1, n2) pares de n\u00fameros for linha in linhas : palavras = linha . split () for palavra in palavras : palavra = palavra [ 1 : - 1 ] ## removendo o par\u00eanteses n1 , n2 = palavra . split ( ',' ) n1 = float ( n1 ); n2 = float ( n2 ) par = ( n1 , n2 ) pares . append ( par ) Lista resultante em Python: \\[(1.3, 0.0), (-1.0, 2.0), (3.0, -1.5), (0.0, 1.0), (1.0, 0.0), (1.0, 1.0), (0.0, -0.01), (10.5, -1.0), (2.5, -2.5)\\]","title":"Lendo pares de n\u00fameros (x,y) de um arquivo"},{"location":"dicionariosstrings/cadeiacaracteres/#solucao-alternativa-sintaxe-python-no-formato-do-arquivo","text":"Suponha que o formato do arquivo (1.3, 0) (-1, 2) (3, -1.5) ... Seja um pouco diferente: \\[(1.3, 0), (-1, 2), (3, -1.5), ... \\] Chamando a fun\u00e7\u00e3o eval no formato diferente, \u00e9 poss\u00edvel obter a lista final diretamente: linhas = open ( 'ler_pares.dat' , 'r' ) . readlines () texto = open ( 'ler_pares2.dat' , 'r' ) . read () texto = '[' + texto . replace ( ')' , '),' ) + ']' pares = eval ( texto )","title":"Solu\u00e7\u00e3o alternativa: sintaxe Python no formato do arquivo"},{"location":"dicionariosstrings/dadosarquivos/","text":"Uma r\u00e1pida recapitulada na leitura de arquivos do_arquivo = open ( filename , 'r' ) ## abre o arquivo para leitura linha = do_arquivo . readline () ## l\u00ea a pr\u00f3xima linha conteudo = do_arquivo . read () ## l\u00ea o resto do arquivo em cadeias de caracteres linhas = do_arquivo . readlines () ## l\u00ea o resto do arquivo em lista for linha in do_arquivo : ## l\u00ea o resto do arquivo linha por linha do_arquivo . close () ## lembre-se de fechar o arquivo! Exemplo: lendo dados de um arquivo para um dicion\u00e1rio Conte\u00fado do arquivo: Oslo: 21.8 Londres: 18.1 Berlim: 19 Paris: 23 Roma: 26 Helsinque: 17.8 Armazene em um dicion\u00e1rio com os nomes das cidades como chaves e as temperaturas como valores. O programa: do_arquivo = open ( 'deg2.dat' , 'r' ) temps = {} ## inicie um dicion\u00e1rio vazio for linha in do_arquivo . readlines (): cidade , temp = linha . split () cidade = cidade [: - 1 ] ## remove o \u00faltimo caractere (:) temps [ cidade ] = float ( temp ) Lendo um arquivo com tabela para um dicion\u00e1rio Um arquivo contendo uma tabela pode ser lindo para um dicion\u00e1rio de um dicion\u00e1rio. O arquivo de dados: A B C D 1 11.7 0.035 2017 99.1 2 9.2 0.037 2019 101.2 3 12.2 no no 105.2 4 10.1 0.031 no 102.1 5 9.1 0.033 2009 103.3 6 8.7 0.036 2015 101.9 Crie um dicion\u00e1rio dados[p][i] (dicion\u00e1rio de dicion\u00e1rios) para armazenar as medic\u00f5es n\u00famero i (1, 2, etc.) da propriedade p (A, B, etc.). Antes de implementar, precisamos desenvolver um plano (algoritmo) para fazer isso: Examine a primeira linha: Divida em palavras; Inicie um dicion\u00e1rio com os nomes das propriedades como chaves e dicion\u00e1rios vazios {} como valores; Para cada uma das linhas remanescentes: Divida em palavras; Para cada palavras ap\u00f3s a primeira: se a palavra n\u00e3o for no converte para ponto flutuante e armazene. M\u00c3OS \u00c0 OBRA! Formato no arquivo de entrada Precisamos analisar o formato no arquivo de entrada para descrever um algoritmo para interpretar o conte\u00fado. Exemplo, varia\u00e7\u00f5es nos pre\u00e7os das a\u00e7\u00f5es de v\u00e1rias companhias: Date,Open,High,Low,Close,Volume,Adj Close 2017-05-01,145.100006,148.089996,144.960007,147.509995,57002300,147.509995 2017-04-03,143.710007,145.460007,140.059998,143.649994,20592400,143.649994 2017-03-01,137.889999,144.50,137.050003,143.660004,25273400,143.660004 2017-02-01,127.029999,137.479996,127.010002,136.990005,31497400,136.990005 2017-01-03,115.800003,122.440002,114.760002,121.349998,30616100,120.826149 2016-12-01,110.370003,118.019997,108.25,115.82,30442300,115.320023 ... 2010-08-02,260.440002,264.279999,235.559998,243.100006,113748900,31.495928 2010-07-01,254.300003,265.990021,239.600006,257.25,191879900,33.329193 2010-06-01,259.690002,279.009979,242.199982,251.529999,197621600,32.588116 2010-05-03,263.839996,267.880005,199.25,256.880005,236228300,33.281258 Dados de Yahoo Finance AAPL para a Apple (AAPL) por exemplo. Para outras companhias Yahoo Finance Formato no arquivo: Colunas separadas por v\u00edrgulas; Primeira coluna \u00e9 a data e a final \u00e9 o pre\u00e7o; Os pre\u00e7os inicial em diferentes datas. Um exemplo de algoritmo para ler esse arquivo de dados de v\u00e1rias companhias: Pule a primeira linha; Leia linha por linha; Divida cada linha nas v\u00edrgulas; Armazene a primeira palavra, data, em uma lista de datas; Armazene a \u00faltima palavra, pre\u00e7o, em uma lista de pre\u00e7os; Colete as listas de datas e pre\u00e7os e armazene em um dicion\u00e1rio (a chave \u00e9 a companhia); Ma\u00e7a uma fun\u00e7\u00e3o para ler um arquivo de uma companhia em espec\u00edfico; Para imprimir: Converta as datas ano-m\u00eas-dia em coordenadas de ano no eixo x para montagem de um gr\u00e1fico; Observe que os hist\u00f3ricos de pre\u00e7os das companhias iniciam em anos diferentes. Dicas: usar import datetime as dt para criar criar objetos data e import glob para buscar v\u00e1rios arquivos, por exemplo precoAcoes_*.csv . Resultado em escala logar\u00edtmica:","title":"Dados de arquivos"},{"location":"dicionariosstrings/dadosarquivos/#uma-rapida-recapitulada-na-leitura-de-arquivos","text":"do_arquivo = open ( filename , 'r' ) ## abre o arquivo para leitura linha = do_arquivo . readline () ## l\u00ea a pr\u00f3xima linha conteudo = do_arquivo . read () ## l\u00ea o resto do arquivo em cadeias de caracteres linhas = do_arquivo . readlines () ## l\u00ea o resto do arquivo em lista for linha in do_arquivo : ## l\u00ea o resto do arquivo linha por linha do_arquivo . close () ## lembre-se de fechar o arquivo!","title":"Uma r\u00e1pida recapitulada na leitura de arquivos"},{"location":"dicionariosstrings/dadosarquivos/#exemplo-lendo-dados-de-um-arquivo-para-um-dicionario","text":"Conte\u00fado do arquivo: Oslo: 21.8 Londres: 18.1 Berlim: 19 Paris: 23 Roma: 26 Helsinque: 17.8 Armazene em um dicion\u00e1rio com os nomes das cidades como chaves e as temperaturas como valores. O programa: do_arquivo = open ( 'deg2.dat' , 'r' ) temps = {} ## inicie um dicion\u00e1rio vazio for linha in do_arquivo . readlines (): cidade , temp = linha . split () cidade = cidade [: - 1 ] ## remove o \u00faltimo caractere (:) temps [ cidade ] = float ( temp )","title":"Exemplo: lendo dados de um arquivo para um dicion\u00e1rio"},{"location":"dicionariosstrings/dadosarquivos/#lendo-um-arquivo-com-tabela-para-um-dicionario","text":"Um arquivo contendo uma tabela pode ser lindo para um dicion\u00e1rio de um dicion\u00e1rio. O arquivo de dados: A B C D 1 11.7 0.035 2017 99.1 2 9.2 0.037 2019 101.2 3 12.2 no no 105.2 4 10.1 0.031 no 102.1 5 9.1 0.033 2009 103.3 6 8.7 0.036 2015 101.9 Crie um dicion\u00e1rio dados[p][i] (dicion\u00e1rio de dicion\u00e1rios) para armazenar as medic\u00f5es n\u00famero i (1, 2, etc.) da propriedade p (A, B, etc.). Antes de implementar, precisamos desenvolver um plano (algoritmo) para fazer isso: Examine a primeira linha: Divida em palavras; Inicie um dicion\u00e1rio com os nomes das propriedades como chaves e dicion\u00e1rios vazios {} como valores; Para cada uma das linhas remanescentes: Divida em palavras; Para cada palavras ap\u00f3s a primeira: se a palavra n\u00e3o for no converte para ponto flutuante e armazene. M\u00c3OS \u00c0 OBRA!","title":"Lendo um arquivo com tabela para um dicion\u00e1rio"},{"location":"dicionariosstrings/dadosarquivos/#formato-no-arquivo-de-entrada","text":"Precisamos analisar o formato no arquivo de entrada para descrever um algoritmo para interpretar o conte\u00fado. Exemplo, varia\u00e7\u00f5es nos pre\u00e7os das a\u00e7\u00f5es de v\u00e1rias companhias: Date,Open,High,Low,Close,Volume,Adj Close 2017-05-01,145.100006,148.089996,144.960007,147.509995,57002300,147.509995 2017-04-03,143.710007,145.460007,140.059998,143.649994,20592400,143.649994 2017-03-01,137.889999,144.50,137.050003,143.660004,25273400,143.660004 2017-02-01,127.029999,137.479996,127.010002,136.990005,31497400,136.990005 2017-01-03,115.800003,122.440002,114.760002,121.349998,30616100,120.826149 2016-12-01,110.370003,118.019997,108.25,115.82,30442300,115.320023 ... 2010-08-02,260.440002,264.279999,235.559998,243.100006,113748900,31.495928 2010-07-01,254.300003,265.990021,239.600006,257.25,191879900,33.329193 2010-06-01,259.690002,279.009979,242.199982,251.529999,197621600,32.588116 2010-05-03,263.839996,267.880005,199.25,256.880005,236228300,33.281258 Dados de Yahoo Finance AAPL para a Apple (AAPL) por exemplo. Para outras companhias Yahoo Finance Formato no arquivo: Colunas separadas por v\u00edrgulas; Primeira coluna \u00e9 a data e a final \u00e9 o pre\u00e7o; Os pre\u00e7os inicial em diferentes datas. Um exemplo de algoritmo para ler esse arquivo de dados de v\u00e1rias companhias: Pule a primeira linha; Leia linha por linha; Divida cada linha nas v\u00edrgulas; Armazene a primeira palavra, data, em uma lista de datas; Armazene a \u00faltima palavra, pre\u00e7o, em uma lista de pre\u00e7os; Colete as listas de datas e pre\u00e7os e armazene em um dicion\u00e1rio (a chave \u00e9 a companhia); Ma\u00e7a uma fun\u00e7\u00e3o para ler um arquivo de uma companhia em espec\u00edfico; Para imprimir: Converta as datas ano-m\u00eas-dia em coordenadas de ano no eixo x para montagem de um gr\u00e1fico; Observe que os hist\u00f3ricos de pre\u00e7os das companhias iniciam em anos diferentes. Dicas: usar import datetime as dt para criar criar objetos data e import glob para buscar v\u00e1rios arquivos, por exemplo precoAcoes_*.csv . Resultado em escala logar\u00edtmica:","title":"Formato no arquivo de entrada"},{"location":"dicionariosstrings/dicionariosstrings/","text":"Dicion\u00e1rios e cadeias de caracteres Salve seus dados. Arquivos s\u00e3o utilizados para armazenamento permanente de informa\u00e7\u00f5es em um computador. De experi\u00eancias anteriores com o computador voc\u00ea j\u00e1 utilizou alguma forma de salvar informa\u00e7\u00f5es em um arquivo para posteriormente acess\u00e1-la novamente abrindo o arquivo. Como fazer o python escrever, ler e interpretar os dados novamente \u00e9 o que vamos ver nessa se\u00e7\u00e3o. Objetivos Nesta se\u00e7\u00e3o vamos aprender a: Mais sobre leitura de arquivos; Armazenar dados em um novo objeto: dicion\u00e1rio; Interpretar o conte\u00fado de arquivos atrav\u00e9s da manipula\u00e7\u00e3o das cadeias de caracteres. Dicion\u00e1rios arquivo_fig = { 'fig1.pdf' : 81761 , 'fig2.png' : 8754 } arquivo_fig [ 'fig3.png' ] = os . path . getsize ( filename ) for nome in arquivo_fig : print 'Tamanho do arquivo %g \u00e9 %d :' % ( nome , arquivo_fig [ nome ]) Um dicion\u00e1rio \u00e9 uma generaliza\u00e7\u00e3o de uma lista Caracter\u00edsticas das listas: Armazenar uma sequ\u00eancia de elementos em um objeto simples ( [1, 3, -1] ); Cada elemento -e um objeto Python; Os elementos s\u00e3o indexados por inteiros 0, 1, ... Dicion\u00e1rios podem indexar objeto em uma cole\u00e7\u00e3o atrav\u00e9s de textos como se fossem listas com \u00edndices de texto. \u00cdndices de listas algumas vezes n\u00e3o s\u00e3o naturais \u00cdndices num\u00e9ricos algumas vezes n\u00e3o s\u00e3o ideais para a localiza\u00e7\u00e3o de um elemento em uma cole\u00e7\u00e3o de objetos. Suponha que precisamos armazenar as temperaturas em Oslo, Londres e Paris. Solu\u00e7\u00e3o em listas: temps = [ 13 , 15.4 , 17.5 ] ## temps[0]: Oslo ## temps[1]: Londres ## temps[2]: Paris print 'A temperatura em Oslo \u00e9' , temps [ 0 ] \u00c9 poss\u00edvel achar a temperatura atrav\u00e9s do \u00edndice relativo a cidade, mas n\u00e3o seria melhor e mais intuitivo poder fazer temps[Oslo] ? Dicion\u00e1rios mapeiam cadeias de caracteres para objetos ## Inicializando o dicion\u00e1rio temps = { 'Oslo' : 13 , 'Londres' : 15.4 , 'Paris' : 17.5 } ## Applica\u00e7\u00f5es print 'A temperatura emn Londres \u00e9' , temps [ 'Londres' ] print 'A temperatura em Oslo \u00e9' , temps [ 'Oslo' ] Importante: O \u00edndice em texto (cadeia de caracteres), como Oslo \u00e9 chamado de chave ( key ), enquanto que temps[Oslo] \u00e9 o valor associado; Um dicion\u00e1rio \u00e9 uma cole\u00e7\u00e3o desordenada de pares chave-valor. Inicializando Dicion\u00e1rios Duas formas de se iniciar uma cola\u00e7\u00e3o de pares chave-valor: meu_dicio = { 'chave1' : valor1 , 'chave2' : valor2 , ... } temps = { 'Oslo' : 13 , 'Londres' : 15.4 , 'Paris' : 17.5 } ## ou meu_dicio = dict ( chave1 = valor1 , chave2 = valor2 , ... ) temps = dict ( Oslo = 13 , Londres = 15.4 , Paris = 17.5 ) E para adicionar um novo elemento basta fazer uma atribui\u00e7\u00e3o de uma nova chave a um novo valor: >>> temps [ 'Madri' ] = 26.0 >>> print temps { 'Oslo' : 13 , 'Londres' : 15.4 , 'Paris' : 17.5 , 'Madri' : 26.0 } La\u00e7o em dicion\u00e1rios Correr um la\u00e7o em um dicion\u00e1rio significa correr um la\u00e7o sobre as chaves: for chave in dicionario : valor = dicionario [ chave ] print valor Exemplo: >>> for cidade in temps : ... print 'A temperatura de %s \u00e9 %g ' % ( cidade , temps [ cidade ]) ... A temperatura de Paris \u00e9 17.5 A temperatura de Oslo \u00e9 13 A temperatura de Londres \u00e9 15.4 A temperatura de Madri \u00e9 26 Note que a sequ\u00eancia de chaves \u00e9 arbitr\u00e1ria! Use o sort se for preciso uma sequ\u00eancia em particular: for cidade in sorted ( temps ): ## ordem alfab\u00e9tica das chaves valor = temps [ cidade ] print valor Manipula\u00e7\u00e3o de dicion\u00e1rios Pode-se testar por chaves em particular, deletar elementos, etc. O dicion\u00e1rio cont\u00e9m uma chave em particular? >>> if 'Berlim' in temps : ... print 'Berlim:' , temps [ 'Berlim' ] ... else : ... print 'Nenhum dado de temperatura para Berlim' ... Nenhum dado de temperatura para Berlim >>> 'Oslo' in temps ## express\u00e3o condicional padr\u00e3o True Apagando um elemento de um dicion\u00e1rio: >>> del temps [ 'Oslo' ] ## remove a chave Oslo com o valor >>> temps { 'Paris' : 17.5 , 'Londres' : 15.4 , 'Madri' : 26.0 } >>> len ( temps ) ## n\u00famero de pares chave-valor no dicion\u00e1rio 3 As chaves e os valores podem ser encontrados como listas Somente no Python vers\u00e3o 2: >>> temps . keys () [ 'Paris' , 'Londres' , 'Madri' ] >>> temps . values () [ 17.5 , 15.4 , 26.0 ] Cuidado: duas vari\u00e1veis podem alterar o mesmo dicion\u00e1rio Dicion\u00e1rios tamb\u00e9m s\u00e3o mut\u00e1veis, ent\u00e3o opera\u00e7\u00f5es produzem visualiza\u00e7\u00f5es do original: >>> t1 = temps >>> t1 [ 'Estocolmo' ] = 10.0 ## muda t1 >>> temps ## temps tamb\u00e9m \u00e9 modificado! { 'Estocolmo' : 10.0 , 'Paris' : 17.5 , 'Londres' : 15.4 , 'Madri' : 26.0 } >>> t2 = temps . copy () ## fazendo uma c\u00f3pia >>> t2 [ 'Paris' ] = 16 >>> t1 [ 'Paris' ] ## t1 n\u00e3o modifica 17.5 Qualquer objeto constante pode ser utilizado como chave At\u00e9 ent\u00e3o as chaves eram cadeias de caracteres, mas elas podem ser qualquer objeto imut\u00e1vel: >>> d = { 1 : 34 , 2 : 67 , 3 : 0 } #chave \u00e9 um inteiro >>> d = { 13 : 'Oslo' , 15.4 : 'Londres' } ## sintexe poss\u00edvel >>> d = {( 0 , 0 ): 4 , ( 1 , - 1 ): 5 } ## chave \u00e9 uma tupla >>> d = {[ 0 , 0 ]: 4 , [ - 1 , 1 ]: 5 } ## a lista \u00e9 mut\u00e1vel! ... TypeError : unhashable type : 'list' Exemplo: polinomiais representados por dicion\u00e1rios A informa\u00e7\u00e3o no polin\u00f4mio p(x)=-1 + x^2 + 3x^7 pode ser representada por um dicion\u00e1rio com as pot\u00eancias como chaves (inteiros) e os coeficientes como valores (pontos flutuantes): p = { 0 : - 1 , 2 : 1 , 7 : 3.5 } Avalie um polin\u00f4mio tal que $ \\sum_{i\\in I} c_ix^i $ para algum $ x $: def aval_poli_dicio ( poli , x ): ## o sum em Python pode adicionar elementos de um iterador return sum ( poli [ potencia ] * x ** potencia for potencia in poli ) Polinomiais tamb\u00e9m podem ser representados por listas O \u00edndice da lista corresponde \u00e0 pot\u00eancia, ou seja, o polin\u00f4mio $ -1 + x^2 + 3x^7 $ \u00e9 representado como: p = [ - 1 , 0 , 1 , 0 , 0 , 0 , 0 , 3 ] O polin\u00f4mio gen\u00e9rico $ \\sum_{i=0}^N c_ix^i $ \u00e9 armazenado como [c0, c1, c2, ..., cN] , e sua fun\u00e7\u00e3o de avalia\u00e7\u00e3o fica: def aval_poli_lista ( poli , x ): soma = 0 for potencia in range ( len ( poli )): soma += poli [ potencia ] * x ** potencia return soma Comparativo Comparando a representa\u00e7\u00e3o de um polin\u00f4mio em um dicion\u00e1rio e uma lista, notamos que o dicion\u00e1rio precisa apenas armazenar os termos diferentes de zero. Por exemplo, comparando para o polin\u00f4mio $ 1 - x^{200} $: p = { 0 : 1 , 200 : - 1 } ## len(p) \u00e9 2 p = [ 1 , 0 , 0 , 0 , ... , 200 ] ## len(p) \u00e9 201 Al\u00e9m disso, dicion\u00e1rios podem trabalhar com as pot\u00eancias negativas de forma simples, ex. $ {1\\over2}x^{-3} + 2x^4 $: p = { - 3 : 0.5 , 4 : 2 } print aval_poli_dicio ( p , x = 4 )","title":"Dicion\u00e1rios"},{"location":"dicionariosstrings/dicionariosstrings/#dicionarios-e-cadeias-de-caracteres","text":"Salve seus dados. Arquivos s\u00e3o utilizados para armazenamento permanente de informa\u00e7\u00f5es em um computador. De experi\u00eancias anteriores com o computador voc\u00ea j\u00e1 utilizou alguma forma de salvar informa\u00e7\u00f5es em um arquivo para posteriormente acess\u00e1-la novamente abrindo o arquivo. Como fazer o python escrever, ler e interpretar os dados novamente \u00e9 o que vamos ver nessa se\u00e7\u00e3o.","title":"Dicion\u00e1rios e cadeias de caracteres"},{"location":"dicionariosstrings/dicionariosstrings/#objetivos","text":"Nesta se\u00e7\u00e3o vamos aprender a: Mais sobre leitura de arquivos; Armazenar dados em um novo objeto: dicion\u00e1rio; Interpretar o conte\u00fado de arquivos atrav\u00e9s da manipula\u00e7\u00e3o das cadeias de caracteres.","title":"Objetivos"},{"location":"dicionariosstrings/dicionariosstrings/#dicionarios","text":"arquivo_fig = { 'fig1.pdf' : 81761 , 'fig2.png' : 8754 } arquivo_fig [ 'fig3.png' ] = os . path . getsize ( filename ) for nome in arquivo_fig : print 'Tamanho do arquivo %g \u00e9 %d :' % ( nome , arquivo_fig [ nome ])","title":"Dicion\u00e1rios"},{"location":"dicionariosstrings/dicionariosstrings/#um-dicionario-e-uma-generalizacao-de-uma-lista","text":"Caracter\u00edsticas das listas: Armazenar uma sequ\u00eancia de elementos em um objeto simples ( [1, 3, -1] ); Cada elemento -e um objeto Python; Os elementos s\u00e3o indexados por inteiros 0, 1, ... Dicion\u00e1rios podem indexar objeto em uma cole\u00e7\u00e3o atrav\u00e9s de textos como se fossem listas com \u00edndices de texto.","title":"Um dicion\u00e1rio \u00e9 uma generaliza\u00e7\u00e3o de uma lista"},{"location":"dicionariosstrings/dicionariosstrings/#indices-de-listas-algumas-vezes-nao-sao-naturais","text":"\u00cdndices num\u00e9ricos algumas vezes n\u00e3o s\u00e3o ideais para a localiza\u00e7\u00e3o de um elemento em uma cole\u00e7\u00e3o de objetos. Suponha que precisamos armazenar as temperaturas em Oslo, Londres e Paris. Solu\u00e7\u00e3o em listas: temps = [ 13 , 15.4 , 17.5 ] ## temps[0]: Oslo ## temps[1]: Londres ## temps[2]: Paris print 'A temperatura em Oslo \u00e9' , temps [ 0 ] \u00c9 poss\u00edvel achar a temperatura atrav\u00e9s do \u00edndice relativo a cidade, mas n\u00e3o seria melhor e mais intuitivo poder fazer temps[Oslo] ?","title":"\u00cdndices de listas algumas vezes n\u00e3o s\u00e3o naturais"},{"location":"dicionariosstrings/dicionariosstrings/#dicionarios-mapeiam-cadeias-de-caracteres-para-objetos","text":"## Inicializando o dicion\u00e1rio temps = { 'Oslo' : 13 , 'Londres' : 15.4 , 'Paris' : 17.5 } ## Applica\u00e7\u00f5es print 'A temperatura emn Londres \u00e9' , temps [ 'Londres' ] print 'A temperatura em Oslo \u00e9' , temps [ 'Oslo' ] Importante: O \u00edndice em texto (cadeia de caracteres), como Oslo \u00e9 chamado de chave ( key ), enquanto que temps[Oslo] \u00e9 o valor associado; Um dicion\u00e1rio \u00e9 uma cole\u00e7\u00e3o desordenada de pares chave-valor.","title":"Dicion\u00e1rios mapeiam cadeias de caracteres para objetos"},{"location":"dicionariosstrings/dicionariosstrings/#inicializando-dicionarios","text":"Duas formas de se iniciar uma cola\u00e7\u00e3o de pares chave-valor: meu_dicio = { 'chave1' : valor1 , 'chave2' : valor2 , ... } temps = { 'Oslo' : 13 , 'Londres' : 15.4 , 'Paris' : 17.5 } ## ou meu_dicio = dict ( chave1 = valor1 , chave2 = valor2 , ... ) temps = dict ( Oslo = 13 , Londres = 15.4 , Paris = 17.5 ) E para adicionar um novo elemento basta fazer uma atribui\u00e7\u00e3o de uma nova chave a um novo valor: >>> temps [ 'Madri' ] = 26.0 >>> print temps { 'Oslo' : 13 , 'Londres' : 15.4 , 'Paris' : 17.5 , 'Madri' : 26.0 }","title":"Inicializando Dicion\u00e1rios"},{"location":"dicionariosstrings/dicionariosstrings/#laco-em-dicionarios","text":"Correr um la\u00e7o em um dicion\u00e1rio significa correr um la\u00e7o sobre as chaves: for chave in dicionario : valor = dicionario [ chave ] print valor Exemplo: >>> for cidade in temps : ... print 'A temperatura de %s \u00e9 %g ' % ( cidade , temps [ cidade ]) ... A temperatura de Paris \u00e9 17.5 A temperatura de Oslo \u00e9 13 A temperatura de Londres \u00e9 15.4 A temperatura de Madri \u00e9 26 Note que a sequ\u00eancia de chaves \u00e9 arbitr\u00e1ria! Use o sort se for preciso uma sequ\u00eancia em particular: for cidade in sorted ( temps ): ## ordem alfab\u00e9tica das chaves valor = temps [ cidade ] print valor","title":"La\u00e7o em dicion\u00e1rios"},{"location":"dicionariosstrings/dicionariosstrings/#manipulacao-de-dicionarios","text":"Pode-se testar por chaves em particular, deletar elementos, etc. O dicion\u00e1rio cont\u00e9m uma chave em particular? >>> if 'Berlim' in temps : ... print 'Berlim:' , temps [ 'Berlim' ] ... else : ... print 'Nenhum dado de temperatura para Berlim' ... Nenhum dado de temperatura para Berlim >>> 'Oslo' in temps ## express\u00e3o condicional padr\u00e3o True Apagando um elemento de um dicion\u00e1rio: >>> del temps [ 'Oslo' ] ## remove a chave Oslo com o valor >>> temps { 'Paris' : 17.5 , 'Londres' : 15.4 , 'Madri' : 26.0 } >>> len ( temps ) ## n\u00famero de pares chave-valor no dicion\u00e1rio 3","title":"Manipula\u00e7\u00e3o de dicion\u00e1rios"},{"location":"dicionariosstrings/dicionariosstrings/#as-chaves-e-os-valores-podem-ser-encontrados-como-listas","text":"Somente no Python vers\u00e3o 2: >>> temps . keys () [ 'Paris' , 'Londres' , 'Madri' ] >>> temps . values () [ 17.5 , 15.4 , 26.0 ]","title":"As chaves e os valores podem ser encontrados como listas"},{"location":"dicionariosstrings/dicionariosstrings/#cuidado-duas-variaveis-podem-alterar-o-mesmo-dicionario","text":"Dicion\u00e1rios tamb\u00e9m s\u00e3o mut\u00e1veis, ent\u00e3o opera\u00e7\u00f5es produzem visualiza\u00e7\u00f5es do original: >>> t1 = temps >>> t1 [ 'Estocolmo' ] = 10.0 ## muda t1 >>> temps ## temps tamb\u00e9m \u00e9 modificado! { 'Estocolmo' : 10.0 , 'Paris' : 17.5 , 'Londres' : 15.4 , 'Madri' : 26.0 } >>> t2 = temps . copy () ## fazendo uma c\u00f3pia >>> t2 [ 'Paris' ] = 16 >>> t1 [ 'Paris' ] ## t1 n\u00e3o modifica 17.5","title":"Cuidado: duas vari\u00e1veis podem alterar o mesmo dicion\u00e1rio"},{"location":"dicionariosstrings/dicionariosstrings/#qualquer-objeto-constante-pode-ser-utilizado-como-chave","text":"At\u00e9 ent\u00e3o as chaves eram cadeias de caracteres, mas elas podem ser qualquer objeto imut\u00e1vel: >>> d = { 1 : 34 , 2 : 67 , 3 : 0 } #chave \u00e9 um inteiro >>> d = { 13 : 'Oslo' , 15.4 : 'Londres' } ## sintexe poss\u00edvel >>> d = {( 0 , 0 ): 4 , ( 1 , - 1 ): 5 } ## chave \u00e9 uma tupla >>> d = {[ 0 , 0 ]: 4 , [ - 1 , 1 ]: 5 } ## a lista \u00e9 mut\u00e1vel! ... TypeError : unhashable type : 'list'","title":"Qualquer objeto constante pode ser utilizado como chave"},{"location":"dicionariosstrings/dicionariosstrings/#exemplo-polinomiais-representados-por-dicionarios","text":"A informa\u00e7\u00e3o no polin\u00f4mio p(x)=-1 + x^2 + 3x^7 pode ser representada por um dicion\u00e1rio com as pot\u00eancias como chaves (inteiros) e os coeficientes como valores (pontos flutuantes): p = { 0 : - 1 , 2 : 1 , 7 : 3.5 } Avalie um polin\u00f4mio tal que $ \\sum_{i\\in I} c_ix^i $ para algum $ x $: def aval_poli_dicio ( poli , x ): ## o sum em Python pode adicionar elementos de um iterador return sum ( poli [ potencia ] * x ** potencia for potencia in poli )","title":"Exemplo: polinomiais representados por dicion\u00e1rios"},{"location":"dicionariosstrings/dicionariosstrings/#polinomiais-tambem-podem-ser-representados-por-listas","text":"O \u00edndice da lista corresponde \u00e0 pot\u00eancia, ou seja, o polin\u00f4mio $ -1 + x^2 + 3x^7 $ \u00e9 representado como: p = [ - 1 , 0 , 1 , 0 , 0 , 0 , 0 , 3 ] O polin\u00f4mio gen\u00e9rico $ \\sum_{i=0}^N c_ix^i $ \u00e9 armazenado como [c0, c1, c2, ..., cN] , e sua fun\u00e7\u00e3o de avalia\u00e7\u00e3o fica: def aval_poli_lista ( poli , x ): soma = 0 for potencia in range ( len ( poli )): soma += poli [ potencia ] * x ** potencia return soma","title":"Polinomiais tamb\u00e9m podem ser representados por listas"},{"location":"dicionariosstrings/dicionariosstrings/#comparativo","text":"Comparando a representa\u00e7\u00e3o de um polin\u00f4mio em um dicion\u00e1rio e uma lista, notamos que o dicion\u00e1rio precisa apenas armazenar os termos diferentes de zero. Por exemplo, comparando para o polin\u00f4mio $ 1 - x^{200} $: p = { 0 : 1 , 200 : - 1 } ## len(p) \u00e9 2 p = [ 1 , 0 , 0 , 0 , ... , 200 ] ## len(p) \u00e9 201 Al\u00e9m disso, dicion\u00e1rios podem trabalhar com as pot\u00eancias negativas de forma simples, ex. $ {1\\over2}x^{-3} + 2x^4 $: p = { - 3 : 0.5 , 4 : 2 } print aval_poli_dicio ( p , x = 4 )","title":"Comparativo"},{"location":"dicionariosstrings/resumos/","text":"Resumo de opera\u00e7\u00f5es com cadeias de caracteres s = 'Berlim: 18.4 C \u00e0s 16h' s [ 8 : 17 ] ## extraindo uma subcadeia de caracteres s . find ( ':' ) ## \u00edndice de onde o primeiro ':' \u00e9 encontrado s . split ( ':' ) ## dividindo em subcadeias pelo : s . split () ## dividindo nos espa\u00e7os em branco 'Berlim' in s ## testa se a subcadeia est\u00e1 em s s . replace ( '18.4' , '20' ) s . lower () ## todas em min\u00fasculo s . upper () ## todas em mai\u00fasculo s . split ()[ 4 ] . isdigit () s . strip () ## remove os espa\u00e7os em branco no in\u00edcio e final ', ' . join ( lista_de_palavras ) Resumo das funcionalidades dos dicion\u00e1rios Constru\u00e7\u00e3o Significado a = {} inicia um dicion\u00e1rio vazio a = {'ponto': [0,0.1], 'valor': 7} inicia um dicion\u00e1rio a = dic(ponto=[2,7], valor=3) inicia um dicion\u00e1rio com chaves como cadeias de caracteres a.update(b) adiciona/atualiza um par chave-calor de b em a a.update(chave1=valor1, chave2=valor2) adiciona/atualiza um par chave-calor em a a['esconder'] = True adiciona um par chave-calor para a a['ponto'] pega o valor correspondente a chave ponto for chave in a: la\u00e7o sobre as chaves em ordem aleat\u00f3ria for chave in sorted(a): la\u00e7o sobre as chaves em ordem alfab\u00e9tica 'valor' in a True se a cadeia de caracteres valor \u00e9 uma chave em a del a['ponto'] apaga um par chave-valor de a list(a.keys()) lista de chaves list(a.values()) lista de valores len(a) n\u00famero de pares chave-valor em a isinstance(a, dic) \u00e9 True se a \u00e9 um dicion\u00e1rio Tarefa Ler os dados do clima da cidade de Oxford de acordo com o fornecido em: Oxford.txt Objetivos \u00e0 cumprir: Ler os dados de local e localiza\u00e7\u00e3o do cabe\u00e7alho; Ler os dados das colunas e armazenar em dicion\u00e1rios; Testar para n\u00fameros com anota\u00e7\u00f5es especiais como \"Provisional\"; Separar valores estimados (marcados com *) dos medidos; Fazer um gr\u00e1fico da varia\u00e7\u00e3o da temperatura m\u00e1xima (tmax) e da temperatura m\u00ednima (tmin) por ano. Regras b\u00e1sicas: Documenta\u00e7\u00e3o das fun\u00e7\u00f5es; Levantamento de erros; Fun\u00e7\u00f5es teste.","title":"Resumo das funcionalidades"},{"location":"dicionariosstrings/resumos/#resumo-de-operacoes-com-cadeias-de-caracteres","text":"s = 'Berlim: 18.4 C \u00e0s 16h' s [ 8 : 17 ] ## extraindo uma subcadeia de caracteres s . find ( ':' ) ## \u00edndice de onde o primeiro ':' \u00e9 encontrado s . split ( ':' ) ## dividindo em subcadeias pelo : s . split () ## dividindo nos espa\u00e7os em branco 'Berlim' in s ## testa se a subcadeia est\u00e1 em s s . replace ( '18.4' , '20' ) s . lower () ## todas em min\u00fasculo s . upper () ## todas em mai\u00fasculo s . split ()[ 4 ] . isdigit () s . strip () ## remove os espa\u00e7os em branco no in\u00edcio e final ', ' . join ( lista_de_palavras )","title":"Resumo de opera\u00e7\u00f5es com cadeias de caracteres"},{"location":"dicionariosstrings/resumos/#resumo-das-funcionalidades-dos-dicionarios","text":"Constru\u00e7\u00e3o Significado a = {} inicia um dicion\u00e1rio vazio a = {'ponto': [0,0.1], 'valor': 7} inicia um dicion\u00e1rio a = dic(ponto=[2,7], valor=3) inicia um dicion\u00e1rio com chaves como cadeias de caracteres a.update(b) adiciona/atualiza um par chave-calor de b em a a.update(chave1=valor1, chave2=valor2) adiciona/atualiza um par chave-calor em a a['esconder'] = True adiciona um par chave-calor para a a['ponto'] pega o valor correspondente a chave ponto for chave in a: la\u00e7o sobre as chaves em ordem aleat\u00f3ria for chave in sorted(a): la\u00e7o sobre as chaves em ordem alfab\u00e9tica 'valor' in a True se a cadeia de caracteres valor \u00e9 uma chave em a del a['ponto'] apaga um par chave-valor de a list(a.keys()) lista de chaves list(a.values()) lista de valores len(a) n\u00famero de pares chave-valor em a isinstance(a, dic) \u00e9 True se a \u00e9 um dicion\u00e1rio","title":"Resumo das funcionalidades dos dicion\u00e1rios"},{"location":"dicionariosstrings/resumos/#tarefa","text":"Ler os dados do clima da cidade de Oxford de acordo com o fornecido em: Oxford.txt Objetivos \u00e0 cumprir: Ler os dados de local e localiza\u00e7\u00e3o do cabe\u00e7alho; Ler os dados das colunas e armazenar em dicion\u00e1rios; Testar para n\u00fameros com anota\u00e7\u00f5es especiais como \"Provisional\"; Separar valores estimados (marcados com *) dos medidos; Fazer um gr\u00e1fico da varia\u00e7\u00e3o da temperatura m\u00e1xima (tmax) e da temperatura m\u00ednima (tmin) por ano. Regras b\u00e1sicas: Documenta\u00e7\u00e3o das fun\u00e7\u00f5es; Levantamento de erros; Fun\u00e7\u00f5es teste.","title":"Tarefa"},{"location":"entradaerros/argumentoslinhacomando/","text":"Argumentos de linha de comando Argumentos de linha de comando s\u00e3o palavras escritas ap\u00f3s o nome do programa. Exemplos de argumentos de linha de comando: Terminal> python meuProg.py arg1 arg2 arg3 ... Terminal> cp -r seuDir ../meuDir Terminal> ls -l Programas Unix ( rm, ls, cp, ...) faz o uso pesado de argumentos de linha de comando, n\u00f3s vamos fazer o mesmo. Como usar argumentos de linha de comando Usando argumentos de linha de comando em nosso programa de exemplo C = 21 ; F = ( 9.0 / 5 ) * C + 32 ; print F O usu\u00e1rio quer especificar C como um argumento de linha de comando: Terminal> python c2f_cml.py 21 69.8 Argumentos de linha de comando s\u00e3o \"palavras\" ap\u00f3s o nome do arquivo do programa e s\u00e3o armazenadas em uma lista que pode ser acessada com sys.argv : import sys C = float ( sys . argv [ 1 ]) #l\u00ea o primeiro argumento de linha de comando F = 9.0 * C / 5 + 32 print F Argumentos de linha de comando s\u00e3o separados por espa\u00e7os Um outro exemplo: import sys ; print sys . argv [ 1 :] Demonstra\u00e7\u00e3o: Terminal> python print_cml.py 21 cadeia de caracteres 1.3 ['21', 'cadeia', 'de', 'caracteres', '1.3'] Terminal> python print_cml.py 21 \"cadeia de caracteres\" 1.3 ['21', 'string with blanks', '1.3'] Notas: Use aspas, como em \"cadeia de caracteres\" para sobrescrever a regra de separar argumentos de linha de comando com espa\u00e7os; Todos os elementos da lista est\u00e3o entre aspas, mostrando que os argumentos de linha de comando s\u00e3o cadeias de caracteres. Exemplo lendo 4 par\u00e2metros da linha de comando s(t)=s_0 + v_0t + {1 \\over 2}at^2 Dados de entrada: $ s_0 $ (posi\u00e7\u00e3o inicial), $ v_0 $ (velocidade inicial), $ a $ (acelera\u00e7\u00e3o constante) e $ t $ (tempo) Dados de sa\u00edda: $ s $ (posi\u00e7\u00e3o atual) Programa: import sys s0 = float ( sys . argv [ 1 ]) v0 = float ( sys . argv [ 2 ]) a = float ( sys . argv [ 3 ]) t = float ( sys . argv [ 4 ]) s = s0 + v0 * t + 0.5 * a * t * t print s Salve como posicao_lcm.py Especifique $ s_0=1 $ m, $ v_0=1 $ m/s, $ a=0.5 $ $ \\hbox{m/s}^2$, e $ t=3 $ s na linha de comando: Terminal> python posicao_lcm.py 1 1 0.5 3 6.25 Argumentos da linha de comando com op\u00e7\u00f5es Muitos programas, especialmente em sistemas Unix, requerem uma s\u00e9rie de argumentos de linha de comando na forma --op\u00e7\u00e3o valor Terminal> python posicao_lcm.py --v0 1 --t 3 --s0 1 --a 0.5 Terminal> python posicao_lcm.py --t 3 A \u00faltima chamada usa os valores padr\u00e3o para v0 , s0 e a , nos apenas entramos com os valores que desejamos mudar. Os pares op\u00e7\u00e3o-valor tornam mais f\u00e1cil de entender o que a entrada \u00e9 (como os argumentos palavra-chave). Programando pares de argumentos op\u00e7\u00e3o valor com o argparse import argparse parser = argparse . ArgumentParser () ## definindo os argumentos de linha de comando parser . add_argument ( '--v0' , '--velocidade_inicial' , type = float , default = 0.0 , help = 'velocidade inicial' ) parser . add_argument ( '--s0' , '--posicao_inicial' , type = float , default = 0.0 , help = 'posi\u00e7\u00e3o inicial' ) parser . add_argument ( '--a' , '--aceleracao' , type = float , default = 1.0 , help = 'acelera\u00e7\u00e3o' ) parser . add_argument ( '--t' , '--tempo' , type = float , default = 1.0 , help = 'tempo' ) ## lendo os argumentos de linha de comando e interpretando args = parser . parse_args () ## extraindo valores s = args . s0 + args . v0 * args . t + 0.5 * args . a * args . t ** 2 ## ou s0 = args . s0 ; v0 = args . v0 ; a = args . a ; t = args . t s = s0 + v0 * t + 0.5 * a * t ** 2 O programa possui argumentos longo e curtos: Terminal> python posicao_lcm.py --v0 1.2 --t 0.2 Terminal> python posicao_lcm.py --velocidade_inicial 1.2 --tempo 0.2","title":"Argumentos linha comando"},{"location":"entradaerros/argumentoslinhacomando/#argumentos-de-linha-de-comando","text":"Argumentos de linha de comando s\u00e3o palavras escritas ap\u00f3s o nome do programa. Exemplos de argumentos de linha de comando: Terminal> python meuProg.py arg1 arg2 arg3 ... Terminal> cp -r seuDir ../meuDir Terminal> ls -l Programas Unix ( rm, ls, cp, ...) faz o uso pesado de argumentos de linha de comando, n\u00f3s vamos fazer o mesmo.","title":"Argumentos de linha de comando"},{"location":"entradaerros/argumentoslinhacomando/#como-usar-argumentos-de-linha-de-comando","text":"Usando argumentos de linha de comando em nosso programa de exemplo C = 21 ; F = ( 9.0 / 5 ) * C + 32 ; print F O usu\u00e1rio quer especificar C como um argumento de linha de comando: Terminal> python c2f_cml.py 21 69.8 Argumentos de linha de comando s\u00e3o \"palavras\" ap\u00f3s o nome do arquivo do programa e s\u00e3o armazenadas em uma lista que pode ser acessada com sys.argv : import sys C = float ( sys . argv [ 1 ]) #l\u00ea o primeiro argumento de linha de comando F = 9.0 * C / 5 + 32 print F","title":"Como usar argumentos de linha de comando"},{"location":"entradaerros/argumentoslinhacomando/#argumentos-de-linha-de-comando-sao-separados-por-espacos","text":"Um outro exemplo: import sys ; print sys . argv [ 1 :] Demonstra\u00e7\u00e3o: Terminal> python print_cml.py 21 cadeia de caracteres 1.3 ['21', 'cadeia', 'de', 'caracteres', '1.3'] Terminal> python print_cml.py 21 \"cadeia de caracteres\" 1.3 ['21', 'string with blanks', '1.3'] Notas: Use aspas, como em \"cadeia de caracteres\" para sobrescrever a regra de separar argumentos de linha de comando com espa\u00e7os; Todos os elementos da lista est\u00e3o entre aspas, mostrando que os argumentos de linha de comando s\u00e3o cadeias de caracteres.","title":"Argumentos de linha de comando s\u00e3o separados por espa\u00e7os"},{"location":"entradaerros/argumentoslinhacomando/#exemplo-lendo-4-parametros-da-linha-de-comando","text":"s(t)=s_0 + v_0t + {1 \\over 2}at^2 Dados de entrada: $ s_0 $ (posi\u00e7\u00e3o inicial), $ v_0 $ (velocidade inicial), $ a $ (acelera\u00e7\u00e3o constante) e $ t $ (tempo) Dados de sa\u00edda: $ s $ (posi\u00e7\u00e3o atual) Programa: import sys s0 = float ( sys . argv [ 1 ]) v0 = float ( sys . argv [ 2 ]) a = float ( sys . argv [ 3 ]) t = float ( sys . argv [ 4 ]) s = s0 + v0 * t + 0.5 * a * t * t print s Salve como posicao_lcm.py Especifique $ s_0=1 $ m, $ v_0=1 $ m/s, $ a=0.5 $ $ \\hbox{m/s}^2$, e $ t=3 $ s na linha de comando: Terminal> python posicao_lcm.py 1 1 0.5 3 6.25","title":"Exemplo lendo 4 par\u00e2metros da linha de comando"},{"location":"entradaerros/argumentoslinhacomando/#argumentos-da-linha-de-comando-com-opcoes","text":"Muitos programas, especialmente em sistemas Unix, requerem uma s\u00e9rie de argumentos de linha de comando na forma --op\u00e7\u00e3o valor Terminal> python posicao_lcm.py --v0 1 --t 3 --s0 1 --a 0.5 Terminal> python posicao_lcm.py --t 3 A \u00faltima chamada usa os valores padr\u00e3o para v0 , s0 e a , nos apenas entramos com os valores que desejamos mudar. Os pares op\u00e7\u00e3o-valor tornam mais f\u00e1cil de entender o que a entrada \u00e9 (como os argumentos palavra-chave).","title":"Argumentos da linha de comando com op\u00e7\u00f5es"},{"location":"entradaerros/argumentoslinhacomando/#programando-pares-de-argumentos-opcao-valor-com-o-argparse","text":"import argparse parser = argparse . ArgumentParser () ## definindo os argumentos de linha de comando parser . add_argument ( '--v0' , '--velocidade_inicial' , type = float , default = 0.0 , help = 'velocidade inicial' ) parser . add_argument ( '--s0' , '--posicao_inicial' , type = float , default = 0.0 , help = 'posi\u00e7\u00e3o inicial' ) parser . add_argument ( '--a' , '--aceleracao' , type = float , default = 1.0 , help = 'acelera\u00e7\u00e3o' ) parser . add_argument ( '--t' , '--tempo' , type = float , default = 1.0 , help = 'tempo' ) ## lendo os argumentos de linha de comando e interpretando args = parser . parse_args () ## extraindo valores s = args . s0 + args . v0 * args . t + 0.5 * args . a * args . t ** 2 ## ou s0 = args . s0 ; v0 = args . v0 ; a = args . a ; t = args . t s = s0 + v0 * t + 0.5 * a * t ** 2 O programa possui argumentos longo e curtos: Terminal> python posicao_lcm.py --v0 1.2 --t 0.2 Terminal> python posicao_lcm.py --velocidade_inicial 1.2 --tempo 0.2","title":"Programando pares de argumentos op\u00e7\u00e3o valor com o argparse"},{"location":"entradaerros/arquivos/","text":"Lendo dados de arquivos Dados cient\u00edficos comumente est\u00e3o dispon\u00edveis em arquivos. N\u00f3s queremos ler os dados para objetos em um programa para poder computar esses dados. Exemplo de um arquivo de dados: 21.8 18.1 19 23 26 17.8 Um n\u00famero em cada linha. Como podemos ler esses n\u00fameros? Lendo arquivos linha por linha Leitura de arquivos b\u00e1sica: do_arquivo = open ( 'dados.txt' , 'r' ) ## abrindo arquivo for linha in do_arquivo : ## fa\u00e7a alguma coisa com a linha do_arquivo . close () ## fechando o arquivo Calculando a soma dos n\u00fameros no arquivo: do_arquivo = open ( 'dados.txt' , 'r' ) ## abrindo arquivo acumulado = 0 for linha in do_arquivo : numero = float ( linha ) ## a linha \u00e9 uma cadeia de caracteres acumulado += numero print acumulado do_arquivo . close () Formas alternativas de ler um arquivo Lendo todas as linhas de uma vez na forma de uma lista de cadeias de caracteres (as linhas): linhas = do_arquivo . readlines () for linha in linhas : ## processa a linha do_arquivo . close () A declara\u00e7\u00e3o moderna with : with open ( 'dados.txt' , 'r' ) as do_arquivo : for linha in do_arquivo : ## processa a linha A velha constru\u00e7\u00e3o while : while True : linha = do_arquivo . readline () if not linha : break ## processa a linha do_arquivo . close () Lendo o arquivo todo em uma cadeia de caracteres: texto = do_arquivo . read () ## processa o texto da string Mais exemplos: >>> do_arquivo = open ( 'tmp.txt' , 'r' ) >>> arquivo_str = do_arquivo . read () >>> arquivo_str 'Linha 1. \\n Linha 2. \\n Linha 3. \\n Linha 4. \\n ' >>> arquivo_str . split () ## separa todas as palavras [ 'Linha' , '1.' , 'Linha' , '2.' , 'Linha' , '3.' , 'Linha' , '4.' ] >>> linha = 'Linha 3. \\n ' >>> linha . split () [ 'Linha' , '3.' ] >>> linha . split ( 'e' ) [ 'Lin' , ' 3. \\n ' ] Texto e n\u00fameros no arquivo A maioria dos arquivos de dados cont\u00e9m texto e n\u00fameros no mesmo arquivo: Arquivo com dados de chuvas: M\u00e9dia de chuvas (em mm) em Roma: 1188 meses entre 1782 e 1970 Jan 81.2 Fev 63.2 Mar 70.3 Abr 55.7 Mai 53.0 Jun 36.4 Jul 17.5 Ago 27.5 Set 60.9 Out 117.7 Nov 111.0 Dez 97.9 Anual 792.9 Como ler tal arquivo?! Salve como dados_chuva_roma.dat Lendo um arquivo contendo texto e n\u00fameros A ideia \u00e9 ler cada linha separando a linha em palavras: meses = [] valores = [] for linha in do_arquivo : palavras = linha . split () ## separando em palavras if palavras [ 0 ] != 'Anual' : meses . append ( palavras [ 0 ]) valores . append ( float ( palavras [ 1 ])) O que est\u00e1 faltando no arquivo acima? Podemos separar em rela\u00e7\u00e3o a qualquer cadeia de caractere s : line.split(s) >>> linha = 'Out 117.7' >>> palavras = linha . split () >>> palavras [ 'Out' , '117.7,' ] >>> type ( palavras [ 1 ]) ## cadeia de caracteres, n\u00e3o um n\u00famero < type 'str' > Programa completo para leitura dos dados de chuva def extrair_dados ( nome_arquivo ): arquivo = open ( nome_arquivo , 'r' ) arquivo . readline () ## pular a primeira linha meses = [] chuva = [] for linha in arquivo : palavras = linha . split () ## palavras[0]: m\u00eas, palavras[1]: chuva meses . append ( palavras [ 0 ]) chuva . append ( float ( palavras [ 1 ])) arquivo . close () meses = meses [: - 1 ] ## removendo a entrada \"Ano\" media_anual = chuva [ - 1 ] ## armazenando a m\u00e9dia anual chuva = chuva [: - 1 ] ## Redefinindo para conter os dados mensais return meses , chuva , media_anual meses , valores , media = extrair_dados ( 'dados_chuva_roma.dat' ) print 'A m\u00e9dia de chuvas para os meses:' for mes , valor in zip ( meses , valores ): print mes , valor print 'A m\u00e9dia de chuva para o ano:' , media Escrevendo dados para arquivos Declara\u00e7\u00f5es b\u00e1sicas: arquivo_saida = open ( nome_arquivo , 'w' ) ## 'w' para escrever! for dado in algumaLista : arquivo_saida . write ( algumTexto + dado + ' \\n ' ) arquivo_saida . close () Se o arquivo j\u00e1 existir e voc\u00ea deseja acrescentar mais dados, pode ser feito com open(nomeArquivo, 'a') Exemplo: escrevendo uma tabela em um arquivo Temos a lista: dados = [[ 0.75 , 0.29619813 , - 0.29619813 , - 0.75 ], [ 0.29619813 , 0.11697778 , - 0.11697778 , - 0.29619813 ], [ - 0.29619813 , - 0.11697778 , 0.11697778 , 0.29619813 ], [ - 0.75 , - 0.29619813 , 0.29619813 , 0.75 ]] Como escrever em um arquivo na forma tabular? arquivo_saida = open ( 'tmp_tabela.dat' , 'w' ) for linha in dados : for coluna in linha : arquivo_saida . write ( ' %14.8f ' % coluna ) arquivo_saida . write ( ' \\n ' ) arquivo_saida . close () Resultado no arquivo: 0.75000000 0.29619813 -0.29619813 -0.75000000 0.29619813 0.11697778 -0.11697778 -0.29619813 -0.29619813 -0.11697778 0.11697778 0.29619813 -0.75000000 -0.29619813 0.29619813 0.75000000 O que \u00e9 um arquivo? Um arquivo \u00e9 uma sequ\u00eancia de caracteres; Para arquivos simples de texto, cada caractere \u00e9 um byte (=8 bits, um bit \u00e9 0 ou 1), o que resultam em $ 2^8=256 $ caracteres diferentes; Arquivos de texto em, por exemplo, Chin\u00eas ou Japon\u00eas precisam de v\u00e1rios bytes para cada caractere; Salve o texto \"ABCD\" em um arquivo no Gedit/Emacs/Editor de Texto/Notepad++ e LibreOffice/Word e examine o arquivo! A leitura de arquivo em Python \u00e9 o ato de ler todos os caracteres ( read ) ou ler linha por linha ( readline , readlines , for linha in objArquivo )","title":"Dados de arquivos"},{"location":"entradaerros/arquivos/#lendo-dados-de-arquivos","text":"Dados cient\u00edficos comumente est\u00e3o dispon\u00edveis em arquivos. N\u00f3s queremos ler os dados para objetos em um programa para poder computar esses dados. Exemplo de um arquivo de dados: 21.8 18.1 19 23 26 17.8 Um n\u00famero em cada linha. Como podemos ler esses n\u00fameros?","title":"Lendo dados de arquivos"},{"location":"entradaerros/arquivos/#lendo-arquivos-linha-por-linha","text":"Leitura de arquivos b\u00e1sica: do_arquivo = open ( 'dados.txt' , 'r' ) ## abrindo arquivo for linha in do_arquivo : ## fa\u00e7a alguma coisa com a linha do_arquivo . close () ## fechando o arquivo Calculando a soma dos n\u00fameros no arquivo: do_arquivo = open ( 'dados.txt' , 'r' ) ## abrindo arquivo acumulado = 0 for linha in do_arquivo : numero = float ( linha ) ## a linha \u00e9 uma cadeia de caracteres acumulado += numero print acumulado do_arquivo . close ()","title":"Lendo arquivos linha por linha"},{"location":"entradaerros/arquivos/#formas-alternativas-de-ler-um-arquivo","text":"Lendo todas as linhas de uma vez na forma de uma lista de cadeias de caracteres (as linhas): linhas = do_arquivo . readlines () for linha in linhas : ## processa a linha do_arquivo . close () A declara\u00e7\u00e3o moderna with : with open ( 'dados.txt' , 'r' ) as do_arquivo : for linha in do_arquivo : ## processa a linha A velha constru\u00e7\u00e3o while : while True : linha = do_arquivo . readline () if not linha : break ## processa a linha do_arquivo . close () Lendo o arquivo todo em uma cadeia de caracteres: texto = do_arquivo . read () ## processa o texto da string Mais exemplos: >>> do_arquivo = open ( 'tmp.txt' , 'r' ) >>> arquivo_str = do_arquivo . read () >>> arquivo_str 'Linha 1. \\n Linha 2. \\n Linha 3. \\n Linha 4. \\n ' >>> arquivo_str . split () ## separa todas as palavras [ 'Linha' , '1.' , 'Linha' , '2.' , 'Linha' , '3.' , 'Linha' , '4.' ] >>> linha = 'Linha 3. \\n ' >>> linha . split () [ 'Linha' , '3.' ] >>> linha . split ( 'e' ) [ 'Lin' , ' 3. \\n ' ]","title":"Formas alternativas de ler um arquivo"},{"location":"entradaerros/arquivos/#texto-e-numeros-no-arquivo","text":"A maioria dos arquivos de dados cont\u00e9m texto e n\u00fameros no mesmo arquivo: Arquivo com dados de chuvas: M\u00e9dia de chuvas (em mm) em Roma: 1188 meses entre 1782 e 1970 Jan 81.2 Fev 63.2 Mar 70.3 Abr 55.7 Mai 53.0 Jun 36.4 Jul 17.5 Ago 27.5 Set 60.9 Out 117.7 Nov 111.0 Dez 97.9 Anual 792.9 Como ler tal arquivo?! Salve como dados_chuva_roma.dat","title":"Texto e n\u00fameros no arquivo"},{"location":"entradaerros/arquivos/#lendo-um-arquivo-contendo-texto-e-numeros","text":"A ideia \u00e9 ler cada linha separando a linha em palavras: meses = [] valores = [] for linha in do_arquivo : palavras = linha . split () ## separando em palavras if palavras [ 0 ] != 'Anual' : meses . append ( palavras [ 0 ]) valores . append ( float ( palavras [ 1 ])) O que est\u00e1 faltando no arquivo acima? Podemos separar em rela\u00e7\u00e3o a qualquer cadeia de caractere s : line.split(s) >>> linha = 'Out 117.7' >>> palavras = linha . split () >>> palavras [ 'Out' , '117.7,' ] >>> type ( palavras [ 1 ]) ## cadeia de caracteres, n\u00e3o um n\u00famero < type 'str' >","title":"Lendo um arquivo contendo texto e n\u00fameros"},{"location":"entradaerros/arquivos/#programa-completo-para-leitura-dos-dados-de-chuva","text":"def extrair_dados ( nome_arquivo ): arquivo = open ( nome_arquivo , 'r' ) arquivo . readline () ## pular a primeira linha meses = [] chuva = [] for linha in arquivo : palavras = linha . split () ## palavras[0]: m\u00eas, palavras[1]: chuva meses . append ( palavras [ 0 ]) chuva . append ( float ( palavras [ 1 ])) arquivo . close () meses = meses [: - 1 ] ## removendo a entrada \"Ano\" media_anual = chuva [ - 1 ] ## armazenando a m\u00e9dia anual chuva = chuva [: - 1 ] ## Redefinindo para conter os dados mensais return meses , chuva , media_anual meses , valores , media = extrair_dados ( 'dados_chuva_roma.dat' ) print 'A m\u00e9dia de chuvas para os meses:' for mes , valor in zip ( meses , valores ): print mes , valor print 'A m\u00e9dia de chuva para o ano:' , media","title":"Programa completo para leitura dos dados de chuva"},{"location":"entradaerros/arquivos/#escrevendo-dados-para-arquivos","text":"Declara\u00e7\u00f5es b\u00e1sicas: arquivo_saida = open ( nome_arquivo , 'w' ) ## 'w' para escrever! for dado in algumaLista : arquivo_saida . write ( algumTexto + dado + ' \\n ' ) arquivo_saida . close () Se o arquivo j\u00e1 existir e voc\u00ea deseja acrescentar mais dados, pode ser feito com open(nomeArquivo, 'a')","title":"Escrevendo dados para arquivos"},{"location":"entradaerros/arquivos/#exemplo-escrevendo-uma-tabela-em-um-arquivo","text":"Temos a lista: dados = [[ 0.75 , 0.29619813 , - 0.29619813 , - 0.75 ], [ 0.29619813 , 0.11697778 , - 0.11697778 , - 0.29619813 ], [ - 0.29619813 , - 0.11697778 , 0.11697778 , 0.29619813 ], [ - 0.75 , - 0.29619813 , 0.29619813 , 0.75 ]] Como escrever em um arquivo na forma tabular? arquivo_saida = open ( 'tmp_tabela.dat' , 'w' ) for linha in dados : for coluna in linha : arquivo_saida . write ( ' %14.8f ' % coluna ) arquivo_saida . write ( ' \\n ' ) arquivo_saida . close () Resultado no arquivo: 0.75000000 0.29619813 -0.29619813 -0.75000000 0.29619813 0.11697778 -0.11697778 -0.29619813 -0.29619813 -0.11697778 0.11697778 0.29619813 -0.75000000 -0.29619813 0.29619813 0.75000000","title":"Exemplo: escrevendo uma tabela em um arquivo"},{"location":"entradaerros/arquivos/#o-que-e-um-arquivo","text":"Um arquivo \u00e9 uma sequ\u00eancia de caracteres; Para arquivos simples de texto, cada caractere \u00e9 um byte (=8 bits, um bit \u00e9 0 ou 1), o que resultam em $ 2^8=256 $ caracteres diferentes; Arquivos de texto em, por exemplo, Chin\u00eas ou Japon\u00eas precisam de v\u00e1rios bytes para cada caractere; Salve o texto \"ABCD\" em um arquivo no Gedit/Emacs/Editor de Texto/Notepad++ e LibreOffice/Word e examine o arquivo! A leitura de arquivo em Python \u00e9 o ato de ler todos os caracteres ( read ) ou ler linha por linha ( readline , readlines , for linha in objArquivo )","title":"O que \u00e9 um arquivo?"},{"location":"entradaerros/entradaerros/","text":"Entrada do usu\u00e1rio e manipula\u00e7\u00e3o de erros Deixe para depois... fa\u00e7a agora gen\u00e9rico! Dados de entrada pode ser definidos diretamente no programa, ou seja, especificar explicitamente os valores de vari\u00e1veis: A = 0.1 ou w = 1 , o que pode ser adequado para pequenos programas ou programas espec\u00edficos. No geral, \u00e9 considerado uma boa pr\u00e1tica deixar que o usu\u00e1rio forne\u00e7a os dados de entrada quando o programa est\u00e1 rodando, sendo desnecess\u00e1rio modificar o programa propriamente dito para um novo conjunto de dados. Dados de entrada no c\u00f3digo At\u00e9 agora, v\u00ednhamos escrevendo nossos dados de entrada diretamente no c\u00f3digo. y = v_0t - 0.5gt^2 v0 = 5 g = 9.81 t = 0.6 y = v0 * t - 0.5 * g * t ** 2 print y Notas: Dados de entrada foram explicitamente definidos; Mudan\u00e7as nos dados de entrada requer uma edi\u00e7\u00e3o do c\u00f3digo; Isso \u00e9 considerado uma programa\u00e7\u00e3o ruim, pois a edi\u00e7\u00e3o de programas pode facilmente introduzir erros no c\u00f3digo. Regra: leia a entrada do usu\u00e1rio, evite editar um programa funcional! Como programas profissionais obt\u00e9m suas entradas? Considere um navegador da internet: como voc\u00ea define um endere\u00e7o da web? Como voc\u00ea modifica o zoom? Voc\u00ea n\u00e3o vai editar o c\u00f3digo fonte do programa para isso... Como podemos especificar dados de entrada em programas? Valores definidos explicitamente; Perguntar ao usu\u00e1rio e ler as respostas; Ler os argumentos de linha de comando; Ler dados de um arquivo. Obtendo a entrada de perguntas e respostas Programa de exemplo: C = 21 ; F = ( 9.0 / 5 ) * C + 32 ; print F Ideia: fa\u00e7a o programa perguntar ao usu\u00e1rio \"C = ?\", leia a resposta do usu\u00e1rio e atribua essa resposta a vari\u00e1vel C. C = raw_input ( 'C=? ' ) ## C becomes a string C = float ( C ) ## convert to float so we can compute F = ( 9. / 5 ) * C + 32 print F Rodando em uma janela no terminal: Terminal> python c2f_pr.py C=? 21 69.8 Outro exemplo: imprima os primeiros n n\u00fameros pares n = int ( raw_input ( 'n=? ' )) for i in range ( 2 , 2 * n + 1 , 2 ): print i #ou: print range ( 2 , 2 * n + 1 , 2 ) #ou: for i in range ( 1 , n + 1 ): print 2 * i","title":"Entrada de dados"},{"location":"entradaerros/entradaerros/#entrada-do-usuario-e-manipulacao-de-erros","text":"Deixe para depois... fa\u00e7a agora gen\u00e9rico! Dados de entrada pode ser definidos diretamente no programa, ou seja, especificar explicitamente os valores de vari\u00e1veis: A = 0.1 ou w = 1 , o que pode ser adequado para pequenos programas ou programas espec\u00edficos. No geral, \u00e9 considerado uma boa pr\u00e1tica deixar que o usu\u00e1rio forne\u00e7a os dados de entrada quando o programa est\u00e1 rodando, sendo desnecess\u00e1rio modificar o programa propriamente dito para um novo conjunto de dados.","title":"Entrada do usu\u00e1rio e manipula\u00e7\u00e3o de erros"},{"location":"entradaerros/entradaerros/#dados-de-entrada-no-codigo","text":"At\u00e9 agora, v\u00ednhamos escrevendo nossos dados de entrada diretamente no c\u00f3digo. y = v_0t - 0.5gt^2 v0 = 5 g = 9.81 t = 0.6 y = v0 * t - 0.5 * g * t ** 2 print y Notas: Dados de entrada foram explicitamente definidos; Mudan\u00e7as nos dados de entrada requer uma edi\u00e7\u00e3o do c\u00f3digo; Isso \u00e9 considerado uma programa\u00e7\u00e3o ruim, pois a edi\u00e7\u00e3o de programas pode facilmente introduzir erros no c\u00f3digo. Regra: leia a entrada do usu\u00e1rio, evite editar um programa funcional!","title":"Dados de entrada no c\u00f3digo"},{"location":"entradaerros/entradaerros/#como-programas-profissionais-obtem-suas-entradas","text":"Considere um navegador da internet: como voc\u00ea define um endere\u00e7o da web? Como voc\u00ea modifica o zoom? Voc\u00ea n\u00e3o vai editar o c\u00f3digo fonte do programa para isso...","title":"Como programas profissionais obt\u00e9m suas entradas?"},{"location":"entradaerros/entradaerros/#como-podemos-especificar-dados-de-entrada-em-programas","text":"Valores definidos explicitamente; Perguntar ao usu\u00e1rio e ler as respostas; Ler os argumentos de linha de comando; Ler dados de um arquivo.","title":"Como podemos especificar dados de entrada em programas?"},{"location":"entradaerros/entradaerros/#obtendo-a-entrada-de-perguntas-e-respostas","text":"Programa de exemplo: C = 21 ; F = ( 9.0 / 5 ) * C + 32 ; print F Ideia: fa\u00e7a o programa perguntar ao usu\u00e1rio \"C = ?\", leia a resposta do usu\u00e1rio e atribua essa resposta a vari\u00e1vel C. C = raw_input ( 'C=? ' ) ## C becomes a string C = float ( C ) ## convert to float so we can compute F = ( 9. / 5 ) * C + 32 print F Rodando em uma janela no terminal: Terminal> python c2f_pr.py C=? 21 69.8","title":"Obtendo a entrada de perguntas e respostas"},{"location":"entradaerros/entradaerros/#outro-exemplo-imprima-os-primeiros-n-numeros-pares","text":"n = int ( raw_input ( 'n=? ' )) for i in range ( 2 , 2 * n + 1 , 2 ): print i #ou: print range ( 2 , 2 * n + 1 , 2 ) #ou: for i in range ( 1 , n + 1 ): print 2 * i","title":"Outro exemplo: imprima os primeiros n n\u00fameros pares"},{"location":"entradaerros/erros/","text":"Como evitar erros de entrada de usu\u00e1rio Voltando ao programa C2F: import sys C = float ( sys . argv [ 1 ]) F = 5. / 9 * C + 32 print F Nosso programa para com uma mensagem de erro estranha quando n\u00e3o \u00e9 passado nada como argumento de linha de comando: Terminal> python c2f.py Traceback (most recent call last): File \"c2f.py\", line 2, in ? C = float(sys.argv[1]) IndexError: list index out of range Porque? O usu\u00e1rio esquece de escrever o argumento de linha de comando; sys.argv ent\u00e3o possui apenas um elemento, sys.argv[0] , que \u00e9 o nome do programa c2f.py ; \u00cdndice 1, em sys.argv[1] , aponta para um elemento inexistente na lista sys.argv ; Qualquer \u00edndice correspondente a um elemento inexistente leva a um IndexError . N\u00f3s devemos manipular erros de entrada! Como podemos ter controle, explicar o que est\u00e1 errado na entrada e parar o programa sem uma mensagem de erro estranha? ## Program c2f_ctrl.py import sys if len ( sys . argv ) < 2 : print 'Voc\u00ea n\u00e3o passou nenhum argumento na linha de comando!' sys . exit ( 1 ) ## abortando F = 9.0 * C / 5 + 32 print ' %g C is %.1f F' % ( C , F ) Terminal> python c2f_ctrl.py Voc\u00ea n\u00e3o passou nenhum argumento na linha de comando! Exce\u00e7\u00f5es como uma alternativa para ramifica\u00e7\u00f5es Ao inv\u00e9s de testar se algo est\u00e1 errado, recuperar do erro e fazer o que era para ser feito \u00e9 comum em python (e muitas outras linguagens) tentar fazer o que deveria ser feito e se falhar, recuperar do erro. Esse princ\u00edpio faz o uso do bloco try-except try : < declara\u00e7\u00f5es que queremos executar > except : < declara\u00e7\u00f5es para manipular erros > Se algo vai errado no bloco try , o Python levanta uma exce\u00e7\u00e3o e a execu\u00e7\u00e3o pula imediatamente para o bloco except . O programa de convers\u00e3o de temperatura com try-except Tente ler C da linha de comando, se falhar, avise ao usu\u00e1rio e aborte a execu\u00e7\u00e3o. Salve como c2f_try_except.py: import sys try : C = float ( sys . argv [ 1 ]) except : print 'Voc\u00ea falhou ao passar um argumento de linha de comando!' sys . exit ( 1 ) ## aborta F = 9.0 * C / 5 + 32 print ' %g C is %.1f F' % ( C , F ) Execu\u00e7\u00e3o: Terminal> python c2f_try_except.py Voc\u00ea falhou ao passar um argumento de linha de comando! Terminal> python c2f_try_except.py 21C Voc\u00ea falhou ao passar um argumento de linha de comando! Um bom estilo de programa\u00e7\u00e3o testa por exce\u00e7\u00f5es espec\u00edficas try : C = float ( sys . argv [ 1 ]) except IndexError : print 'Voc\u00ea falhou ao passar um argumento de linha de comando!' Se tivermos um \u00edndice fora dos limites em sys.argv uma exce\u00e7\u00e3o IndexError \u00e9 levantada e a execu\u00e7\u00e3o salta automaticamente para o bloco except . Se qualquer outra exce\u00e7\u00e3o for levantada, o Python aborta a execu\u00e7\u00e3o. Terminal> python c2f_try_except.py 21C Traceback (most recent call last): File \"c2f_try_except.py\", line 3, in <module> C = float(sys.argv[1]) ValueError: invalid literal for float(): 21C Testando para as exce\u00e7\u00f5es IndexError e ValueError import sys try : C = float ( sys . argv [ 1 ]) except IndexError : print 'Nenhum argumento na linha de comando para C!' sys . exit ( 1 ) ## abort execution except ValueError : print 'Graus Celsius devem ser um n\u00famero, n\u00e3o \" %s \"' % sys . argv [ 1 ] sys . exit ( 1 ) F = 9.0 * C / 5 + 32 print ' %g C \u00e9 %.1f F' % ( C , F ) Execu\u00e7\u00f5es: Terminal> python c2f_try_except.py Nenhum argumento na linha de comando para C! Terminal> python c2f_try_except.py 21C Graus Celsius devem ser um n\u00famero, n\u00e3o \"21C\" O programador pode levantar exce\u00e7\u00f5es Ao inv\u00e9s de simplesmente deixar o Python levantar exce\u00e7\u00f5es, n\u00f3s podemos levantar a nossa pr\u00f3pria e adaptar a mensagem do problema em m\u00e3os. Dois exemplos: pegando uma exce\u00e7\u00e3o, mas levantando uma nova exce\u00e7\u00e3o com uma mensagem de erro melhorada; levantando uma exce\u00e7\u00e3o por causa de entrada de dados errada. Sintaxe b\u00e1sica: raise ExceptionType(mensagem) Exemplos no levantamento de exce\u00e7\u00f5es com mensagens melhores def ler_C (): try : C = float ( sys . argv [ 1 ]) except IndexError : ## levantando novamente, mas com explica\u00e7\u00e3o espec\u00edfica: raise IndexError ( 'Graus Celsius dever ser fornecidos na linha de comando' ) except ValueError : ## levantando novamente, mas com explica\u00e7\u00e3o espec\u00edfica: raise ValueError ( 'Graus Celsius devem ser um n\u00famero, n\u00e3o \" %s \"' % sys . argv [ 1 ]) ## C pode ser lido como corretamente como n\u00famero, mas com valor errado: if C < - 273.15 : raise ValueError ( 'C= %g n\u00e3o \u00e9 um valor f\u00edsico!' % C ) return C Chamando a fun\u00e7\u00e3o anterior e rodando o programa try : C = ler_C () F = 9.0 * C / 5 + 32 print ' %g C \u00e9 %.1f F' % ( C , F ) except ( IndexError , ValueError ) as e : ## mostre a exce\u00e7\u00e3o e pare o programa print e sys . exit ( 1 ) Execu\u00e7\u00f5es: Terminal> c2f_try_except.py Graus Celsius dever ser fornecidos na linha de comando Terminal> c2f_try_except.py 21C Graus Celsius devem ser um n\u00famero, n\u00e3o \"21C\" Terminal> c2f_try_except.py -500 C=-500 n\u00e3o \u00e9 um valor f\u00edsico! Terminal> c2f_try_except.py 21 21C \u00e9 69.8F","title":"Erros"},{"location":"entradaerros/erros/#como-evitar-erros-de-entrada-de-usuario","text":"Voltando ao programa C2F: import sys C = float ( sys . argv [ 1 ]) F = 5. / 9 * C + 32 print F Nosso programa para com uma mensagem de erro estranha quando n\u00e3o \u00e9 passado nada como argumento de linha de comando: Terminal> python c2f.py Traceback (most recent call last): File \"c2f.py\", line 2, in ? C = float(sys.argv[1]) IndexError: list index out of range Porque? O usu\u00e1rio esquece de escrever o argumento de linha de comando; sys.argv ent\u00e3o possui apenas um elemento, sys.argv[0] , que \u00e9 o nome do programa c2f.py ; \u00cdndice 1, em sys.argv[1] , aponta para um elemento inexistente na lista sys.argv ; Qualquer \u00edndice correspondente a um elemento inexistente leva a um IndexError .","title":"Como evitar erros de entrada de usu\u00e1rio"},{"location":"entradaerros/erros/#nos-devemos-manipular-erros-de-entrada","text":"Como podemos ter controle, explicar o que est\u00e1 errado na entrada e parar o programa sem uma mensagem de erro estranha? ## Program c2f_ctrl.py import sys if len ( sys . argv ) < 2 : print 'Voc\u00ea n\u00e3o passou nenhum argumento na linha de comando!' sys . exit ( 1 ) ## abortando F = 9.0 * C / 5 + 32 print ' %g C is %.1f F' % ( C , F ) Terminal> python c2f_ctrl.py Voc\u00ea n\u00e3o passou nenhum argumento na linha de comando!","title":"N\u00f3s devemos manipular erros de entrada!"},{"location":"entradaerros/erros/#excecoes-como-uma-alternativa-para-ramificacoes","text":"Ao inv\u00e9s de testar se algo est\u00e1 errado, recuperar do erro e fazer o que era para ser feito \u00e9 comum em python (e muitas outras linguagens) tentar fazer o que deveria ser feito e se falhar, recuperar do erro. Esse princ\u00edpio faz o uso do bloco try-except try : < declara\u00e7\u00f5es que queremos executar > except : < declara\u00e7\u00f5es para manipular erros > Se algo vai errado no bloco try , o Python levanta uma exce\u00e7\u00e3o e a execu\u00e7\u00e3o pula imediatamente para o bloco except .","title":"Exce\u00e7\u00f5es como uma alternativa para ramifica\u00e7\u00f5es"},{"location":"entradaerros/erros/#o-programa-de-conversao-de-temperatura-com-try-except","text":"Tente ler C da linha de comando, se falhar, avise ao usu\u00e1rio e aborte a execu\u00e7\u00e3o. Salve como c2f_try_except.py: import sys try : C = float ( sys . argv [ 1 ]) except : print 'Voc\u00ea falhou ao passar um argumento de linha de comando!' sys . exit ( 1 ) ## aborta F = 9.0 * C / 5 + 32 print ' %g C is %.1f F' % ( C , F ) Execu\u00e7\u00e3o: Terminal> python c2f_try_except.py Voc\u00ea falhou ao passar um argumento de linha de comando! Terminal> python c2f_try_except.py 21C Voc\u00ea falhou ao passar um argumento de linha de comando!","title":"O programa de convers\u00e3o de temperatura com try-except"},{"location":"entradaerros/erros/#um-bom-estilo-de-programacao-testa-por-excecoes-especificas","text":"try : C = float ( sys . argv [ 1 ]) except IndexError : print 'Voc\u00ea falhou ao passar um argumento de linha de comando!' Se tivermos um \u00edndice fora dos limites em sys.argv uma exce\u00e7\u00e3o IndexError \u00e9 levantada e a execu\u00e7\u00e3o salta automaticamente para o bloco except . Se qualquer outra exce\u00e7\u00e3o for levantada, o Python aborta a execu\u00e7\u00e3o. Terminal> python c2f_try_except.py 21C Traceback (most recent call last): File \"c2f_try_except.py\", line 3, in <module> C = float(sys.argv[1]) ValueError: invalid literal for float(): 21C","title":"Um bom estilo de programa\u00e7\u00e3o testa por exce\u00e7\u00f5es espec\u00edficas"},{"location":"entradaerros/erros/#testando-para-as-excecoes-indexerror-e-valueerror","text":"import sys try : C = float ( sys . argv [ 1 ]) except IndexError : print 'Nenhum argumento na linha de comando para C!' sys . exit ( 1 ) ## abort execution except ValueError : print 'Graus Celsius devem ser um n\u00famero, n\u00e3o \" %s \"' % sys . argv [ 1 ] sys . exit ( 1 ) F = 9.0 * C / 5 + 32 print ' %g C \u00e9 %.1f F' % ( C , F ) Execu\u00e7\u00f5es: Terminal> python c2f_try_except.py Nenhum argumento na linha de comando para C! Terminal> python c2f_try_except.py 21C Graus Celsius devem ser um n\u00famero, n\u00e3o \"21C\"","title":"Testando para as exce\u00e7\u00f5es IndexError e ValueError"},{"location":"entradaerros/erros/#o-programador-pode-levantar-excecoes","text":"Ao inv\u00e9s de simplesmente deixar o Python levantar exce\u00e7\u00f5es, n\u00f3s podemos levantar a nossa pr\u00f3pria e adaptar a mensagem do problema em m\u00e3os. Dois exemplos: pegando uma exce\u00e7\u00e3o, mas levantando uma nova exce\u00e7\u00e3o com uma mensagem de erro melhorada; levantando uma exce\u00e7\u00e3o por causa de entrada de dados errada. Sintaxe b\u00e1sica: raise ExceptionType(mensagem)","title":"O programador pode levantar exce\u00e7\u00f5es"},{"location":"entradaerros/erros/#exemplos-no-levantamento-de-excecoes-com-mensagens-melhores","text":"def ler_C (): try : C = float ( sys . argv [ 1 ]) except IndexError : ## levantando novamente, mas com explica\u00e7\u00e3o espec\u00edfica: raise IndexError ( 'Graus Celsius dever ser fornecidos na linha de comando' ) except ValueError : ## levantando novamente, mas com explica\u00e7\u00e3o espec\u00edfica: raise ValueError ( 'Graus Celsius devem ser um n\u00famero, n\u00e3o \" %s \"' % sys . argv [ 1 ]) ## C pode ser lido como corretamente como n\u00famero, mas com valor errado: if C < - 273.15 : raise ValueError ( 'C= %g n\u00e3o \u00e9 um valor f\u00edsico!' % C ) return C","title":"Exemplos no levantamento de exce\u00e7\u00f5es com mensagens melhores"},{"location":"entradaerros/erros/#chamando-a-funcao-anterior-e-rodando-o-programa","text":"try : C = ler_C () F = 9.0 * C / 5 + 32 print ' %g C \u00e9 %.1f F' % ( C , F ) except ( IndexError , ValueError ) as e : ## mostre a exce\u00e7\u00e3o e pare o programa print e sys . exit ( 1 ) Execu\u00e7\u00f5es: Terminal> c2f_try_except.py Graus Celsius dever ser fornecidos na linha de comando Terminal> c2f_try_except.py 21C Graus Celsius devem ser um n\u00famero, n\u00e3o \"21C\" Terminal> c2f_try_except.py -500 C=-500 n\u00e3o \u00e9 um valor f\u00edsico! Terminal> c2f_try_except.py 21 21C \u00e9 69.8F","title":"Chamando a fun\u00e7\u00e3o anterior e rodando o programa"},{"location":"entradaerros/eval/","text":"Fun\u00e7\u00e3o eval em cadeias de caracteres A fun\u00e7\u00e3o eval() transforma uma cadeia de caracteres em c\u00f3digo utiliz\u00e1vel: >>> s = '1+2' >>> r = eval ( s ) >>> r 3 >>> type ( r ) < type 'int' > >>> r = eval ( '[1, 6, 7.5] + [1, 2]' ) >>> r [ 1 , 6 , 7.5 , 1 , 2 ] >>> type ( r ) < type 'list' > Seja cuidadoso com o eval Cuidado com o eval e os valores da cadeia de caracteres. Queremos r = 'programa de valores' . Se escrevermos: r = eval ( 'programa de valores' ) \u00c9 a mesma coisa que: r = programa de valores Que \u00e9 uma express\u00e3o inv\u00e1lida e uma sintaze ilegal! A solu\u00e7\u00e3o \u00e9 colocar aspas dentro de aspas: s = \"'programa de valores'\" r = eval ( s ) ## r se torna 'programa de valores' Com eval um pequeno programa pode muito Programa: i1 = eval ( raw_input ( 'Valor 1: ' )) i2 = eval ( raw_input ( 'Valor 2: ' )) r = i1 + i2 print ' %s + %s se torna %s \\n com valor %s ' % \\ ( type ( i1 ), type ( i2 ), type ( r ), r ) Podemos adicionar inteiros e pontos flutuantes: Valor 1: 1 Valor 2: 3.0 <type 'int'> + <type 'float'> se torna <type 'float'> com valor 4 Ou duas listas: Valor 1: [1,2] Valor 2: [-1,0,1] <type 'list'> + <type 'list'> se torna <type 'list'> com valor [1, 2, -1, 0, 1] Grande flexibilidade do eval grande problema Sua grande flexibilidade tamb\u00e9m quebra rapidamente programas: Valor 1: (1,2) Valor 2: [3,4] Traceback (most recent call last): r = i1 + i2 TypeError: can only concatenate tuple (not \"list\") to tuple Valor 1: um Traceback (most recent call last): i1 = eval(raw_input('operand 1: ')) File \"<string>\", line 1, in <module> NameError: name 'um' is not defined Valor 1: 4 Valor 2: 'Oi, senhor eval!' Traceback (most recent call last): r = i1 + i2 TypeError: unsupported operand type(s) for +: 'int' and 'str'","title":"Fun\u00e7\u00e3o eval"},{"location":"entradaerros/eval/#funcao-eval-em-cadeias-de-caracteres","text":"A fun\u00e7\u00e3o eval() transforma uma cadeia de caracteres em c\u00f3digo utiliz\u00e1vel: >>> s = '1+2' >>> r = eval ( s ) >>> r 3 >>> type ( r ) < type 'int' > >>> r = eval ( '[1, 6, 7.5] + [1, 2]' ) >>> r [ 1 , 6 , 7.5 , 1 , 2 ] >>> type ( r ) < type 'list' >","title":"Fun\u00e7\u00e3o eval em cadeias de caracteres"},{"location":"entradaerros/eval/#seja-cuidadoso-com-o-eval","text":"Cuidado com o eval e os valores da cadeia de caracteres. Queremos r = 'programa de valores' . Se escrevermos: r = eval ( 'programa de valores' ) \u00c9 a mesma coisa que: r = programa de valores Que \u00e9 uma express\u00e3o inv\u00e1lida e uma sintaze ilegal! A solu\u00e7\u00e3o \u00e9 colocar aspas dentro de aspas: s = \"'programa de valores'\" r = eval ( s ) ## r se torna 'programa de valores'","title":"Seja cuidadoso com o eval"},{"location":"entradaerros/eval/#com-eval-um-pequeno-programa-pode-muito","text":"Programa: i1 = eval ( raw_input ( 'Valor 1: ' )) i2 = eval ( raw_input ( 'Valor 2: ' )) r = i1 + i2 print ' %s + %s se torna %s \\n com valor %s ' % \\ ( type ( i1 ), type ( i2 ), type ( r ), r ) Podemos adicionar inteiros e pontos flutuantes: Valor 1: 1 Valor 2: 3.0 <type 'int'> + <type 'float'> se torna <type 'float'> com valor 4 Ou duas listas: Valor 1: [1,2] Valor 2: [-1,0,1] <type 'list'> + <type 'list'> se torna <type 'list'> com valor [1, 2, -1, 0, 1]","title":"Com eval um pequeno programa pode muito"},{"location":"entradaerros/eval/#grande-flexibilidade-do-eval-grande-problema","text":"Sua grande flexibilidade tamb\u00e9m quebra rapidamente programas: Valor 1: (1,2) Valor 2: [3,4] Traceback (most recent call last): r = i1 + i2 TypeError: can only concatenate tuple (not \"list\") to tuple Valor 1: um Traceback (most recent call last): i1 = eval(raw_input('operand 1: ')) File \"<string>\", line 1, in <module> NameError: name 'um' is not defined Valor 1: 4 Valor 2: 'Oi, senhor eval!' Traceback (most recent call last): r = i1 + i2 TypeError: unsupported operand type(s) for +: 'int' and 'str'","title":"Grande flexibilidade do eval grande problema"},{"location":"entradaerros/exec/","text":"Uma fun\u00e7\u00e3o similar exec eval(s) avalia uma express\u00e3o s ; eval('r = 1 + 1') \u00e9 ilegal porque \u00e9 uma declara\u00e7\u00e3o, n\u00e3o uma express\u00e3o; ...mas podemos usa o exec para transformar uma ou mais declara\u00e7\u00f5es completas para dentro do c\u00f3digo. declaracao = 'r = 1+1' #armazena a declara\u00e7\u00e3o em uma cadeia de caracteres exec ( declaracao ) print r #imprime 2 Para c\u00f3digos longos podemos utilizar as cadeias de caracteres multilinha: import math umcodigo = ''' def f(t): term1 = math.exp(-a*t)*math.sin(w1*x) term2 = 2*math.sin(w2*x) return term1 + term2 ''' exec ( umcodigo ) #executa a cadeia de caracteres como um c\u00f3digo Python exec para fun\u00e7\u00e3o em tempo de execu\u00e7\u00e3o O exec pode ser utilizado para contruir uma fun\u00e7\u00e3o em tempo de execu\u00e7\u00e3o. Embutindo uma formula de usu\u00e1rio em uma fun\u00e7\u00e3o Python: import math formula = raw_input ( 'Escreva uma f\u00f3rmula envolvendo x: ' ) codigo = \"\"\" def f(x): return %s \"\"\" % formula exec ( codigo ) #converte a cadeia de caracteres em c\u00f3digo #pergunte ao usu\u00e1rio valores de x e avalie f(x) x = 0 while x is not None : x = eval ( raw_input ( 'Valor de x (Digite None para sair): ' )) if x is not None : y = f ( x ) print 'f( %g )= %g ' % ( x , y ) Enquanto o programa est\u00e1 rodando o usu\u00e1rio digita a equa\u00e7\u00e3o, que se transforma em uma fun\u00e7\u00e3o Python, ent\u00e3o o usu\u00e1rio fornece um valor para x at\u00e9 que a resposta seja None , e o programa avalia a fun\u00e7\u00e3o f(x). O programador n\u00e3o tem id\u00e9ia da escolha do usu\u00e1rio para a fun\u00e7\u00e3o f(x) quando ele escreve o programa!","title":"Fun\u00e7\u00e3o exec"},{"location":"entradaerros/exec/#uma-funcao-similar-exec","text":"eval(s) avalia uma express\u00e3o s ; eval('r = 1 + 1') \u00e9 ilegal porque \u00e9 uma declara\u00e7\u00e3o, n\u00e3o uma express\u00e3o; ...mas podemos usa o exec para transformar uma ou mais declara\u00e7\u00f5es completas para dentro do c\u00f3digo. declaracao = 'r = 1+1' #armazena a declara\u00e7\u00e3o em uma cadeia de caracteres exec ( declaracao ) print r #imprime 2 Para c\u00f3digos longos podemos utilizar as cadeias de caracteres multilinha: import math umcodigo = ''' def f(t): term1 = math.exp(-a*t)*math.sin(w1*x) term2 = 2*math.sin(w2*x) return term1 + term2 ''' exec ( umcodigo ) #executa a cadeia de caracteres como um c\u00f3digo Python","title":"Uma fun\u00e7\u00e3o similar exec"},{"location":"entradaerros/exec/#exec-para-funcao-em-tempo-de-execucao","text":"O exec pode ser utilizado para contruir uma fun\u00e7\u00e3o em tempo de execu\u00e7\u00e3o. Embutindo uma formula de usu\u00e1rio em uma fun\u00e7\u00e3o Python: import math formula = raw_input ( 'Escreva uma f\u00f3rmula envolvendo x: ' ) codigo = \"\"\" def f(x): return %s \"\"\" % formula exec ( codigo ) #converte a cadeia de caracteres em c\u00f3digo #pergunte ao usu\u00e1rio valores de x e avalie f(x) x = 0 while x is not None : x = eval ( raw_input ( 'Valor de x (Digite None para sair): ' )) if x is not None : y = f ( x ) print 'f( %g )= %g ' % ( x , y ) Enquanto o programa est\u00e1 rodando o usu\u00e1rio digita a equa\u00e7\u00e3o, que se transforma em uma fun\u00e7\u00e3o Python, ent\u00e3o o usu\u00e1rio fornece um valor para x at\u00e9 que a resposta seja None , e o programa avalia a fun\u00e7\u00e3o f(x). O programador n\u00e3o tem id\u00e9ia da escolha do usu\u00e1rio para a fun\u00e7\u00e3o f(x) quando ele escreve o programa!","title":"exec para fun\u00e7\u00e3o em tempo de execu\u00e7\u00e3o"},{"location":"entradaerros/interfacesgraficas/","text":"Interfaces gr\u00e1ficas de usu\u00e1rio A maioria dos programas hoje em dia recebem entradas de uma interface gr\u00e1fica de usu\u00e1rio (graphical user interfaces - GUI), que consiste em janelas com elementos gr\u00e1ficos como bot\u00f5es, menus, campos de texto, etc. Porque no aprendemos a fazer tais programas? GUI demandam uma programa\u00e7\u00e3o extra muito complicada; Programadores experientes preferem a entrada por linha de comando; Programas com entradas por linha de comando ou arquivos podem ser facilmente combinados uns com os outros, o que \u00e9 dif\u00edcil em programas baseados em GUI. Entrada por linha de comando provavelmente vai servir para todos os seus prop\u00f3sitos na sua pesquisa de p\u00f3s-gradua\u00e7\u00e3o! A n\u00e3o ser que sua pesquisa envolva diretamente a programa\u00e7\u00e3o com GUI... Ent\u00e3o, vamos dar uma olhada com se faz! Um programa de convers\u00e3o Celsius-Fahrenheit com GUI Os valores em Celsius podem ser colocados como n\u00fameros em um campo e clicando-se em um bot\u00e3o \"\u00e9\" calcula-se a correspondente temperatura em Fahrenheit. Para isso, vamos usar o pacote GUI do python chamado Tkinter: import Tkinter as tk #from Tkinter import * root = tk . Tk () #iniciando o Tkinter #criando o campo de entrada \u00e0 esquerda C_entry = tk . Entry ( root , width = 4 ) C_entry . pack ( side = 'left' ) #criando o texto Celsius logo ap\u00f3s o campo de entrada Cunit_label = tk . Label ( root , text = 'Celsius' ) Cunit_label . pack ( side = 'left' ) def compute (): C = float ( C_entry . get ()) F = ( 9. / 5 ) * C + 32 F_label . configure ( text = ' %g ' % F ) #criando o bot\u00e3o para calcular o resultado compute = tk . Button ( root , text = ' \u00e9 ' , command = compute ) compute . pack ( side = 'left' , padx = 4 ) #criando um texto para a resposta F_label = tk . Label ( root , width = 4 ) F_label . pack ( side = 'left' ) #criando o texto Fahrenheit Funit_label = tk . Label ( root , text = 'Fahrenheit' ) Funit_label . pack ( side = 'left' ) root . mainloop () Resulta em: Um exemplo um pouco mais complexo usando o PyQt4 Para ilustrar um pouco mais sobre GUIs, segue um exemplo usando o PyQt4 para avaliar express\u00f5es from __future__ import division import sys from math import * from PyQt4.QtCore import * from PyQt4.QtGui import * class Form ( QDialog ): def __init__ ( self , parent = None ): super ( Form , self ) . __init__ ( parent ) self . browser = QTextBrowser () self . lineedit = QLineEdit ( u \"Digite uma express\u00e3o e pressione enter\" ) self . lineedit . selectAll () layout = QVBoxLayout () layout . addWidget ( self . browser ) layout . addWidget ( self . lineedit ) self . setLayout ( layout ) self . lineedit . setFocus () self . connect ( self . lineedit , SIGNAL ( \"returnPressed()\" ), self . updateUi ) self . setWindowTitle ( \"Calcular\" ) def updateUi ( self ): try : text = self . lineedit . text () . encode ( 'utf-8' ) self . browser . append ( u \" %s = %s \" % ( text , eval ( text ))) except : self . browser . append ( u \" %s \u00e9 inv\u00e1lido!\" % text ) app = QApplication ( sys . argv ) form = Form () form . show () app . exec_ () Resulta em:","title":"Interfaces gr\u00e1ficas"},{"location":"entradaerros/interfacesgraficas/#interfaces-graficas-de-usuario","text":"A maioria dos programas hoje em dia recebem entradas de uma interface gr\u00e1fica de usu\u00e1rio (graphical user interfaces - GUI), que consiste em janelas com elementos gr\u00e1ficos como bot\u00f5es, menus, campos de texto, etc. Porque no aprendemos a fazer tais programas? GUI demandam uma programa\u00e7\u00e3o extra muito complicada; Programadores experientes preferem a entrada por linha de comando; Programas com entradas por linha de comando ou arquivos podem ser facilmente combinados uns com os outros, o que \u00e9 dif\u00edcil em programas baseados em GUI. Entrada por linha de comando provavelmente vai servir para todos os seus prop\u00f3sitos na sua pesquisa de p\u00f3s-gradua\u00e7\u00e3o! A n\u00e3o ser que sua pesquisa envolva diretamente a programa\u00e7\u00e3o com GUI... Ent\u00e3o, vamos dar uma olhada com se faz!","title":"Interfaces gr\u00e1ficas de usu\u00e1rio"},{"location":"entradaerros/interfacesgraficas/#um-programa-de-conversao-celsius-fahrenheit-com-gui","text":"Os valores em Celsius podem ser colocados como n\u00fameros em um campo e clicando-se em um bot\u00e3o \"\u00e9\" calcula-se a correspondente temperatura em Fahrenheit. Para isso, vamos usar o pacote GUI do python chamado Tkinter: import Tkinter as tk #from Tkinter import * root = tk . Tk () #iniciando o Tkinter #criando o campo de entrada \u00e0 esquerda C_entry = tk . Entry ( root , width = 4 ) C_entry . pack ( side = 'left' ) #criando o texto Celsius logo ap\u00f3s o campo de entrada Cunit_label = tk . Label ( root , text = 'Celsius' ) Cunit_label . pack ( side = 'left' ) def compute (): C = float ( C_entry . get ()) F = ( 9. / 5 ) * C + 32 F_label . configure ( text = ' %g ' % F ) #criando o bot\u00e3o para calcular o resultado compute = tk . Button ( root , text = ' \u00e9 ' , command = compute ) compute . pack ( side = 'left' , padx = 4 ) #criando um texto para a resposta F_label = tk . Label ( root , width = 4 ) F_label . pack ( side = 'left' ) #criando o texto Fahrenheit Funit_label = tk . Label ( root , text = 'Fahrenheit' ) Funit_label . pack ( side = 'left' ) root . mainloop () Resulta em:","title":"Um programa de convers\u00e3o Celsius-Fahrenheit com GUI"},{"location":"entradaerros/interfacesgraficas/#um-exemplo-um-pouco-mais-complexo-usando-o-pyqt4","text":"Para ilustrar um pouco mais sobre GUIs, segue um exemplo usando o PyQt4 para avaliar express\u00f5es from __future__ import division import sys from math import * from PyQt4.QtCore import * from PyQt4.QtGui import * class Form ( QDialog ): def __init__ ( self , parent = None ): super ( Form , self ) . __init__ ( parent ) self . browser = QTextBrowser () self . lineedit = QLineEdit ( u \"Digite uma express\u00e3o e pressione enter\" ) self . lineedit . selectAll () layout = QVBoxLayout () layout . addWidget ( self . browser ) layout . addWidget ( self . lineedit ) self . setLayout ( layout ) self . lineedit . setFocus () self . connect ( self . lineedit , SIGNAL ( \"returnPressed()\" ), self . updateUi ) self . setWindowTitle ( \"Calcular\" ) def updateUi ( self ): try : text = self . lineedit . text () . encode ( 'utf-8' ) self . browser . append ( u \" %s = %s \" % ( text , eval ( text ))) except : self . browser . append ( u \" %s \u00e9 inv\u00e1lido!\" % text ) app = QApplication ( sys . argv ) form = Form () form . show () app . exec_ () Resulta em:","title":"Um exemplo um pouco mais complexo usando o PyQt4"},{"location":"entradaerros/modulos/","text":"Fazendo os nossos pr\u00f3prios m\u00f3dulos N\u00f3s j\u00e1 usamos m\u00f3dulos como o math e o sys : import math r = math . log ( 6 ) ## chama a fun\u00e7\u00e3o log no m\u00f3dulo math import sys ## acessa a lista de argumentos da linha de comendo no m\u00f3dulo sys x = eval ( sys . argv [ 1 ]) Caracter\u00edsticas dos m\u00f3dulos: Cole\u00e7\u00e3o de dados \u00fateis e fun\u00e7\u00f5es (tamb\u00e9m classes); Fun\u00e7\u00f5es em um m\u00f3dulo podem ser reutilizadas em v\u00e1rios diferentes programas; Se voc\u00ea tem algumas fun\u00e7\u00f5es gerais que podem ser utilizadas em mais de um programa, fa\u00e7a um m\u00f3dulo com essas fun\u00e7\u00f5es. \u00c9 f\u00e1cil: apenas colete as fun\u00e7\u00f5es que voc\u00ea quer em um arquivo e pronto, temos um m\u00f3dulo! Fazendo nosso pr\u00f3prio m\u00f3dulo Aqui est\u00e3o algumas formulas para c\u00e1lculo com taxas de juros: \\begin{align} A &= A_0 \\left( 1 + {p \\over 360 \\cdot 100} \\right)^{n}, \\\\ A_0 &= A \\left( 1 + {p \\over 360 \\cdot 100} \\right)^{-n}, \\\\ n &= \\frac{ \\ln {A \\over A_0}}{ \\ln \\left( 1 + {p \\over 360 \\cdot 100} \\right)} \\\\ p &= 360 \\cdot 100 \\left[ \\left({A \\over A_0} \\right)^{1/n} - 1 \\right]. \\end{align} Sendo $ A_0 $: montante inicial, $ p $: taxa, $ n $: dias, $ A $: montante final. Queremos fazer um m\u00f3dulo com essas equa\u00e7\u00f5es. Primeiro fazemos fun\u00e7\u00f5es Python com as equa\u00e7\u00f5es import math def montante_final ( A0 , p , n ): return A0 * ( 1 + p / ( 360.0 * 100 )) ** n def montante_inicial ( A , p , n ): return A * ( 1 + p / ( 360.0 * 100 )) ** ( - n ) def dias ( A0 , A , p ): return math . log ( A / A0 ) / math . log ( 1 + p / ( 360.0 * 100 )) def taxa_anual ( A0 , A , n ): return 360 * 100 * (( A / A0 ) ** ( 1.0 / n ) - 1 ) Ent\u00e3o podemos fazer o m\u00f3dulo Salve as 4 fun\u00e7\u00f5es em um arquivo taxas_juros.py Pronto! Agora taxas_juros.py \u00e9 um m\u00f3dulo. Exemplo de uso: import taxas_juros as tj A0 = 1 A = 2 p = 5 n = tj . dias ( A0 , 2 , p ) anos = n / 365.0 print 'O dinheiro dobrou ap\u00f3s %.1f anos' % anos Adicionando um bloco de teste em um m\u00f3dulo M\u00f3dulos podem ter um teste if no final contendo um bloco de teste para testar ou demonstrar o funcionamento do pr\u00f3prio m\u00f3dulo; O bloco de teste n\u00e3o \u00e9 executado quando o arquivo \u00e9 importado como um m\u00f3dulo em um programa; O bloco de teste \u00e9 executado somente quando o arquivo roda como um programa! Sintaxe b\u00e1sica: if __name__ == '__main__' : ## esse teste define o bloco de teste < block of statements > No nosso caso, acrescenta-se logo ap\u00f3s as fun\u00e7\u00f5es: if __name__ == '__main__' : A = 2.2133983053266699 A0 = 2.0 p = 5 n = 730 print 'A= %g ( %g ) A0= %g ( %.1f ) n= %d ( %d ) p= %g ( %.1f )' % \\ ( montante_final ( A0 , p , n ), A , montante_inicial ( A , p , n ), A0 , dias ( A0 , A , p ), n , taxa_anual ( A0 , A , n ), p ) Blocos de teste normalmente coletados em fun\u00e7\u00f5es Vamos fazer uma fun\u00e7\u00e3o de teste real para testar o que temos no bloco de teste: def teste_todas_funcoes (): ## Definindo valores compat\u00edveis A = 2.2133983053266699 A0 = 2.0 p = 5 n = 730 ## Dados tr\u00eas desses valores, calcule o remanescente ## e compare com o valor correto (em par\u00eanteses) A_calculado = montante_final ( A0 , p , n ) A0_calculado = montante_inicial ( A , p , n ) n_calculado = dias ( A0 , A , p ) p_calculado = taxa_anual ( A0 , A , n ) def float_eq ( a , b , tolerancia = 1E-12 ): \"\"\"Retorne True if a == b dentro da toler\u00e2ncia.\"\"\" return abs ( a - b ) < tolerancia success = float_eq ( A_calculado , A ) and \\ float_eq ( A0_calculado , A0 ) and \\ float_eq ( p_calculado , p ) and \\ float_eq ( n_calculado , n ) assert success ## pode-se adicionar uma mensagem aqui se desejado if __name__ == '__main__' : teste_todas_funcoes () Como o Python pode encontrar nosso novo m\u00f3dulo? Se o m\u00f3dulo est\u00e1 no mesmo diret\u00f3rio do programa principal, ele \u00e9 importado sem problema algum; M\u00f3dulos por n\u00f3s confeccionados s\u00e3o normalmente colecionados em um diret\u00f3rio comum, por exemplo: /home/usuario/Documentos/meusModulos Nesse caso o Python precisa ser avisado que seus m\u00f3dulos est\u00e3o naquele diret\u00f3rio! T\u00e9cnica 1: adicione o diret\u00f3rio ao PYTHONPATH no arquivo .rc , no caso de sistemas Linux: export PYTHONPATH = $ PYTHONPATH : / home / usuario / Documentos / meusModulos T\u00e9cnica 2: adicione o diret\u00f3rio ao sys.path no programa: sys . path . insert ( 0 , '/home/usuario/Documentos/meusModulos' ) T\u00e9cnica 3: copie o arquivo do m\u00f3dulo para um diret\u00f3rio o qual o Python j\u00e1 busca por m\u00f3dulos. Tarefa Resolu\u00e7\u00e3o de $f(x)=0$ para equa\u00e7\u00f5es n\u00e3o lineares utilizando m\u00e9todo da bisec\u00e7\u00e3o. Equa\u00e7\u00f5es n\u00e3o lineares para serem resolvidas: \\begin{align} f(x) &= x - 1 - \\sin x \\\\ f(x) &= \\tan x + \\cos x - \\sin 8x \\\\ f(x) &= x^5 - 3x^3 - 10 \\end{align} O m\u00e9todo da bisec\u00e7\u00e3o: Inicie com um intervalo $ [a,b] $ no qual $ f(x) $ muda de sinal; Ent\u00e3o deve haver ao menos uma raiz em $ [a,b] $; Reduza o intervalo \u00e0 metade: $ m=(a+b)/2 $; faz $ f $ mudar de sinal na metade da esquerda $ [a,m] $? Sim: continue com o intervalo da esquerda $ [a,m] $ (fa\u00e7a $ b=m $); N\u00e3o: continue com o intervalo da direita $ [m,b] $ (fa\u00e7a $ a=m $). Repita o procedimento! Ap\u00f3s reduzir o intervalo inicial \u00e0 metade $ [p,q] $ $n$ vezes, sabemos que $ f(x) $ deve ter uma raiz dentro de um intervalo (pequeno) $ 2^{-n}(q-p) $; O m\u00e9todo \u00e9 lento, mas muito confi\u00e1vel. Outros m\u00e9todos (como Newton-Raphson) podem ser mais r\u00e1pidos, mas podem tamb\u00e9m falhar ao localizar a raiz, o m\u00e9todo da bisec\u00e7\u00e3o n\u00e3o falha. Como fazer: Precisa-se transcrever a descri\u00e7\u00e3o matem\u00e1tica do m\u00e9todo da bisec\u00e7\u00e3o para um programa Python; Um passo intermedi\u00e1rio importante \u00e9 formular um algoritmo preciso! Como escolher $n$? Ou seja, quando parar a itera\u00e7\u00e3o. Queremos que o erro na raiz seja $ \\epsilon $ (toler\u00e2ncia) ou menor; Ap\u00f3s $ n $ itera\u00e7\u00f5es, o intervalo inicial $ [a,b] $ \u00e9 dividido \u00e0 metade $ n $ vezes e o intervalo atual tem tamanho $ 2^{-n}(b-a) $. Isso \u00e9 suficientemente pequeno se $ 2^{-n}(b-a) = \\epsilon \\quad \\Rightarrow \\quad n = - \\dfrac{ \\ln \\epsilon - \\ln (b-a)}{ \\ln 2} $; Uma alternativa simples: apenas repita a divis\u00e3o \u00e0 metade at\u00e9 que o comprimento do intervalo atual seja $ \\leq \\epsilon $; Podemos tamb\u00e9m adicionar um teste para verificar se $ f $ realmente muda de sinal no intervalo inicial $ [a,b] $. Opcional: Deixando o algoritmo mais eficiente $ f(a) $ \u00e9 recalculada a cada teste if ; N\u00e3o \u00e9 necess\u00e1rio se $ a $ n\u00e3o mudou de sinal desde o \u00faltimo passo no la\u00e7o; Em computadores modernos e com f\u00f3rmulas simples para $ f(x) $ esses c\u00e1lculos extras n\u00e3o importam; No entanto, na ci\u00eancia e na engenharia existem fun\u00e7\u00f5es $ f $ que levam horas e at\u00e9 dias para serem avaliadas em um ponto, ent\u00e3o salvar alguma avalia\u00e7\u00e3o de $ f(a) $ importa! Regra geral: remova c\u00e1lculos redundantes (a n\u00e3o ser que o c\u00f3digo se torne muito complicado e dif\u00edcil de verificar) Regras \u00e0 cumprir: Passe todos os dados necess\u00e1rios, fun\u00e7\u00e3o, limites e toler\u00e2ncia via argumentos de linha de comando com op\u00e7\u00f5es ( argparse ); O m\u00e9todo da bisec\u00e7\u00e3o deve ser implementado como uma fun\u00e7\u00e3o em um m\u00f3dulo \u00e0 parte! Fa\u00e7a ao menos uma fun\u00e7\u00e3o teste para o m\u00e9todo da bisec\u00e7\u00e3o; Limita\u00e7\u00e3o: use somente o aprendido at\u00e9 aqui!","title":"M\u00f3dulos"},{"location":"entradaerros/modulos/#fazendo-os-nossos-proprios-modulos","text":"N\u00f3s j\u00e1 usamos m\u00f3dulos como o math e o sys : import math r = math . log ( 6 ) ## chama a fun\u00e7\u00e3o log no m\u00f3dulo math import sys ## acessa a lista de argumentos da linha de comendo no m\u00f3dulo sys x = eval ( sys . argv [ 1 ]) Caracter\u00edsticas dos m\u00f3dulos: Cole\u00e7\u00e3o de dados \u00fateis e fun\u00e7\u00f5es (tamb\u00e9m classes); Fun\u00e7\u00f5es em um m\u00f3dulo podem ser reutilizadas em v\u00e1rios diferentes programas; Se voc\u00ea tem algumas fun\u00e7\u00f5es gerais que podem ser utilizadas em mais de um programa, fa\u00e7a um m\u00f3dulo com essas fun\u00e7\u00f5es. \u00c9 f\u00e1cil: apenas colete as fun\u00e7\u00f5es que voc\u00ea quer em um arquivo e pronto, temos um m\u00f3dulo!","title":"Fazendo os nossos pr\u00f3prios m\u00f3dulos"},{"location":"entradaerros/modulos/#fazendo-nosso-proprio-modulo","text":"Aqui est\u00e3o algumas formulas para c\u00e1lculo com taxas de juros: \\begin{align} A &= A_0 \\left( 1 + {p \\over 360 \\cdot 100} \\right)^{n}, \\\\ A_0 &= A \\left( 1 + {p \\over 360 \\cdot 100} \\right)^{-n}, \\\\ n &= \\frac{ \\ln {A \\over A_0}}{ \\ln \\left( 1 + {p \\over 360 \\cdot 100} \\right)} \\\\ p &= 360 \\cdot 100 \\left[ \\left({A \\over A_0} \\right)^{1/n} - 1 \\right]. \\end{align} Sendo $ A_0 $: montante inicial, $ p $: taxa, $ n $: dias, $ A $: montante final. Queremos fazer um m\u00f3dulo com essas equa\u00e7\u00f5es.","title":"Fazendo nosso pr\u00f3prio m\u00f3dulo"},{"location":"entradaerros/modulos/#primeiro-fazemos-funcoes-python-com-as-equacoes","text":"import math def montante_final ( A0 , p , n ): return A0 * ( 1 + p / ( 360.0 * 100 )) ** n def montante_inicial ( A , p , n ): return A * ( 1 + p / ( 360.0 * 100 )) ** ( - n ) def dias ( A0 , A , p ): return math . log ( A / A0 ) / math . log ( 1 + p / ( 360.0 * 100 )) def taxa_anual ( A0 , A , n ): return 360 * 100 * (( A / A0 ) ** ( 1.0 / n ) - 1 )","title":"Primeiro fazemos fun\u00e7\u00f5es Python com as equa\u00e7\u00f5es"},{"location":"entradaerros/modulos/#entao-podemos-fazer-o-modulo","text":"Salve as 4 fun\u00e7\u00f5es em um arquivo taxas_juros.py Pronto! Agora taxas_juros.py \u00e9 um m\u00f3dulo. Exemplo de uso: import taxas_juros as tj A0 = 1 A = 2 p = 5 n = tj . dias ( A0 , 2 , p ) anos = n / 365.0 print 'O dinheiro dobrou ap\u00f3s %.1f anos' % anos","title":"Ent\u00e3o podemos fazer o m\u00f3dulo"},{"location":"entradaerros/modulos/#adicionando-um-bloco-de-teste-em-um-modulo","text":"M\u00f3dulos podem ter um teste if no final contendo um bloco de teste para testar ou demonstrar o funcionamento do pr\u00f3prio m\u00f3dulo; O bloco de teste n\u00e3o \u00e9 executado quando o arquivo \u00e9 importado como um m\u00f3dulo em um programa; O bloco de teste \u00e9 executado somente quando o arquivo roda como um programa! Sintaxe b\u00e1sica: if __name__ == '__main__' : ## esse teste define o bloco de teste < block of statements > No nosso caso, acrescenta-se logo ap\u00f3s as fun\u00e7\u00f5es: if __name__ == '__main__' : A = 2.2133983053266699 A0 = 2.0 p = 5 n = 730 print 'A= %g ( %g ) A0= %g ( %.1f ) n= %d ( %d ) p= %g ( %.1f )' % \\ ( montante_final ( A0 , p , n ), A , montante_inicial ( A , p , n ), A0 , dias ( A0 , A , p ), n , taxa_anual ( A0 , A , n ), p )","title":"Adicionando um bloco de teste em um m\u00f3dulo"},{"location":"entradaerros/modulos/#blocos-de-teste-normalmente-coletados-em-funcoes","text":"Vamos fazer uma fun\u00e7\u00e3o de teste real para testar o que temos no bloco de teste: def teste_todas_funcoes (): ## Definindo valores compat\u00edveis A = 2.2133983053266699 A0 = 2.0 p = 5 n = 730 ## Dados tr\u00eas desses valores, calcule o remanescente ## e compare com o valor correto (em par\u00eanteses) A_calculado = montante_final ( A0 , p , n ) A0_calculado = montante_inicial ( A , p , n ) n_calculado = dias ( A0 , A , p ) p_calculado = taxa_anual ( A0 , A , n ) def float_eq ( a , b , tolerancia = 1E-12 ): \"\"\"Retorne True if a == b dentro da toler\u00e2ncia.\"\"\" return abs ( a - b ) < tolerancia success = float_eq ( A_calculado , A ) and \\ float_eq ( A0_calculado , A0 ) and \\ float_eq ( p_calculado , p ) and \\ float_eq ( n_calculado , n ) assert success ## pode-se adicionar uma mensagem aqui se desejado if __name__ == '__main__' : teste_todas_funcoes ()","title":"Blocos de teste normalmente coletados em fun\u00e7\u00f5es"},{"location":"entradaerros/modulos/#como-o-python-pode-encontrar-nosso-novo-modulo","text":"Se o m\u00f3dulo est\u00e1 no mesmo diret\u00f3rio do programa principal, ele \u00e9 importado sem problema algum; M\u00f3dulos por n\u00f3s confeccionados s\u00e3o normalmente colecionados em um diret\u00f3rio comum, por exemplo: /home/usuario/Documentos/meusModulos Nesse caso o Python precisa ser avisado que seus m\u00f3dulos est\u00e3o naquele diret\u00f3rio! T\u00e9cnica 1: adicione o diret\u00f3rio ao PYTHONPATH no arquivo .rc , no caso de sistemas Linux: export PYTHONPATH = $ PYTHONPATH : / home / usuario / Documentos / meusModulos T\u00e9cnica 2: adicione o diret\u00f3rio ao sys.path no programa: sys . path . insert ( 0 , '/home/usuario/Documentos/meusModulos' ) T\u00e9cnica 3: copie o arquivo do m\u00f3dulo para um diret\u00f3rio o qual o Python j\u00e1 busca por m\u00f3dulos.","title":"Como o Python pode encontrar nosso novo m\u00f3dulo?"},{"location":"entradaerros/modulos/#tarefa","text":"Resolu\u00e7\u00e3o de $f(x)=0$ para equa\u00e7\u00f5es n\u00e3o lineares utilizando m\u00e9todo da bisec\u00e7\u00e3o. Equa\u00e7\u00f5es n\u00e3o lineares para serem resolvidas: \\begin{align} f(x) &= x - 1 - \\sin x \\\\ f(x) &= \\tan x + \\cos x - \\sin 8x \\\\ f(x) &= x^5 - 3x^3 - 10 \\end{align} O m\u00e9todo da bisec\u00e7\u00e3o: Inicie com um intervalo $ [a,b] $ no qual $ f(x) $ muda de sinal; Ent\u00e3o deve haver ao menos uma raiz em $ [a,b] $; Reduza o intervalo \u00e0 metade: $ m=(a+b)/2 $; faz $ f $ mudar de sinal na metade da esquerda $ [a,m] $? Sim: continue com o intervalo da esquerda $ [a,m] $ (fa\u00e7a $ b=m $); N\u00e3o: continue com o intervalo da direita $ [m,b] $ (fa\u00e7a $ a=m $). Repita o procedimento! Ap\u00f3s reduzir o intervalo inicial \u00e0 metade $ [p,q] $ $n$ vezes, sabemos que $ f(x) $ deve ter uma raiz dentro de um intervalo (pequeno) $ 2^{-n}(q-p) $; O m\u00e9todo \u00e9 lento, mas muito confi\u00e1vel. Outros m\u00e9todos (como Newton-Raphson) podem ser mais r\u00e1pidos, mas podem tamb\u00e9m falhar ao localizar a raiz, o m\u00e9todo da bisec\u00e7\u00e3o n\u00e3o falha. Como fazer: Precisa-se transcrever a descri\u00e7\u00e3o matem\u00e1tica do m\u00e9todo da bisec\u00e7\u00e3o para um programa Python; Um passo intermedi\u00e1rio importante \u00e9 formular um algoritmo preciso! Como escolher $n$? Ou seja, quando parar a itera\u00e7\u00e3o. Queremos que o erro na raiz seja $ \\epsilon $ (toler\u00e2ncia) ou menor; Ap\u00f3s $ n $ itera\u00e7\u00f5es, o intervalo inicial $ [a,b] $ \u00e9 dividido \u00e0 metade $ n $ vezes e o intervalo atual tem tamanho $ 2^{-n}(b-a) $. Isso \u00e9 suficientemente pequeno se $ 2^{-n}(b-a) = \\epsilon \\quad \\Rightarrow \\quad n = - \\dfrac{ \\ln \\epsilon - \\ln (b-a)}{ \\ln 2} $; Uma alternativa simples: apenas repita a divis\u00e3o \u00e0 metade at\u00e9 que o comprimento do intervalo atual seja $ \\leq \\epsilon $; Podemos tamb\u00e9m adicionar um teste para verificar se $ f $ realmente muda de sinal no intervalo inicial $ [a,b] $. Opcional: Deixando o algoritmo mais eficiente $ f(a) $ \u00e9 recalculada a cada teste if ; N\u00e3o \u00e9 necess\u00e1rio se $ a $ n\u00e3o mudou de sinal desde o \u00faltimo passo no la\u00e7o; Em computadores modernos e com f\u00f3rmulas simples para $ f(x) $ esses c\u00e1lculos extras n\u00e3o importam; No entanto, na ci\u00eancia e na engenharia existem fun\u00e7\u00f5es $ f $ que levam horas e at\u00e9 dias para serem avaliadas em um ponto, ent\u00e3o salvar alguma avalia\u00e7\u00e3o de $ f(a) $ importa! Regra geral: remova c\u00e1lculos redundantes (a n\u00e3o ser que o c\u00f3digo se torne muito complicado e dif\u00edcil de verificar) Regras \u00e0 cumprir: Passe todos os dados necess\u00e1rios, fun\u00e7\u00e3o, limites e toler\u00e2ncia via argumentos de linha de comando com op\u00e7\u00f5es ( argparse ); O m\u00e9todo da bisec\u00e7\u00e3o deve ser implementado como uma fun\u00e7\u00e3o em um m\u00f3dulo \u00e0 parte! Fa\u00e7a ao menos uma fun\u00e7\u00e3o teste para o m\u00e9todo da bisec\u00e7\u00e3o; Limita\u00e7\u00e3o: use somente o aprendido at\u00e9 aqui!","title":"Tarefa"},{"location":"equacoes/equacoes/","text":"Programando equa\u00e7\u00f5es Voc\u00ea usa equa\u00e7\u00f5es? Ent\u00e3o, como program\u00e1-las? Os primeiros exemplos envolvem programas para resolver equa\u00e7\u00f5es matem\u00e1ticas. Vamos aprender como escrever e rodar um programa em Python, como trabalhar com as vari\u00e1veis, como computar fun\u00e7\u00f5es matem\u00e1ticas como $e^x$ e $sen(x)$, e como usar o Python para c\u00e1lculos interativos. Avaliando uma equa\u00e7\u00e3o matem\u00e1tica Altura de uma bola em movimento vertical: y(t) = v_0 t - \\frac{1}{2}gt^2 sendo: $ y $ a altura (posi\u00e7\u00e3o) em fun\u00e7\u00e3o do tempo $ t $ $ v_0 $ \u00e9 a velocidade inicial em $ t=0 $ $ g $ \u00e9 a acelera\u00e7\u00e3o da gravidade Tarefa: dado $ v_0 $, $ g $ e $ t $, calcular $ y $. Usar uma calculadora? Um programa \u00e9 muito mais poderoso... Mas afinal, o que \u00e9 um programa? Uma sequ\u00eancia de instru\u00e7\u00f5es para o computador, escritas em uma linguagem de programa\u00e7\u00e3o, parecida com uma gram\u00e1tica, mas mais simples e mais rigorosa. Este curso trabalha com computa\u00e7\u00e3o cient\u00edfica usando a linguagem de programa\u00e7\u00e3o Python (www.python.org). Nosso primeiro programa exemplo Avaliar $ y(t) = v_0 t - \\frac{1}{2}gt^2 $ para $ v_0=5 $, $g=9,81 $ e $ t=0,6 $: y = 5 \\times 0,6 - \\frac{1}{2} \\times 9,81 \\times 0,6^2 O programa completo em python: print 5 * 0.6 - 0.5 * 9.81 * 0.6 ** 2 Problema! Muito cuidado com o . e a , nas casas decimais. O python segue a conven\u00e7\u00e3o inglesa na qual as casas decimais s\u00e3o separadas com ponto . !! Como escrever e rodar um programa? Um programa \u00e9 texto simples, escrito em um editor de texto ; Use Gedit, Notepad++, Emacs, Vim, Spyder, or IDLE ( n\u00e3o MS Word!). Passo 1. Escreva o programa em um editor de texto, essa linha: print 5 * 0.6 - 0.5 * 9.81 * 0.6 ** 2 Passo 2. Salve o programa para um arquivo, digamos, movimento.py ( .py significa arquivo do Python); Passo 3. Abra um terminal (linux, mac) ou prompt do comando (windows CMD) e v\u00e1 at\u00e9 a pasta onde voc\u00ea salvou o arquivo; Passo 4. Execute o programa: Terminal> python ball1.py O programa imprime 1.2342 no terminal. O programa n\u00e3o rodou? Voc\u00ea precisa instalar o interpretador Python! Sugest\u00e3o: Anaconda! Anaconda \u00e9 uma interessante plataforma para o desenvolvimento em Python. Voc\u00ea pode baixar aqui: https://www.continuum.io/downloads Use a vers\u00e3o para Python 2.7! Provavelmente o seu computador \u00e9 diferente do meu: Quando voc\u00ea est\u00e1 usando um computador voc\u00ea est\u00e1 sempre rodando algum programa; O computador n\u00e3o faz absolutamente nada sem ser comandado, e n\u00f3s, humanos, escrevemos e usamos programas que dizem ao computador o que fazer; A maioria das pessoas est\u00e1 acostumada a dar um duplo clique em um s\u00edmbolo (\u00edcone) para rodar um programa, mas neste curso n\u00f3s vamos comandar o computador atrav\u00e9s dos terminais (ou prompt de comando) ou de IDEs (integrated development environment) porque \u00e9 mais eficiente para trabalhar com programa\u00e7\u00e3o! Programas matem\u00e1ticos complexos de repente se tornam diretos quando escrevemos programas. Um programa pode calcular uma integral Voc\u00ea pode calcular essa integral na m\u00e3o? \\int_{-\\infty}^1 e^{-x^2}dx Um pequeno programa pode calcul\u00e1-la assim como outras integrais: import numpy as np def integracao ( f , a , b , n = 100 ): \"\"\" Integra f de a a b, usando a regra dos trap\u00e9zios com n intervalos. \"\"\" x = np . linspace ( a , b , n + 1 ) # Coordenadas dos intervalos h = x [ 1 ] - x [ 0 ] # Espa\u00e7amento entre intervalos I = h * ( sum ( f ( x )) - 0.5 * ( f ( a ) + f ( b ))) return I # Definindo nosso integrando def minha_funcao ( x ): return np . exp ( - x ** 2 ) menos_infinito = - 20 # Aproxima\u00e7\u00e3o de menos infinito I = integracao ( minha_funcao , menos_infinito , 1 , n = 1000 ) print 'Valor da integral:' , I O programa calcula uma aproxima\u00e7\u00e3o com erro $ 10^{-12} $ em 0.1 s ($ n=10^6 $)!","title":"Programando Equa\u00e7\u00f5es"},{"location":"equacoes/equacoes/#programando-equacoes","text":"Voc\u00ea usa equa\u00e7\u00f5es? Ent\u00e3o, como program\u00e1-las? Os primeiros exemplos envolvem programas para resolver equa\u00e7\u00f5es matem\u00e1ticas. Vamos aprender como escrever e rodar um programa em Python, como trabalhar com as vari\u00e1veis, como computar fun\u00e7\u00f5es matem\u00e1ticas como $e^x$ e $sen(x)$, e como usar o Python para c\u00e1lculos interativos.","title":"Programando equa\u00e7\u00f5es"},{"location":"equacoes/equacoes/#avaliando-uma-equacao-matematica","text":"Altura de uma bola em movimento vertical: y(t) = v_0 t - \\frac{1}{2}gt^2 sendo: $ y $ a altura (posi\u00e7\u00e3o) em fun\u00e7\u00e3o do tempo $ t $ $ v_0 $ \u00e9 a velocidade inicial em $ t=0 $ $ g $ \u00e9 a acelera\u00e7\u00e3o da gravidade Tarefa: dado $ v_0 $, $ g $ e $ t $, calcular $ y $. Usar uma calculadora? Um programa \u00e9 muito mais poderoso... Mas afinal, o que \u00e9 um programa? Uma sequ\u00eancia de instru\u00e7\u00f5es para o computador, escritas em uma linguagem de programa\u00e7\u00e3o, parecida com uma gram\u00e1tica, mas mais simples e mais rigorosa. Este curso trabalha com computa\u00e7\u00e3o cient\u00edfica usando a linguagem de programa\u00e7\u00e3o Python (www.python.org).","title":"Avaliando uma equa\u00e7\u00e3o matem\u00e1tica"},{"location":"equacoes/equacoes/#nosso-primeiro-programa-exemplo","text":"Avaliar $ y(t) = v_0 t - \\frac{1}{2}gt^2 $ para $ v_0=5 $, $g=9,81 $ e $ t=0,6 $: y = 5 \\times 0,6 - \\frac{1}{2} \\times 9,81 \\times 0,6^2 O programa completo em python: print 5 * 0.6 - 0.5 * 9.81 * 0.6 ** 2 Problema! Muito cuidado com o . e a , nas casas decimais. O python segue a conven\u00e7\u00e3o inglesa na qual as casas decimais s\u00e3o separadas com ponto . !!","title":"Nosso primeiro programa exemplo"},{"location":"equacoes/equacoes/#como-escrever-e-rodar-um-programa","text":"Um programa \u00e9 texto simples, escrito em um editor de texto ; Use Gedit, Notepad++, Emacs, Vim, Spyder, or IDLE ( n\u00e3o MS Word!). Passo 1. Escreva o programa em um editor de texto, essa linha: print 5 * 0.6 - 0.5 * 9.81 * 0.6 ** 2 Passo 2. Salve o programa para um arquivo, digamos, movimento.py ( .py significa arquivo do Python); Passo 3. Abra um terminal (linux, mac) ou prompt do comando (windows CMD) e v\u00e1 at\u00e9 a pasta onde voc\u00ea salvou o arquivo; Passo 4. Execute o programa: Terminal> python ball1.py O programa imprime 1.2342 no terminal. O programa n\u00e3o rodou? Voc\u00ea precisa instalar o interpretador Python! Sugest\u00e3o: Anaconda! Anaconda \u00e9 uma interessante plataforma para o desenvolvimento em Python. Voc\u00ea pode baixar aqui: https://www.continuum.io/downloads Use a vers\u00e3o para Python 2.7! Provavelmente o seu computador \u00e9 diferente do meu: Quando voc\u00ea est\u00e1 usando um computador voc\u00ea est\u00e1 sempre rodando algum programa; O computador n\u00e3o faz absolutamente nada sem ser comandado, e n\u00f3s, humanos, escrevemos e usamos programas que dizem ao computador o que fazer; A maioria das pessoas est\u00e1 acostumada a dar um duplo clique em um s\u00edmbolo (\u00edcone) para rodar um programa, mas neste curso n\u00f3s vamos comandar o computador atrav\u00e9s dos terminais (ou prompt de comando) ou de IDEs (integrated development environment) porque \u00e9 mais eficiente para trabalhar com programa\u00e7\u00e3o! Programas matem\u00e1ticos complexos de repente se tornam diretos quando escrevemos programas.","title":"Como escrever e rodar um programa?"},{"location":"equacoes/equacoes/#um-programa-pode-calcular-uma-integral","text":"Voc\u00ea pode calcular essa integral na m\u00e3o? \\int_{-\\infty}^1 e^{-x^2}dx Um pequeno programa pode calcul\u00e1-la assim como outras integrais: import numpy as np def integracao ( f , a , b , n = 100 ): \"\"\" Integra f de a a b, usando a regra dos trap\u00e9zios com n intervalos. \"\"\" x = np . linspace ( a , b , n + 1 ) # Coordenadas dos intervalos h = x [ 1 ] - x [ 0 ] # Espa\u00e7amento entre intervalos I = h * ( sum ( f ( x )) - 0.5 * ( f ( a ) + f ( b ))) return I # Definindo nosso integrando def minha_funcao ( x ): return np . exp ( - x ** 2 ) menos_infinito = - 20 # Aproxima\u00e7\u00e3o de menos infinito I = integracao ( minha_funcao , menos_infinito , 1 , n = 1000 ) print 'Valor da integral:' , I O programa calcula uma aproxima\u00e7\u00e3o com erro $ 10^{-12} $ em 0.1 s ($ n=10^6 $)!","title":"Um programa pode calcular uma integral"},{"location":"equacoes/regras/","text":"Regras e Erros Os computadores s\u00e3o muito exigentes quanto \u00e0s regras gramaticais e erros de digita\u00e7\u00e3o. Olhe para: print 5 * 0.6 - 0.5 * 9.81 * 0.6 ** 2 write 5 * 0 , 6 - 0 , 5 * 9 , 81 * 0 , 6 ^ 2 Voc\u00ea consideraria essas duas linhas iguais? Humanos dir\u00e3o sim , computadores n\u00e3o ; A segunda linha n\u00e3o tem sentido dentro de um programa Python; write n\u00e3o \u00e9 uma palavra reservada em Python, a v\u00edrgula tem outro sentido diferente do matem\u00e1tico e o acento circunflexo n\u00e3o \u00e9 exponencia\u00e7\u00e3o; Precisamos ser extremamente precisos quando vamos escrever programas computacionais! Toma tempo e experi\u00eancia aprender isso. A programa\u00e7\u00e3o abre novas perspectivas... People only become computer programmers if they're obsessive about details, crave power over machines, and can bear to be told day after day exactly how stupid they are. G. J. E. Rawlins associate professor of computer science at Indiana University, Bloomington. As pessoas s\u00f3 se tornam programadores de computador se eles s\u00e3o obsessivos com detalhes, anseiam poder sobre m\u00e1quinas e podem suportar ser informados dia ap\u00f3s dia exatamente como eles s\u00e3o est\u00fapidos. Gregory J. E. Rawlins Vari\u00e1veis Guarde n\u00fameros em vari\u00e1veis para fazer um programa mais leg\u00edvel. Na matem\u00e1tica n\u00f3s estamos acostumados \u00e0s vari\u00e1veis, ou seja: v_0=5,\\quad g=9.81,\\quad t=0.6,\\quad y = v_0 t - \\frac{1}{2}gt^2 N\u00f3s podemos usar vari\u00e1veis em um programa tamb\u00e9m, e isso torna o programa mais f\u00e1cil de ser lido e entendido: v0 = 5 g = 9.81 t = 0.6 y = v0 * t - 0.5 * g * t ** 2 print y Esse programa abrange v\u00e1rias linhas de texto e usa vari\u00e1veis, mesmo assim o programa executa os mesmos c\u00e1lculos e d\u00e1 a mesma sa\u00edda que o programa anterior. Existe grande flexibilidade para a escolha dos nomes das vari\u00e1veis: Na matem\u00e1tica n\u00f3s normalmente usamos uma letra para a vari\u00e1vel; O nome da vari\u00e1vel em um programa pode conter letras de a-z ou A-Z, s\u00edmbolo de sublinhado \\\" _ \\\" e d\u00edgitos de 0-9, mas n\u00e3o pode iniciar com um d\u00edgito; N\u00e3o se utilizam caracteres especiais em nomes de vari\u00e1veis, como \u00e3, \u00e9, $, &, etc; Os nomes das vari\u00e1veis s\u00e3o \\\"case-sensitive\\\" (ou seja, a \u00e9 diferente de A ). velocidade_inicial = 5 acel_gravidade = 9.81 TEMPO = 0.6 PosicaoVerticalDaBola = velocidade_inicial * TEMPO - \\ 0.5 * acel_gravidade * TEMPO ** 2 print PosicaoVerticalDaBola Dica Bons nomes para vari\u00e1veis tornam um programa f\u00e1cil de entender! Palavras Reservadas Algumas palavras em ingl\u00eas s\u00e3o reservadas para o uso do Python. Certas palavras possuem um significado especial em Python e n\u00e3o podem ser usadas como nome de vari\u00e1veis. S\u00e3o elas: and , as , assert , break , class , continue , def , del , elif , else , except , exec , finally , for , from , global , if , import , in , is , lambda , not , or , pass , print , raise , return , try , with , while , yield . Coment\u00e1rios Coment\u00e1rios s\u00e3o uma forma \u00fatil de se explicar um programa. Programa com coment\u00e1rios: # programa para calcular a altura de uma bola # em movimento vertical v0 = 5 # velocidade inicial g = 9.81 # acelera\u00e7\u00e3o da gravidade t = 0.6 # tempo y = v0 * t - 0.5 * g * t ** 2 # posi\u00e7\u00e3o vertical print y Notas: Tudo ap\u00f3s o s\u00edmbolo # em uma linha \u00e9 um coment\u00e1rio e \u00e9 ignorado pelo Python; Coment\u00e1rios s\u00e3o utilizados para explicar o que as instru\u00e7\u00f5es do c\u00f3digo significam, o que as vari\u00e1veis significam, como o programador raciocinou quando escrever o programa, etc. Coment\u00e1rios ruins n\u00e3o dizem nada a mais que o c\u00f3digo:\\ a = 5 # definir a como 5 Por\u00e9m, os coment\u00e1rios n\u00e3o s\u00e3o sempre ignorados, como veremos mais adiante. Caracteres e acentua\u00e7\u00e3o Regra padr\u00e3o: Programas Python, exceto os coment\u00e1rios e textos (strings), podem somente possuir caracteres do alfabeto ingl\u00eas. Mas, por quest\u00f5es de boas pr\u00e1ticas e por generalizar a leitura do c\u00f3digo, normalmente todo o programa, inclusive os coment\u00e1rios s\u00e3o escritos em ingl\u00eas! Algumas vezes mesmo caracteres especiais colocados em textos ou coment\u00e1rios podem gerar um erro no programa: verdade = 'N\u00e3o \u00e9 n\u00e3o!' # \u00e3 e \u00e9 s\u00e3o permitidos em uma string? print verdade Pode gerar o erro: SyntaxError : Non - ASCII character ... A solu\u00e7\u00e3o para esse tipo de erro e acrescentar na primeira linha do seu programa a codifica\u00e7\u00e3o na qual voc\u00ea est\u00e1 escrevendo o c\u00f3digo, para Linux e Mac: # -*- coding: utf-8 -*- E para windows: # -*- coding: cp-1252 -*- Formata\u00e7\u00e3o da sa\u00edda O comando printf n\u00f3s d\u00e1 grande flexibilidade formantando texto com n\u00fameros. O resultado de c\u00e1lculos normalmente cont\u00e9m n\u00fameros com algum significado, por exemplo: Em t = 0.6s, y \u00e9 1.23m \u00c9 interessante controlar a formata\u00e7\u00e3o dos n\u00fameros como: quantidade de decimais, estilo (0,6 ou 6e-01), entre outros. O comando interno do Python (ou palavra reservada) printf \u00e9 \u00fatil para esse prop\u00f3sito: t = 0.6 y = 1.2342 print 'Em t= %g s, y \u00e9 %.2f m.' % ( t , y ) O comando printf possui \"espa\u00e7os\" onde as vari\u00e1veis listadas ao final s\u00e3o acrescentadas ao texto formatado: %g $ \\leftarrow $ t , %.2f $ \\leftarrow $ y Exemplos de diferentes formata\u00e7\u00f5es com o printf: % g #formato mais compacto de um n\u00famero real % f #nota\u00e7\u00e3o decimal (-34.674) % 10.3 f #nota\u00e7\u00e3o decimal com 3 decimais e 10 d\u00edgitos inteiros %. 3 f #nota\u00e7\u00e3o decimal com 3 decimais e m\u00ednimo tamanho % e #nota\u00e7\u00e3o cient\u00edfica (1.42e-02 ou 1.42E-02) % E #tamb\u00e9m vale como nota\u00e7\u00e3o cient\u00edfica (1.42e-02 ou 1.42E-02) % 9.2 e #nota\u00e7\u00e3o cient\u00edfica com 2 decimais e 9 d\u00edgitos inteiros % d #inteiro % 5 d #inteiro com 5 d\u00edgitos % s #string (texto) %- 20 s #string, com 20 caracteres, alinhado \u00e0 esquerda %% #s\u00edmbolo de porcentagem % Se for necess\u00e1ria uma sa\u00edda mais completa, textos (strings) com triplas aspas (\"\"\" ou ''') podem ser utilizados para sa\u00eddas em m\u00faltiplas linhas que, ainda, podem ser combinadas com uma formata\u00e7\u00e3o do comando printf : v0 = 5 g = 9.81 t = 0.6 y = v0 * t - 0.5 * g * t ** 2 print \"\"\" Em t= %f s, uma bola com velocidade inicial v0= %.3E m/s est\u00e1 posicionada na altura de %.2f m. \"\"\" % ( t , v0 , y ) Salve como um arquivo do python (ex. saida_formatada.py) e rode o programa: Terminal> python saida_formatada.py Termos em Computa\u00e7\u00e3o Cient\u00edfica Alguns termos comumente usados em computa\u00e7\u00e3o cient\u00edfica: Programa, c\u00f3digo ou aplica\u00e7\u00e3o (Program or code or application); C\u00f3digo fonte (Source code, \u00e9 o \\\"texto\\\" do programa) Fragmento ou parte de C\u00f3digo/programa (Code/program snippet); Executar ou rodar um programa (Execute or run a program); Algoritmo (Algorithm, \u00e9 a \\\"receita\\\" para um programa); Implementa\u00e7\u00e3o (Implementation, o ato de escrever o programa); Verifica\u00e7\u00e3o (Verification, o programa funciona como esperado?); Erros e depura\u00e7\u00e3o (Bugs and debugging); O significado de alguns termos em computa\u00e7\u00e3o cient\u00edfica \u00e9 geralmente diferente do significado do \"dicion\u00e1rio\".","title":"Regras de programa\u00e7\u00e3o"},{"location":"equacoes/regras/#regras-e-erros","text":"Os computadores s\u00e3o muito exigentes quanto \u00e0s regras gramaticais e erros de digita\u00e7\u00e3o. Olhe para: print 5 * 0.6 - 0.5 * 9.81 * 0.6 ** 2 write 5 * 0 , 6 - 0 , 5 * 9 , 81 * 0 , 6 ^ 2 Voc\u00ea consideraria essas duas linhas iguais? Humanos dir\u00e3o sim , computadores n\u00e3o ; A segunda linha n\u00e3o tem sentido dentro de um programa Python; write n\u00e3o \u00e9 uma palavra reservada em Python, a v\u00edrgula tem outro sentido diferente do matem\u00e1tico e o acento circunflexo n\u00e3o \u00e9 exponencia\u00e7\u00e3o; Precisamos ser extremamente precisos quando vamos escrever programas computacionais! Toma tempo e experi\u00eancia aprender isso. A programa\u00e7\u00e3o abre novas perspectivas... People only become computer programmers if they're obsessive about details, crave power over machines, and can bear to be told day after day exactly how stupid they are. G. J. E. Rawlins associate professor of computer science at Indiana University, Bloomington. As pessoas s\u00f3 se tornam programadores de computador se eles s\u00e3o obsessivos com detalhes, anseiam poder sobre m\u00e1quinas e podem suportar ser informados dia ap\u00f3s dia exatamente como eles s\u00e3o est\u00fapidos. Gregory J. E. Rawlins","title":"Regras e Erros"},{"location":"equacoes/regras/#variaveis","text":"Guarde n\u00fameros em vari\u00e1veis para fazer um programa mais leg\u00edvel. Na matem\u00e1tica n\u00f3s estamos acostumados \u00e0s vari\u00e1veis, ou seja: v_0=5,\\quad g=9.81,\\quad t=0.6,\\quad y = v_0 t - \\frac{1}{2}gt^2 N\u00f3s podemos usar vari\u00e1veis em um programa tamb\u00e9m, e isso torna o programa mais f\u00e1cil de ser lido e entendido: v0 = 5 g = 9.81 t = 0.6 y = v0 * t - 0.5 * g * t ** 2 print y Esse programa abrange v\u00e1rias linhas de texto e usa vari\u00e1veis, mesmo assim o programa executa os mesmos c\u00e1lculos e d\u00e1 a mesma sa\u00edda que o programa anterior. Existe grande flexibilidade para a escolha dos nomes das vari\u00e1veis: Na matem\u00e1tica n\u00f3s normalmente usamos uma letra para a vari\u00e1vel; O nome da vari\u00e1vel em um programa pode conter letras de a-z ou A-Z, s\u00edmbolo de sublinhado \\\" _ \\\" e d\u00edgitos de 0-9, mas n\u00e3o pode iniciar com um d\u00edgito; N\u00e3o se utilizam caracteres especiais em nomes de vari\u00e1veis, como \u00e3, \u00e9, $, &, etc; Os nomes das vari\u00e1veis s\u00e3o \\\"case-sensitive\\\" (ou seja, a \u00e9 diferente de A ). velocidade_inicial = 5 acel_gravidade = 9.81 TEMPO = 0.6 PosicaoVerticalDaBola = velocidade_inicial * TEMPO - \\ 0.5 * acel_gravidade * TEMPO ** 2 print PosicaoVerticalDaBola Dica Bons nomes para vari\u00e1veis tornam um programa f\u00e1cil de entender!","title":"Vari\u00e1veis"},{"location":"equacoes/regras/#palavras-reservadas","text":"Algumas palavras em ingl\u00eas s\u00e3o reservadas para o uso do Python. Certas palavras possuem um significado especial em Python e n\u00e3o podem ser usadas como nome de vari\u00e1veis. S\u00e3o elas: and , as , assert , break , class , continue , def , del , elif , else , except , exec , finally , for , from , global , if , import , in , is , lambda , not , or , pass , print , raise , return , try , with , while , yield .","title":"Palavras Reservadas"},{"location":"equacoes/regras/#comentarios","text":"Coment\u00e1rios s\u00e3o uma forma \u00fatil de se explicar um programa. Programa com coment\u00e1rios: # programa para calcular a altura de uma bola # em movimento vertical v0 = 5 # velocidade inicial g = 9.81 # acelera\u00e7\u00e3o da gravidade t = 0.6 # tempo y = v0 * t - 0.5 * g * t ** 2 # posi\u00e7\u00e3o vertical print y Notas: Tudo ap\u00f3s o s\u00edmbolo # em uma linha \u00e9 um coment\u00e1rio e \u00e9 ignorado pelo Python; Coment\u00e1rios s\u00e3o utilizados para explicar o que as instru\u00e7\u00f5es do c\u00f3digo significam, o que as vari\u00e1veis significam, como o programador raciocinou quando escrever o programa, etc. Coment\u00e1rios ruins n\u00e3o dizem nada a mais que o c\u00f3digo:\\ a = 5 # definir a como 5 Por\u00e9m, os coment\u00e1rios n\u00e3o s\u00e3o sempre ignorados, como veremos mais adiante.","title":"Coment\u00e1rios"},{"location":"equacoes/regras/#caracteres-e-acentuacao","text":"Regra padr\u00e3o: Programas Python, exceto os coment\u00e1rios e textos (strings), podem somente possuir caracteres do alfabeto ingl\u00eas. Mas, por quest\u00f5es de boas pr\u00e1ticas e por generalizar a leitura do c\u00f3digo, normalmente todo o programa, inclusive os coment\u00e1rios s\u00e3o escritos em ingl\u00eas! Algumas vezes mesmo caracteres especiais colocados em textos ou coment\u00e1rios podem gerar um erro no programa: verdade = 'N\u00e3o \u00e9 n\u00e3o!' # \u00e3 e \u00e9 s\u00e3o permitidos em uma string? print verdade Pode gerar o erro: SyntaxError : Non - ASCII character ... A solu\u00e7\u00e3o para esse tipo de erro e acrescentar na primeira linha do seu programa a codifica\u00e7\u00e3o na qual voc\u00ea est\u00e1 escrevendo o c\u00f3digo, para Linux e Mac: # -*- coding: utf-8 -*- E para windows: # -*- coding: cp-1252 -*-","title":"Caracteres e acentua\u00e7\u00e3o"},{"location":"equacoes/regras/#formatacao-da-saida","text":"O comando printf n\u00f3s d\u00e1 grande flexibilidade formantando texto com n\u00fameros. O resultado de c\u00e1lculos normalmente cont\u00e9m n\u00fameros com algum significado, por exemplo: Em t = 0.6s, y \u00e9 1.23m \u00c9 interessante controlar a formata\u00e7\u00e3o dos n\u00fameros como: quantidade de decimais, estilo (0,6 ou 6e-01), entre outros. O comando interno do Python (ou palavra reservada) printf \u00e9 \u00fatil para esse prop\u00f3sito: t = 0.6 y = 1.2342 print 'Em t= %g s, y \u00e9 %.2f m.' % ( t , y ) O comando printf possui \"espa\u00e7os\" onde as vari\u00e1veis listadas ao final s\u00e3o acrescentadas ao texto formatado: %g $ \\leftarrow $ t , %.2f $ \\leftarrow $ y Exemplos de diferentes formata\u00e7\u00f5es com o printf: % g #formato mais compacto de um n\u00famero real % f #nota\u00e7\u00e3o decimal (-34.674) % 10.3 f #nota\u00e7\u00e3o decimal com 3 decimais e 10 d\u00edgitos inteiros %. 3 f #nota\u00e7\u00e3o decimal com 3 decimais e m\u00ednimo tamanho % e #nota\u00e7\u00e3o cient\u00edfica (1.42e-02 ou 1.42E-02) % E #tamb\u00e9m vale como nota\u00e7\u00e3o cient\u00edfica (1.42e-02 ou 1.42E-02) % 9.2 e #nota\u00e7\u00e3o cient\u00edfica com 2 decimais e 9 d\u00edgitos inteiros % d #inteiro % 5 d #inteiro com 5 d\u00edgitos % s #string (texto) %- 20 s #string, com 20 caracteres, alinhado \u00e0 esquerda %% #s\u00edmbolo de porcentagem % Se for necess\u00e1ria uma sa\u00edda mais completa, textos (strings) com triplas aspas (\"\"\" ou ''') podem ser utilizados para sa\u00eddas em m\u00faltiplas linhas que, ainda, podem ser combinadas com uma formata\u00e7\u00e3o do comando printf : v0 = 5 g = 9.81 t = 0.6 y = v0 * t - 0.5 * g * t ** 2 print \"\"\" Em t= %f s, uma bola com velocidade inicial v0= %.3E m/s est\u00e1 posicionada na altura de %.2f m. \"\"\" % ( t , v0 , y ) Salve como um arquivo do python (ex. saida_formatada.py) e rode o programa: Terminal> python saida_formatada.py","title":"Formata\u00e7\u00e3o da sa\u00edda"},{"location":"equacoes/regras/#termos-em-computacao-cientifica","text":"Alguns termos comumente usados em computa\u00e7\u00e3o cient\u00edfica: Programa, c\u00f3digo ou aplica\u00e7\u00e3o (Program or code or application); C\u00f3digo fonte (Source code, \u00e9 o \\\"texto\\\" do programa) Fragmento ou parte de C\u00f3digo/programa (Code/program snippet); Executar ou rodar um programa (Execute or run a program); Algoritmo (Algorithm, \u00e9 a \\\"receita\\\" para um programa); Implementa\u00e7\u00e3o (Implementation, o ato de escrever o programa); Verifica\u00e7\u00e3o (Verification, o programa funciona como esperado?); Erros e depura\u00e7\u00e3o (Bugs and debugging); O significado de alguns termos em computa\u00e7\u00e3o cient\u00edfica \u00e9 geralmente diferente do significado do \"dicion\u00e1rio\".","title":"Termos em Computa\u00e7\u00e3o Cient\u00edfica"},{"location":"equacoes/sintaxe/","text":"Um programa consiste em declara\u00e7\u00f5es a = 1 # 1a declara\u00e7\u00e3o (declara\u00e7\u00e3o de atribui\u00e7\u00e3o) b = 2 # 2a declara\u00e7\u00e3o (declara\u00e7\u00e3o de atribui\u00e7\u00e3o) c = a + b # 3a declara\u00e7\u00e3o (declara\u00e7\u00e3o de atribui\u00e7\u00e3o) print c # 4a declara\u00e7\u00e3o (declara\u00e7\u00e3o de impress\u00e3o) Regra padr\u00e3o: uma declara\u00e7\u00e3o por linha, mas m\u00faltiplas declara\u00e7\u00f5es por linha s\u00e3o permitidas atrav\u00e9s do uso do ponto-v\u00edrgula entre as declara\u00e7\u00f5es: a = 1 ; b = 2 ; c = a + b ; print c Declara\u00e7\u00f5es de Atribui\u00e7\u00e3o Declara\u00e7\u00f5es de atribui\u00e7\u00e3o avaliam o lado direito do s\u00edmbolo de atribui\u00e7\u00e3o \"=\" e atribuem o resultado \u00e0 vari\u00e1vel do lado esquerdo: mvar = 10 mvar = 3 * mvar # = 30 Sintaxe do c\u00f3digo Programas devem conter uma sintaxe correta, isto \u00e9, um correto uso das regras \"gramaticais\" da linguagem de programa\u00e7\u00e3o em uso, e sem erros de impress\u00e3o! Esse \u00e9 um programa com dois erros de sintaxe: mvar = 5.2 print mvar prinnt Mvar ^ SyntaxError : invalid syntax Somente o primeiro erro encontrado \u00e9 relatado e o programa para (corrija o erro e continue para o p?oximo...). Programming demands significantly higher standard of accuracy. Things don't simply have to make sense to another human being, they must make sense to a computer. Donald Knuth, computer scientist, 1938- A programa\u00e7\u00e3o exige um n\u00edvel de precis\u00e3o significativamente maior. As coisas simplesmente n\u00e3o t\u00eam que fazer sentido para outro ser humano, elas devem fazer sentido para um computador. Donald Knuth, computer scientist, 1938 Espa\u00e7os em branco Espa\u00e7os em branco (blank, whitespaces) podem ser utilizados para uma melhor formata\u00e7\u00e3o do texto do c\u00f3digo. Espa\u00e7os em branco podem ou n\u00e3o ser importantes em programas Python. Essas declara\u00e7\u00f5es s\u00e3o equivalentes (espa\u00e7os em branco aqui n\u00e3o importam): v0 = 3 v0 = 3 v0 = 3 v0 = 3 Aqui os espa\u00e7o em branco s\u00e3o importantes: contador = 1 while contador <= 4 : contador = contador + 1 # correto (4 espa\u00e7os em branco no inicio ou um \"tab\", indenta\u00e7\u00e3o) while contador <= 4 : contador = contador + 1 # sintaxe inv\u00e1lida Entrada e Sa\u00edda O programa recebe dados de entrada e calcula os dados de sa\u00edda de acordo com o c\u00f3digo escrito. v0 = 3 ; g = 9.81 ; t = 0.6 posicao = v0 * t - 0.5 * g * t * t velocidade = v0 - g * t print 'posi\u00e7\u00e3o:' , posicao , 'velocidade:' , velocidade Entrada: v0 , g , e t Sa\u00edda: posicao e velocidade Sistema Operacional Um sistema operacional (OS) \u00e9 um conjunto de programas que gerenciam os recursos de hardware e software em um computador. Linux, Unix (Ubuntu, RedHat, Suse, Solaris) Windows (95, 98, NT, ME, 2000, XP, Vista, 7, 8) Macintosh (old Mac OS, Mac OS X) Mac OS X $ \\approx $ Unix $ \\approx $ Linux $ \\neq $ Windows Os comandos tipicos do OS s\u00e3o bem similares: Linux/Unix: mkdir nome-da-pasta; cd nome-da-pasta; ls Windows: mkdir nome-da-pasta; cd nome-da-pasta; dir Python suporta programa\u00e7\u00e3o cross-plataforma, ou seja, um programa \u00e9 independente de qual OS utilizamos para programar ou rodar o programa. Avaliando uma equa\u00e7\u00e3o para convers\u00e3o de temperatura Dado $ C $ como uma temperatura em graus Celsius, calcule a temperatura correspondente em graus Fahrenheit $ F $: F = \\frac{9}{5}C + 32 Programa, em um editor de texto e salve como c2f.py : C = 21 F = ( 9 / 5 ) * C + 32 print F Execu\u00e7\u00e3o e resultado: Terminal> python c2f.py 53 Resposta certa Sempre deve-se checar se um novo programa calculou a resposta certa. Por exemplo, usando uma calculadora: 9/5 vezes 21 mais 32 \u00e9 69.8, e n\u00e3o 53!! Erro na resposta O erro na resposta foi causado (n\u00e3o intencionalmente) por divis\u00e3o de inteiros. 9/5 n\u00e3o \u00e9 1.8 mas 1 na maioria das linguagens de programa\u00e7\u00e3o! Se $ a $ e $ b $ s\u00e3o inteiros, $ a/b $ implica em uma divis\u00e3o de inteiros: o maior inteiro $ c $ tal que $ cb\\leq a $; Exemplos: $ 1/5=0 $, $ 2/5=0 $, $ 7/5=1 $, $ 12/5=2 $; Na matem\u00e1tica, 9/5 \u00e9 um n\u00famero real (1.8) - isso \u00e9 chamado divis\u00e3o de ponto flutuante em Python e \u00e9 a divis\u00e3o que queremos; Um dos operandos ($ a $ ou $ b $) em $ a/b $ deve ser um n\u00famero real (ponto flutuante ou \"float\") para resultar na divis\u00e3o com ponto flutuante; Um float em Python possui um ponto (ou decimais): 9.0 ou 9. \u00e9 float; Nenhum ponto implica em inteiro: 9 \u00e9 um inteiro; 9.0/5 resulta 1.8 , 9/5. resulta 1.8 , 9/5 resulta 1 ; Corrija o programa de temperatura. Tudo no Python \u00e9 um objeto Vari\u00e1veis se referem \u00e0 objetos: a = 5 # a refere-se a um objeto inteiro (int) b = 9 # b refere-se a um objeto inteiro (int) c = 9.0 # c refere-se a um objeto n\u00famero real (float) d = b / a # d refere-se a uma int/int => objeto int e = c / a # e refere-se a uma float/int => objeto float s = 'b/a= %g ' % ( b / a ) # s \u00e9 um objeto string/texto (str) Podemos fazer convers\u00f5es entre objetos: a = 3 # a \u00e9 int b = float ( a ) # b \u00e9 float 3.0 c = 3.9 # c \u00e9 float d = int ( c ) # d \u00e9 int 3 d = round ( c ) # d \u00e9 float 4.0 d = int ( round ( c )) # d \u00e9 int 4 d = str ( c ) # d \u00e9 str '3.9' e = '-4.2' # e \u00e9 str f = float ( e ) # f \u00e9 float -4.2 Express\u00f5es Aritm\u00e9ticas Express\u00f5es aritm\u00e9ticas s\u00e3o avaliadas como voc\u00ea aprendeu na matem\u00e1tica: Exemplo: $ \\dfrac{5}{9} + 2\\dfrac{a^4}{2} $, no Python \u00e9 escrita como 5/9 + 2*a**4/2 As mesmas regras da matem\u00e1tica: procedimento termo \u00e0 termo* a partir da esquerda, no mesmo termo pot\u00eancias s\u00e3o calculadas primeiro, depois multiplica\u00e7\u00e3o e divis\u00e3o, por fim adi\u00e7\u00f5es/subtra\u00e7\u00f5es: r1 = 5/9 (=0) r2 = a**4 r3 = 2*r2 r4 = r3/2 r5 = r1 + r4 Use parenteses para sobrescrever essas regras padr\u00f5es, ou use parenteses para explicitamente dizer como as regras funcionam: (5/9) + (2*(a**4))/2 * Um termo \u00e9 definido ou separado por adi\u00e7\u00e3o ou subtra\u00e7\u00f5es. Fun\u00e7\u00f5es Matem\u00e1ticas Padr\u00f5es Algumas fun\u00e7\u00f5es matem\u00e1ticas podem ser encontradas no m\u00f3dulo math do python E se precisarmos calcular $\\sin x$, $\\cos x$, $\\ln x$, etc. em um programa? Tais fun\u00e7\u00f5es est\u00e3o dispon\u00edveis no m\u00f3dulo math do python; Um monte de funcionalidades \u00fateis est\u00e3o dispon\u00edveis em m\u00f3dulos do pr\u00f3prio Python e em m\u00f3dulos de terceiros; Para funcionar, devemos importar esses m\u00f3dulos para nosso programa. import math r = math . sqrt ( 2 ) # ou from math import sqrt r = sqrt ( 2 ) # ou from math import * # import tudo de math r = sqrt ( 2 ) Mais um exemplo do uso de fun\u00e7\u00f5es matem\u00e1ticas com o math : Calcule Q = \\sin x \\cos x + 4 \\ln x para $x=1,2$ import math x = 1.2 Q = math . sin ( x ) * math . cos ( x ) + 4 * math . log ( x ) print Q Erros de arredondamento Computadores possuem uma aritm\u00e9tica inexata por causa dos erros de arredondamento e ponto flutuante. Vamos calcular $1/49 \\times 49$ e $1/51 \\times 51$: v1 = 1 / 49.0 * 49 v2 = 1 / 51.0 * 51 print ' %.16f %.16f ' % ( v1 , v2 ) A sa\u00edda com os 16 decimais \u00e9 retornada como: 0.9999999999999999 1.0000000000000000 A maioria dos n\u00fameros reais possui uma representa\u00e7\u00e3o inexata em um computador (ex. 16 d\u00edgitos); Nem 1/49 ou 1/51 est\u00e1 representado exatamente, sendo o erro normalmente na ordem de $ 10^{-16} $; As vezes esses pequenos erros se propagam at\u00e9 a resposta final, as vezes n\u00e3o, e as vezes os pequenos erros s\u00e3o acumulados atrav\u00e9s de v\u00e1rias opera\u00e7\u00f5es matem\u00e1ticas; Li\u00e7\u00e3o aprendida: Os n\u00fameros reais em computadores e os resultados da c\u00e1lculos matem\u00e1ticos s\u00e3o apenas aproxima\u00e7\u00f5es! Fun\u00e7\u00f5es Matem\u00e1ticas Padr\u00f5es e poss\u00edveis erros Mais um exemplo do uso de fun\u00e7\u00f5es matem\u00e1ticas com o math : A fun\u00e7\u00e3o $\\sinh x$ \u00e9 definida como: \\sinh (x) = \\frac{1}{2}\\left(e^{x} - e^{-x}\\right) Podemos avaliar essa fun\u00e7\u00e3o de tr\u00eas formas: math.sinh combina\u00e7\u00e3o de duas math.exp combina\u00e7\u00e3o de duas pot\u00eancias de math.e from math import sinh , exp , e , pi x = 2 * pi r1 = sinh ( x ) r2 = 0.5 * ( exp ( x ) - exp ( - x )) r3 = 0.5 * ( e ** x - e ** ( - x )) print ' %.16f %.16f %.16f ' % ( r1 , r2 , r3 ) Sa\u00edda: 267.7448940410164369 267.7448940410164369 267.7448940410163232 ?? Python interativo Python pode ser utilizado interativamente como uma calculadora e para testar declara\u00e7\u00f5es. At\u00e9 agora n\u00f3s executamos c\u00e1lculos em programas Python; Python tamb\u00e9m pode ser utilizado interativamente, utilizando o chamado shell ; Digite python , ou ipython , ou idle no terminal (CMD no windows); Um shell Python \u00e9 aberto onde voc\u00ea pode escrever declara\u00e7\u00f5es e realizar opera\u00e7\u00f5es em Python. Terminal> python ... >>> C = 41 >>> F = ( 9 .0/5 ) *C + 32 >>> F 105 .8 >>> print F 105 .8 >>> Comandos anteriores podem ser chamados novamente e editados com a seta para cima ou para baixo do teclado. N\u00fameros Complexos Python possui suporte total para c\u00e1lculos com n\u00fameros complexos. $2 + 3i$ na matem\u00e1tica \u00e9 escrito como 2 + 3j em Python. >>> a = -2 >>> b = 0 .5 >>> s = complex ( a, b ) # monte um complexo das vari\u00e1veis >>> s ( -2+0.5j ) >>> s*w # complexo*complexo ( -10.5-3.75j ) >>> s/w # complexo/complexo ( -0.25641025641025639+0.28205128205128205j ) >>> s.real -2.0 >>> s.imag 0 .5 C\u00e1lculo alg\u00e9brico Python tamb\u00e9m pode realizar opera\u00e7\u00f5es alg\u00e9bricas, atrav\u00e9s do m\u00f3dulo sympy . Computa\u00e7\u00e3o num\u00e9rica: computa\u00e7\u00e3o com n\u00fameros; Computa\u00e7\u00e3o simb\u00f3lica: opera\u00e7\u00f5es alg\u00e9bricas com vari\u00e1veis. >>> from sympy import * >>> t, v0, g = symbols ( 't v0 g' ) >>> y = v0*t - Rational ( 1 ,2 ) *g*t**2 >>> dydt = diff ( y, t ) # 1a derivada >>> dydt -g*t + v0 >>> print 'acelera\u00e7\u00e3o:' , diff ( y, t, t ) # 2a derivada acelera\u00e7\u00e3o: -g >>> y2 = integrate ( dydt, t ) >>> y2 -g*t**2/2 + t*v0 Erro na importa\u00e7\u00e3o Foi gerado um erro de importa\u00e7\u00e3o? Voc\u00ea n\u00e3o tem o m\u00f3dulo sympy instalado! O SymPy pode realizar uma s\u00e9rie de opera\u00e7\u00f5es tradicionais da matem\u00e1tica. >>> y = v0*t - Rational ( 1 ,2 ) *g*t**2 >>> roots = solve ( y, t ) # resolve y=0 para t >>> roots [ 0 , 2 *v0/g ] >>> x, y = symbols ( 'x y' ) >>> f = -sin ( x ) *sin ( y ) + cos ( x ) *cos ( y ) >>> simplify ( f ) cos ( x + y ) >>> expand ( sin ( x+y ) , trig = True ) # na forma trigonom\u00e9trica sin ( x ) *cos ( y ) + sin ( y ) *cos ( x ) Sum\u00e1rio de Programando Equa\u00e7\u00f5es Programas deve ser precisos! Vari\u00e1veis s\u00e3o nomes de objetos; Conhecemos diferentes tipos de objetos: int , float , str ; Escolha nomes de vari\u00e1veis pr\u00f3ximos aos s\u00edmbolos matem\u00e1ticos do problema sendo resolvido; Opera\u00e7\u00f5es aritm\u00e9ticas em Python: termo a termo (+/-) da esquerda para a direita, pot\u00eancias antes * e / - como na matem\u00e1tica! Use par\u00eanteses se ficar na d\u00favida; Cuidado com divis\u00f5es por inteiros! Use o printf para controlar melhor as sa\u00eddas; Termos importantes: objeto, vari\u00e1veis, algoritmos, declara\u00e7\u00f5es, atribui\u00e7\u00f5es, implementa\u00e7\u00e3o, verifica\u00e7\u00e3o, depura\u00e7\u00e3o. Programar \u00e9 desafiador! Cita\u00e7\u00e3o 1 You think you know when you can learn, are more sure when you can write, even more when you can teach, but certain when you can program Within a computer, natural language is unnatural To understand a program you must become both the machine and the program Alan Perlis, computer scientist, 1922-1990 . Tarefa Jogamos uma bola com velocidade inicial $v_0$, com um \u00e2ngulo $\\theta$ com a horizontal, a partir do ponto $(x = 3, y = y_0)$. A trajet\u00f3ria da bola \u00e9 uma par\u00e1bola (negligenciando a resist\u00eancia do ar): y = x \\tan\\theta - \\frac{1}{2v_0^2}\\frac{gx^2}{\\cos^2 \\theta} + y_0 Tarefas para o programa: inicie os dados de entrada ($ v_0 $, $ g $, $ \\theta $, $ y_0 $) importe o m\u00f3dulo math calcule $ y $ Dados $ x $, $ y $ e $ y_0 $ em m, $ g = 9,81 \\hbox {m/s}^2 $, $ v_0 $ em km/h e $ \\theta $ em graus - o que requer a convers\u00e3o de $ v_0 $ para m/s e $ \\theta $ para radianos Voc\u00ea pensa que sabe quando voc\u00ea pode aprender, tem mais certeza quando pode escrever, mais ainda quando pode ensinar, mas seguro quando voc\u00ea pode programar! Alan Perlis, computer scientist, 1922-1990 . \u21a9","title":"Sintaxe e erros"},{"location":"equacoes/sintaxe/#um-programa-consiste-em-declaracoes","text":"a = 1 # 1a declara\u00e7\u00e3o (declara\u00e7\u00e3o de atribui\u00e7\u00e3o) b = 2 # 2a declara\u00e7\u00e3o (declara\u00e7\u00e3o de atribui\u00e7\u00e3o) c = a + b # 3a declara\u00e7\u00e3o (declara\u00e7\u00e3o de atribui\u00e7\u00e3o) print c # 4a declara\u00e7\u00e3o (declara\u00e7\u00e3o de impress\u00e3o) Regra padr\u00e3o: uma declara\u00e7\u00e3o por linha, mas m\u00faltiplas declara\u00e7\u00f5es por linha s\u00e3o permitidas atrav\u00e9s do uso do ponto-v\u00edrgula entre as declara\u00e7\u00f5es: a = 1 ; b = 2 ; c = a + b ; print c","title":"Um programa consiste em declara\u00e7\u00f5es"},{"location":"equacoes/sintaxe/#declaracoes-de-atribuicao","text":"Declara\u00e7\u00f5es de atribui\u00e7\u00e3o avaliam o lado direito do s\u00edmbolo de atribui\u00e7\u00e3o \"=\" e atribuem o resultado \u00e0 vari\u00e1vel do lado esquerdo: mvar = 10 mvar = 3 * mvar # = 30","title":"Declara\u00e7\u00f5es de Atribui\u00e7\u00e3o"},{"location":"equacoes/sintaxe/#sintaxe-do-codigo","text":"Programas devem conter uma sintaxe correta, isto \u00e9, um correto uso das regras \"gramaticais\" da linguagem de programa\u00e7\u00e3o em uso, e sem erros de impress\u00e3o! Esse \u00e9 um programa com dois erros de sintaxe: mvar = 5.2 print mvar prinnt Mvar ^ SyntaxError : invalid syntax Somente o primeiro erro encontrado \u00e9 relatado e o programa para (corrija o erro e continue para o p?oximo...). Programming demands significantly higher standard of accuracy. Things don't simply have to make sense to another human being, they must make sense to a computer. Donald Knuth, computer scientist, 1938- A programa\u00e7\u00e3o exige um n\u00edvel de precis\u00e3o significativamente maior. As coisas simplesmente n\u00e3o t\u00eam que fazer sentido para outro ser humano, elas devem fazer sentido para um computador. Donald Knuth, computer scientist, 1938","title":"Sintaxe do c\u00f3digo"},{"location":"equacoes/sintaxe/#espacos-em-branco","text":"Espa\u00e7os em branco (blank, whitespaces) podem ser utilizados para uma melhor formata\u00e7\u00e3o do texto do c\u00f3digo. Espa\u00e7os em branco podem ou n\u00e3o ser importantes em programas Python. Essas declara\u00e7\u00f5es s\u00e3o equivalentes (espa\u00e7os em branco aqui n\u00e3o importam): v0 = 3 v0 = 3 v0 = 3 v0 = 3 Aqui os espa\u00e7o em branco s\u00e3o importantes: contador = 1 while contador <= 4 : contador = contador + 1 # correto (4 espa\u00e7os em branco no inicio ou um \"tab\", indenta\u00e7\u00e3o) while contador <= 4 : contador = contador + 1 # sintaxe inv\u00e1lida","title":"Espa\u00e7os em branco"},{"location":"equacoes/sintaxe/#entrada-e-saida","text":"O programa recebe dados de entrada e calcula os dados de sa\u00edda de acordo com o c\u00f3digo escrito. v0 = 3 ; g = 9.81 ; t = 0.6 posicao = v0 * t - 0.5 * g * t * t velocidade = v0 - g * t print 'posi\u00e7\u00e3o:' , posicao , 'velocidade:' , velocidade Entrada: v0 , g , e t Sa\u00edda: posicao e velocidade","title":"Entrada e Sa\u00edda"},{"location":"equacoes/sintaxe/#sistema-operacional","text":"Um sistema operacional (OS) \u00e9 um conjunto de programas que gerenciam os recursos de hardware e software em um computador. Linux, Unix (Ubuntu, RedHat, Suse, Solaris) Windows (95, 98, NT, ME, 2000, XP, Vista, 7, 8) Macintosh (old Mac OS, Mac OS X) Mac OS X $ \\approx $ Unix $ \\approx $ Linux $ \\neq $ Windows Os comandos tipicos do OS s\u00e3o bem similares: Linux/Unix: mkdir nome-da-pasta; cd nome-da-pasta; ls Windows: mkdir nome-da-pasta; cd nome-da-pasta; dir Python suporta programa\u00e7\u00e3o cross-plataforma, ou seja, um programa \u00e9 independente de qual OS utilizamos para programar ou rodar o programa.","title":"Sistema Operacional"},{"location":"equacoes/sintaxe/#avaliando-uma-equacao-para-conversao-de-temperatura","text":"Dado $ C $ como uma temperatura em graus Celsius, calcule a temperatura correspondente em graus Fahrenheit $ F $: F = \\frac{9}{5}C + 32 Programa, em um editor de texto e salve como c2f.py : C = 21 F = ( 9 / 5 ) * C + 32 print F Execu\u00e7\u00e3o e resultado: Terminal> python c2f.py 53","title":"Avaliando uma equa\u00e7\u00e3o para convers\u00e3o de temperatura"},{"location":"equacoes/sintaxe/#resposta-certa","text":"Sempre deve-se checar se um novo programa calculou a resposta certa. Por exemplo, usando uma calculadora: 9/5 vezes 21 mais 32 \u00e9 69.8, e n\u00e3o 53!!","title":"Resposta certa"},{"location":"equacoes/sintaxe/#erro-na-resposta","text":"O erro na resposta foi causado (n\u00e3o intencionalmente) por divis\u00e3o de inteiros. 9/5 n\u00e3o \u00e9 1.8 mas 1 na maioria das linguagens de programa\u00e7\u00e3o! Se $ a $ e $ b $ s\u00e3o inteiros, $ a/b $ implica em uma divis\u00e3o de inteiros: o maior inteiro $ c $ tal que $ cb\\leq a $; Exemplos: $ 1/5=0 $, $ 2/5=0 $, $ 7/5=1 $, $ 12/5=2 $; Na matem\u00e1tica, 9/5 \u00e9 um n\u00famero real (1.8) - isso \u00e9 chamado divis\u00e3o de ponto flutuante em Python e \u00e9 a divis\u00e3o que queremos; Um dos operandos ($ a $ ou $ b $) em $ a/b $ deve ser um n\u00famero real (ponto flutuante ou \"float\") para resultar na divis\u00e3o com ponto flutuante; Um float em Python possui um ponto (ou decimais): 9.0 ou 9. \u00e9 float; Nenhum ponto implica em inteiro: 9 \u00e9 um inteiro; 9.0/5 resulta 1.8 , 9/5. resulta 1.8 , 9/5 resulta 1 ; Corrija o programa de temperatura.","title":"Erro na resposta"},{"location":"equacoes/sintaxe/#tudo-no-python-e-um-objeto","text":"Vari\u00e1veis se referem \u00e0 objetos: a = 5 # a refere-se a um objeto inteiro (int) b = 9 # b refere-se a um objeto inteiro (int) c = 9.0 # c refere-se a um objeto n\u00famero real (float) d = b / a # d refere-se a uma int/int => objeto int e = c / a # e refere-se a uma float/int => objeto float s = 'b/a= %g ' % ( b / a ) # s \u00e9 um objeto string/texto (str) Podemos fazer convers\u00f5es entre objetos: a = 3 # a \u00e9 int b = float ( a ) # b \u00e9 float 3.0 c = 3.9 # c \u00e9 float d = int ( c ) # d \u00e9 int 3 d = round ( c ) # d \u00e9 float 4.0 d = int ( round ( c )) # d \u00e9 int 4 d = str ( c ) # d \u00e9 str '3.9' e = '-4.2' # e \u00e9 str f = float ( e ) # f \u00e9 float -4.2","title":"Tudo no Python \u00e9 um objeto"},{"location":"equacoes/sintaxe/#expressoes-aritmeticas","text":"Express\u00f5es aritm\u00e9ticas s\u00e3o avaliadas como voc\u00ea aprendeu na matem\u00e1tica: Exemplo: $ \\dfrac{5}{9} + 2\\dfrac{a^4}{2} $, no Python \u00e9 escrita como 5/9 + 2*a**4/2 As mesmas regras da matem\u00e1tica: procedimento termo \u00e0 termo* a partir da esquerda, no mesmo termo pot\u00eancias s\u00e3o calculadas primeiro, depois multiplica\u00e7\u00e3o e divis\u00e3o, por fim adi\u00e7\u00f5es/subtra\u00e7\u00f5es: r1 = 5/9 (=0) r2 = a**4 r3 = 2*r2 r4 = r3/2 r5 = r1 + r4 Use parenteses para sobrescrever essas regras padr\u00f5es, ou use parenteses para explicitamente dizer como as regras funcionam: (5/9) + (2*(a**4))/2 * Um termo \u00e9 definido ou separado por adi\u00e7\u00e3o ou subtra\u00e7\u00f5es.","title":"Express\u00f5es Aritm\u00e9ticas"},{"location":"equacoes/sintaxe/#funcoes-matematicas-padroes","text":"Algumas fun\u00e7\u00f5es matem\u00e1ticas podem ser encontradas no m\u00f3dulo math do python E se precisarmos calcular $\\sin x$, $\\cos x$, $\\ln x$, etc. em um programa? Tais fun\u00e7\u00f5es est\u00e3o dispon\u00edveis no m\u00f3dulo math do python; Um monte de funcionalidades \u00fateis est\u00e3o dispon\u00edveis em m\u00f3dulos do pr\u00f3prio Python e em m\u00f3dulos de terceiros; Para funcionar, devemos importar esses m\u00f3dulos para nosso programa. import math r = math . sqrt ( 2 ) # ou from math import sqrt r = sqrt ( 2 ) # ou from math import * # import tudo de math r = sqrt ( 2 ) Mais um exemplo do uso de fun\u00e7\u00f5es matem\u00e1ticas com o math : Calcule Q = \\sin x \\cos x + 4 \\ln x para $x=1,2$ import math x = 1.2 Q = math . sin ( x ) * math . cos ( x ) + 4 * math . log ( x ) print Q","title":"Fun\u00e7\u00f5es Matem\u00e1ticas Padr\u00f5es"},{"location":"equacoes/sintaxe/#erros-de-arredondamento","text":"Computadores possuem uma aritm\u00e9tica inexata por causa dos erros de arredondamento e ponto flutuante. Vamos calcular $1/49 \\times 49$ e $1/51 \\times 51$: v1 = 1 / 49.0 * 49 v2 = 1 / 51.0 * 51 print ' %.16f %.16f ' % ( v1 , v2 ) A sa\u00edda com os 16 decimais \u00e9 retornada como: 0.9999999999999999 1.0000000000000000 A maioria dos n\u00fameros reais possui uma representa\u00e7\u00e3o inexata em um computador (ex. 16 d\u00edgitos); Nem 1/49 ou 1/51 est\u00e1 representado exatamente, sendo o erro normalmente na ordem de $ 10^{-16} $; As vezes esses pequenos erros se propagam at\u00e9 a resposta final, as vezes n\u00e3o, e as vezes os pequenos erros s\u00e3o acumulados atrav\u00e9s de v\u00e1rias opera\u00e7\u00f5es matem\u00e1ticas; Li\u00e7\u00e3o aprendida: Os n\u00fameros reais em computadores e os resultados da c\u00e1lculos matem\u00e1ticos s\u00e3o apenas aproxima\u00e7\u00f5es!","title":"Erros de arredondamento"},{"location":"equacoes/sintaxe/#funcoes-matematicas-padroes-e-possiveis-erros","text":"Mais um exemplo do uso de fun\u00e7\u00f5es matem\u00e1ticas com o math : A fun\u00e7\u00e3o $\\sinh x$ \u00e9 definida como: \\sinh (x) = \\frac{1}{2}\\left(e^{x} - e^{-x}\\right) Podemos avaliar essa fun\u00e7\u00e3o de tr\u00eas formas: math.sinh combina\u00e7\u00e3o de duas math.exp combina\u00e7\u00e3o de duas pot\u00eancias de math.e from math import sinh , exp , e , pi x = 2 * pi r1 = sinh ( x ) r2 = 0.5 * ( exp ( x ) - exp ( - x )) r3 = 0.5 * ( e ** x - e ** ( - x )) print ' %.16f %.16f %.16f ' % ( r1 , r2 , r3 ) Sa\u00edda: 267.7448940410164369 267.7448940410164369 267.7448940410163232 ??","title":"Fun\u00e7\u00f5es Matem\u00e1ticas Padr\u00f5es e poss\u00edveis erros"},{"location":"equacoes/sintaxe/#python-interativo","text":"Python pode ser utilizado interativamente como uma calculadora e para testar declara\u00e7\u00f5es. At\u00e9 agora n\u00f3s executamos c\u00e1lculos em programas Python; Python tamb\u00e9m pode ser utilizado interativamente, utilizando o chamado shell ; Digite python , ou ipython , ou idle no terminal (CMD no windows); Um shell Python \u00e9 aberto onde voc\u00ea pode escrever declara\u00e7\u00f5es e realizar opera\u00e7\u00f5es em Python. Terminal> python ... >>> C = 41 >>> F = ( 9 .0/5 ) *C + 32 >>> F 105 .8 >>> print F 105 .8 >>> Comandos anteriores podem ser chamados novamente e editados com a seta para cima ou para baixo do teclado.","title":"Python interativo"},{"location":"equacoes/sintaxe/#numeros-complexos","text":"Python possui suporte total para c\u00e1lculos com n\u00fameros complexos. $2 + 3i$ na matem\u00e1tica \u00e9 escrito como 2 + 3j em Python. >>> a = -2 >>> b = 0 .5 >>> s = complex ( a, b ) # monte um complexo das vari\u00e1veis >>> s ( -2+0.5j ) >>> s*w # complexo*complexo ( -10.5-3.75j ) >>> s/w # complexo/complexo ( -0.25641025641025639+0.28205128205128205j ) >>> s.real -2.0 >>> s.imag 0 .5","title":"N\u00fameros Complexos"},{"location":"equacoes/sintaxe/#calculo-algebrico","text":"Python tamb\u00e9m pode realizar opera\u00e7\u00f5es alg\u00e9bricas, atrav\u00e9s do m\u00f3dulo sympy . Computa\u00e7\u00e3o num\u00e9rica: computa\u00e7\u00e3o com n\u00fameros; Computa\u00e7\u00e3o simb\u00f3lica: opera\u00e7\u00f5es alg\u00e9bricas com vari\u00e1veis. >>> from sympy import * >>> t, v0, g = symbols ( 't v0 g' ) >>> y = v0*t - Rational ( 1 ,2 ) *g*t**2 >>> dydt = diff ( y, t ) # 1a derivada >>> dydt -g*t + v0 >>> print 'acelera\u00e7\u00e3o:' , diff ( y, t, t ) # 2a derivada acelera\u00e7\u00e3o: -g >>> y2 = integrate ( dydt, t ) >>> y2 -g*t**2/2 + t*v0 Erro na importa\u00e7\u00e3o Foi gerado um erro de importa\u00e7\u00e3o? Voc\u00ea n\u00e3o tem o m\u00f3dulo sympy instalado! O SymPy pode realizar uma s\u00e9rie de opera\u00e7\u00f5es tradicionais da matem\u00e1tica. >>> y = v0*t - Rational ( 1 ,2 ) *g*t**2 >>> roots = solve ( y, t ) # resolve y=0 para t >>> roots [ 0 , 2 *v0/g ] >>> x, y = symbols ( 'x y' ) >>> f = -sin ( x ) *sin ( y ) + cos ( x ) *cos ( y ) >>> simplify ( f ) cos ( x + y ) >>> expand ( sin ( x+y ) , trig = True ) # na forma trigonom\u00e9trica sin ( x ) *cos ( y ) + sin ( y ) *cos ( x )","title":"C\u00e1lculo alg\u00e9brico"},{"location":"equacoes/sintaxe/#sumario-de-programando-equacoes","text":"Programas deve ser precisos! Vari\u00e1veis s\u00e3o nomes de objetos; Conhecemos diferentes tipos de objetos: int , float , str ; Escolha nomes de vari\u00e1veis pr\u00f3ximos aos s\u00edmbolos matem\u00e1ticos do problema sendo resolvido; Opera\u00e7\u00f5es aritm\u00e9ticas em Python: termo a termo (+/-) da esquerda para a direita, pot\u00eancias antes * e / - como na matem\u00e1tica! Use par\u00eanteses se ficar na d\u00favida; Cuidado com divis\u00f5es por inteiros! Use o printf para controlar melhor as sa\u00eddas; Termos importantes: objeto, vari\u00e1veis, algoritmos, declara\u00e7\u00f5es, atribui\u00e7\u00f5es, implementa\u00e7\u00e3o, verifica\u00e7\u00e3o, depura\u00e7\u00e3o.","title":"Sum\u00e1rio de Programando Equa\u00e7\u00f5es"},{"location":"equacoes/sintaxe/#programar-e-desafiador","text":"Cita\u00e7\u00e3o 1 You think you know when you can learn, are more sure when you can write, even more when you can teach, but certain when you can program Within a computer, natural language is unnatural To understand a program you must become both the machine and the program Alan Perlis, computer scientist, 1922-1990 .","title":"Programar \u00e9 desafiador!"},{"location":"equacoes/sintaxe/#tarefa","text":"Jogamos uma bola com velocidade inicial $v_0$, com um \u00e2ngulo $\\theta$ com a horizontal, a partir do ponto $(x = 3, y = y_0)$. A trajet\u00f3ria da bola \u00e9 uma par\u00e1bola (negligenciando a resist\u00eancia do ar): y = x \\tan\\theta - \\frac{1}{2v_0^2}\\frac{gx^2}{\\cos^2 \\theta} + y_0 Tarefas para o programa: inicie os dados de entrada ($ v_0 $, $ g $, $ \\theta $, $ y_0 $) importe o m\u00f3dulo math calcule $ y $ Dados $ x $, $ y $ e $ y_0 $ em m, $ g = 9,81 \\hbox {m/s}^2 $, $ v_0 $ em km/h e $ \\theta $ em graus - o que requer a convers\u00e3o de $ v_0 $ para m/s e $ \\theta $ para radianos Voc\u00ea pensa que sabe quando voc\u00ea pode aprender, tem mais certeza quando pode escrever, mais ainda quando pode ensinar, mas seguro quando voc\u00ea pode programar! Alan Perlis, computer scientist, 1922-1990 . \u21a9","title":"Tarefa"},{"location":"funcoesramificacoes/funcoeslambda/","text":"Fun\u00e7\u00f5es lambda Fun\u00e7\u00e3o lambda s\u00e3o utilizadas para defini\u00e7\u00f5es compactas de fun\u00e7\u00f5es em linha, exemplo: def f ( x ): return x ** 2 - 1 A constru\u00e7\u00e3o com lambda pode definir essa fun\u00e7\u00e3o em uma linha: f = lambda x : x ** 2 - 1 De forma geral: algumafunc = lambda a1 , a2 , ... : alguma_expresssao O que \u00e9 equivalente a: def algumafunc ( a1 , a2 , ... ): return alguma_expressao Fun\u00e7\u00f5es lambda podem ser usadas diretamente como argumento na chama de fun\u00e7\u00f5es: valor = algumaOutraFunc ( lambda x , y , z : x + y + 3 * z , 4 ) Exemplo do uso de uma fun\u00e7\u00e3o lambda para poupar tempo C\u00f3digo padr\u00e3o de fun\u00e7\u00f5es: def g ( t ): return t ** ( - 6 ) dgdt = dif2 ( g , 2 ) print dgdt Vers\u00e3o mais compacta com lambda : dgdt = dif2 ( lambda t : t ** ( - 6 ), 2 ) print dgdt","title":"Fun\u00e7\u00f5es lambda"},{"location":"funcoesramificacoes/funcoeslambda/#funcoes-lambda","text":"Fun\u00e7\u00e3o lambda s\u00e3o utilizadas para defini\u00e7\u00f5es compactas de fun\u00e7\u00f5es em linha, exemplo: def f ( x ): return x ** 2 - 1 A constru\u00e7\u00e3o com lambda pode definir essa fun\u00e7\u00e3o em uma linha: f = lambda x : x ** 2 - 1 De forma geral: algumafunc = lambda a1 , a2 , ... : alguma_expresssao O que \u00e9 equivalente a: def algumafunc ( a1 , a2 , ... ): return alguma_expressao Fun\u00e7\u00f5es lambda podem ser usadas diretamente como argumento na chama de fun\u00e7\u00f5es: valor = algumaOutraFunc ( lambda x , y , z : x + y + 3 * z , 4 )","title":"Fun\u00e7\u00f5es lambda"},{"location":"funcoesramificacoes/funcoeslambda/#exemplo-do-uso-de-uma-funcao-lambda-para-poupar-tempo","text":"C\u00f3digo padr\u00e3o de fun\u00e7\u00f5es: def g ( t ): return t ** ( - 6 ) dgdt = dif2 ( g , 2 ) print dgdt Vers\u00e3o mais compacta com lambda : dgdt = dif2 ( lambda t : t ** ( - 6 ), 2 ) print dgdt","title":"Exemplo do uso de uma fun\u00e7\u00e3o lambda para poupar tempo"},{"location":"funcoesramificacoes/funcoesramificacoes/","text":"Se sim, fa\u00e7a isso, se n\u00e3o, fa\u00e7a aquilo. Introduzindo dois conceitos fundamentais e extremamente \u00fateis na programa\u00e7\u00e3o: fun\u00e7\u00f5es definidas pelo programador e ramifica\u00e7\u00e3o do fluxo do programa, o \u00faltimo tamb\u00e9m conhecido como testes if . J\u00e1 usamos v\u00e1rias fun\u00e7\u00f5es em Python Fun\u00e7\u00f5es matem\u00e1ticas: import math y = math . sin ( x ) * math . log ( x ) Outras fun\u00e7\u00f5es: n = len ( algumalista ) inteiros = range ( 5 , n , 2 ) Fun\u00e7\u00f5es utilizadas com a sintaxe \"ponto\" (chamadas m\u00e9todos): C = [ 5 , 10 , 40 , 45 ] i = C . index ( 10 ) ## resultado: i=1 C . append ( 50 ) C . insert ( 2 , 20 ) Mas, o que \u00e9 uma fun\u00e7\u00e3o? At\u00e9 ent\u00e3o nos colocamos objetos nessas fun\u00e7\u00f5es e recebemos outro objeto delas. Agora \u00e9 hora de escrever nossas pr\u00f3prias fun\u00e7\u00f5es! Fun\u00e7\u00f5es s\u00e3o importantes Fun\u00e7\u00f5es s\u00e3o uma das mais importantes ferramentas em programan\u00e7\u00e3o. Fun\u00e7\u00e3o = uma cole\u00e7\u00e3o de declara\u00e7\u00f5es que podemos executar onde e quando quisermos; Uma fun\u00e7\u00e3o pode receber objetos de entrada (os argumentos) e produzir objetos de sa\u00edda (os resultados retornados); Fun\u00e7\u00f5es ajudam a organizar programas, fazem deles mais f\u00e1ceis de entender, curtos, reus\u00e1veis e f\u00e1ceis de se extender. Fun\u00e7\u00f5es em Python Fun\u00e7\u00e3o em Python para implementar uma fun\u00e7\u00e3o matem\u00e1tica: F(C)= \\dfrac{9}{5}C+32 pode ser implementada em Python como: def F ( C ): return ( 9.0 / 5 ) * C + 32 Notas: Fun\u00e7\u00f5es iniciam com def , seguido do nome da fun\u00e7\u00e3o e uma lista de argumentos (no caso C ), esse \u00e9 o cabe\u00e7alho da fun\u00e7\u00e3o; Dentro da fun\u00e7\u00e3o: declara\u00e7\u00f5es, essas s\u00e3o o corpo da fun\u00e7\u00e3o; Sempre que quisermos, dentro da fun\u00e7\u00e3o, podemos \"parar a fun\u00e7\u00e3o\" e retornar quantos valores/vari\u00e1veis quisermos. Fun\u00e7\u00f5es devem ser chamadas Uma fun\u00e7\u00e3o n\u00e3o faz nada at\u00e9 ser chamada. Nota A chamada F(C) produz (retorna) um objeto float , o que significa que F(C) \u00e9 substitu\u00eddo por esse objeto de ponto flutuante. Podemos, ent\u00e3o, fazer a chamada de F(C) em qualquer lugar onde um float pode ser utilizado. Argumentos de Fun\u00e7\u00f5es Fun\u00e7\u00f5es podem ter quantos argumentos quisermos. Fa\u00e7a um fun\u00e7\u00e3o em Python da fun\u00e7\u00e3o matem\u00e1tica: y(t) = v_0t- \\frac{1}{2}gt^2 Argumentos dentro da fun\u00e7\u00e3o Os argumentos se tornam vari\u00e1veis locais dentro da fun\u00e7\u00e3o. Vari\u00e1veis locais X Vari\u00e1veis globais Quando chamamos yfunc(t, 3) , todas essas declara\u00e7\u00f5es s\u00e3o de fato executadas: t = 0.6 #aos argumentos s\u00e3o atribu\u00eddos valores assim como na atribui\u00e7\u00e3o padr\u00e3o v0 = 3 g = 9.81 return v0 * t - 0.5 * g * t ** 2 Dentro da yfunc , t , v0 e g s\u00e3o vari\u00e1veis locais, n\u00e3o vis\u00edveis fora de yfunc e destru\u00eddas ap\u00f3s o return . Fora de yfunc (no programa principal) t , v0 e y s\u00e3o vari\u00e1veis globais, vis\u00edveis em qualquer lugar. Fun\u00e7\u00f5es e vari\u00e1veis globais Fun\u00e7\u00f5es podem acessar vari\u00e1veis globais. A fun\u00e7\u00e3o yfunc(t, v0) possui 2 argumentos. E se escrevessemos apenas com um, t : >>> def yfunc ( t ): ... g = 9.81 ... return v0 * t - 0.5 * g * t ** 2 ... >>> t = 0.6 >>> yfunc ( t ) ... NameError : global name 'v0' is not defined Problema> v0 deve ser definido antes da chamada de yfunc ! >>> def yfunc ( t ): ... g = 9.81 ... return v0 * t - 0.5 * g * t ** 2 ... >>> t = 0.6 >>> v0 = 5 >>> yfunc ( 0.6 ) 1.2342 Nota: v0 e t (no programa principal) s\u00e3o vari\u00e1veis globais, enquanto que t dentro da fun\u00e7\u00e3o yfunc \u00e9 uma vari\u00e1vel local. Vari\u00e1veis locais e globais de mesmo nome Vari\u00e1veis locais se sobrep\u00f5e \u00e0s vari\u00e1veis globais de mesmo nome. Teste o seguinte: Pergunta O que foi mostrado nos print ? Modificar vari\u00e1veis globais na fun\u00e7\u00e3o Vari\u00e1veis globais podem ser modificadas se declaradas como globais na fun\u00e7\u00e3o. O que foi mostrado? 1. v0: 2 4.0608 2. v0: 9 O que aconteceria de coment\u00e1ssemos a linha global v0 ? 1. v0: 2 4.0608 2. v0: 2 v0 em yfunc se torna uma vari\u00e1vel local. Fun\u00e7\u00f5es podem retornar m\u00faltiplos valores Digamos que queremos calcular $ y(t) $ e $ y'(t)=v_0-gt $: def yfunc ( t , v0 ): g = 9.81 y = v0 * t - 0.5 * g * t ** 2 dydt = v0 - g * t return y , dydt #chamada: posicao , velocidade = yfunc ( 0.6 , 3 ) Separe os objetos a serem retornados por v\u00edrgulas e os atribua a vari\u00e1veis tamb\u00e9m separadas por v\u00edrgulas. Na verdade, uma tupla \u00e9 retornada: >>> def f ( x ): ... return x , x ** 2 , x ** 4 ... >>> s = f ( 2 ) >>> s ( 2 , 4 , 16 ) >>> type ( s ) >>> x , x2 , x4 = f ( 2 ) Exemplo Calcule uma fun\u00e7\u00e3o definida como uma somat\u00f3ria: L(x,n) = \\sum_{i=1}^n {1 \\over i} \\left( {x \\over 1+x} \\right)^{i} Essa fun\u00e7\u00e3o \u00e9 uma aproxima\u00e7\u00e3o de $ \\ln (1+x) $ para $ n $ finito e $ x \\geq 1 $. Correspondente fun\u00e7\u00e3o em python para $ L(x,n) $: import math def L ( x , n ): x = float ( x ) #garantindo a divis\u00e3o abaixo em ponto flutuante s = 0 for i in range ( 1 , n + 1 ): s += ( 1.0 / i ) * ( x / ( 1 + x )) ** i return s x = 5 print L ( x , 10 ), L ( x , 100 ), math . log ( 1 + x ) Retornando os erros da fun\u00e7\u00e3o $ L(x, n) $ Podemos retornar mais: O primeiro termo negligenciado na soma; O erro ( $ \\ln (1+x) - L(x,n) $) import math def L2 ( x , n ): x = float ( x ) s = 0 for i in range ( 1 , n + 1 ): s += ( 1.0 / i ) * ( x / ( 1 + x )) ** i valor_soma = s prim_term_negl = ( 1.0 / ( n + 1 )) * ( x / ( 1 + x )) ** ( n + 1 ) #truncado erro_exato = math . log ( 1 + x ) - valor_soma return valor_soma , prim_term_negl , erro_exato #chamada t\u00edpica: x = 1.2 ; n = 100 valor , erro_aproximado , erro_exato = L2 ( x , n ) Fun\u00e7\u00f5es n\u00e3o precisam retornar objetos def algumafunc ( obj ): print obj valor_retorno = algumafunc ( 3.4 ) Aqui valor_retorno se torna None porque n\u00e3o retornamos nada da fun\u00e7\u00e3o explicitamente, Python vai inserir return None . Exemplo de uma fun\u00e7\u00e3o sem valor de retorno Fa\u00e7a uma tabela de $ L(x, n) $ X $ ln(1+x) $ def tabela ( x ): print ' \\n x= %g , ln(1+x)= %g ' % ( x , math . log ( 1 + x )) for n in [ 1 , 2 , 10 , 100 , 500 ]: valor , prox , erro = L2 ( x , n ) print 'n= %-4d %-10g (pr\u00f3ximo termo: %8.2e ' \\ 'erro: %8.2e )' % ( n , valor , prox , erro ) #chamada: tabela ( x ) N\u00e3o h\u00e1 a necessidade de retornar nada aqui, o prop\u00f3sito \u00e9 imprimir. x=10, ln(1+x)=2.3979 n=1 0.909091 (pr\u00f3ximo termo: 4.13e-01 erro: 1.49e+00) n=2 1.32231 (pr\u00f3ximo termo: 2.50e-01 erro: 1.08e+00) n=10 2.17907 (pr\u00f3ximo termo: 3.19e-02 erro: 2.19e-01) n=100 2.39789 (pr\u00f3ximo termo: 6.53e-07 erro: 6.59e-06) n=500 2.3979 (pr\u00f3ximo termo: 3.65e-24 erro: 6.22e-15) Agrumentos palavra-chave Os argumentos palavra-chave (keyword) s\u00e3o \u00fateis para simplificar a chamada de fun\u00e7\u00f5es e ajudar a documentar os argumentos. Esses argumentos s\u00e3o escritos na forma nome = valor : def algumafunc ( arg1 , arg2 , pcarg1 = True , pcarg2 = 0 ): print arg1 , arg2 , pcarg1 , pcarg2 Exemplos chamando fun\u00e7\u00f5es com palavra-chave >>> def algumafunc ( arg1 , arg2 , pcarg1 = True , pcarg2 = 0 ): >>> print arg1 , arg2 , pcarg1 , pcarg2 >>> algumafunc ( 'Bom dia' , [ 1 , 2 ]) #sem pcarg1 e pcarg2 Bom dia [ 1 , 2 ] True 0 #valores padr\u00f5es s\u00e3o usados >>> algumafunc ( 'Bom dia' , [ 1 , 2 ], pcarg1 = 'Oi' ) Bom dia [ 1 , 2 ] Oi 0 #pcarg2 permanece com o valor padr\u00e3o >>> algumafunc ( 'Bom dia' , [ 1 , 2 ], pcarg2 = 'Oi' ) Bom dia [ 1 , 2 ] True Oi ## pcarg1 permanece com o valor padr\u00e3o >>> algumafunc ( 'Bom dia' , [ 1 , 2 ], pcarg2 = 'Oi' , pcarg1 = 6 ) Bom dia [ 1 , 2 ] 6 Oi #todos os argumentos especificados Se usarmos nome = valor para todos os argumentos na chamada da fun\u00e7\u00e3o, sua sequencia pode ser arbitr\u00e1ria: >> algumafunc ( pcarg2 = 'Bom dia' , arg1 = 'Oi' , pcarg1 = 6 , arg2 = [ 2 ]) Oi [ 2 ] 6 Bom dia Fun\u00e7\u00e3o matem\u00e1tica com uma vari\u00e1vel e par\u00e2metros adicionais Como implementar uma fun\u00e7\u00e3o matem\u00e1tica de uma vari\u00e1vel, mas com par\u00e2metros adicionais? Considere a fun\u00e7\u00e3o de $ t $, com par\u00e2metros $ A $, $ a $ e $ \\omega $: f(t; A,a, \\omega) = Ae^{-at} \\sin ( \\omega t) Uma poss\u00edvel implementa\u00e7\u00e3o seria uma fun\u00e7\u00e3o Python com a vari\u00e1vel $ t $ como argumento posicional e $ A $, $ a $ e $ \\omega $ como argumentos palavra-chave: import math def f ( t , A = 1 , a = 1 , omega = 2 * math . pi ): return A * math . exp ( - a * t ) * math . sin ( omega * t ) v1 = f ( 0.2 ) v2 = f ( 0.2 , omega = 1 ) v2 = f ( 0.2 , 1 , 3 ) #o mesmo que f(0.2, A=1, a=3) v3 = f ( 0.2 , omega = 1 , A = 2.5 ) v4 = f ( A = 5 , a = 0.1 , omega = 1 , t = 1.3 ) v5 = f ( t = 0.2 , A = 9 ) v6 = f ( t = 0.2 , 9 ) #ilegal: palavra-chave antes do posicional Documentando uma fun\u00e7\u00e3o Doc Strings Importante conven\u00e7\u00e3o do Python: Documente o prop\u00f3sito da fun\u00e7\u00e3o, seus argumentos e seus valores de retorno em uma doc string , uma cadeia de caracteres entre triplas aspas escrita logo ap\u00f3s o cabe\u00e7alho da fun\u00e7\u00e3o. def C2F ( C ): \"\"\"Converte graus Celsius (C) para Fahrenheit.\"\"\" return ( 9.0 / 5 ) * C + 32 def linha ( x0 , y0 , x1 , y1 ): \"\"\" Calcula os coeficientes a e b na express\u00e3o matem\u00e1tica para uma linha reta y = a*x + b entre dois pontos (x0, y0) e (x1, y1). x0, y0: um ponto na linha (pontos flutuantes). x1, y1: outro ponto na linha (pontos flutuantes). retorno: a, b (pontos flutuantes) para a linha (y=a*x+b). \"\"\" a = ( y1 - y0 ) / ( x1 - x0 ) b = y0 - a * x0 return a , b Conven\u00e7\u00e3o de entrada e sa\u00edda em Python Entrada ( input ) s\u00e3o os argumentos da fun\u00e7\u00e3o, sa\u00edda ( output ) s\u00e3o os valores retornados. Uma fun\u00e7\u00e3o pode ter tr\u00eas tipos de dados de entrada e sa\u00edda: dados de entrada especificados atrav\u00e9s de argumentos posicionais ou palavra-chave; dados de entrada/sa\u00edda dados como argumentos posicionais/palavra-chave que ser\u00e3o modificados e retornados; dados de sa\u00edda criados dentro da fun\u00e7\u00e3o. Todos os dados de sa\u00edda s\u00e3o retornados e todos os dados de entrada s\u00e3o argumentos. def algumafunc ( i1 , i2 , i3 , io4 , io5 , i6 = valor1 , io7 = valor2 ): #modifica io4, io5, io7; calcula o1, o2, o3 return o1 , o2 , o3 , io4 , io5 , io7 Os argumentos da fun\u00e7\u00e3o s\u00e3o: entrada pura: i1, i2, i3, i6 entrada e sa\u00edda: io4, io5, io7 O programa principal \u00e9 uma s\u00e9rie de declara\u00e7\u00f5es fora de fun\u00e7\u00f5es import math #no principal def f ( x ): #no principal e = math . exp ( - 0.1 * x ) s = math . sin ( 6 * pi * x ) return e * s x = 2 #no principal y = f ( x ) #no principal print 'f( %g )= %g ' % ( x , y ) #no principal A execu\u00e7\u00e3o inicia com a primeira declara\u00e7\u00e3o no programa principal e continua linha por linha, de cima abaixo. Declara\u00e7\u00f5es def definem uma fun\u00e7\u00e3o, mas as declara\u00e7\u00f5es dentro da fun\u00e7\u00e3o somente s\u00e3o executadas quando a fun\u00e7\u00e3o \u00e9 chamada. Fun\u00e7\u00f5es Python como argumentos de fun\u00e7\u00f5es Pythom Programas fazendo c\u00e1lculos frequentes necessitam de fun\u00e7\u00f5es como argumentos de outras fun\u00e7\u00f5es, exemplo: Integra\u00e7\u00e3o num\u00e9rica: $ \\int_a^b f(x)dx $ Diferencia\u00e7\u00e3o num\u00e9rica: $ f'(x) $ Determina\u00e7\u00e3o de ra\u00edzes num\u00e9rica: $ f(x)=0 $ Todos esses casos precisam de $ f $ como uma fun\u00e7\u00e3o Python f(x) . Exemplo: c\u00e1lculo num\u00e9rico de $ f''(x) $: f''(x) \\approx {f(x-h) - 2f(x) + f(x+h) \\over h^2} def dif2 ( f , x , h = 1E-6 ): r = ( f ( x - h ) - 2 * f ( x ) + f ( x + h )) / float ( h * h ) return r Nenhuma dificuldade com $ f $ sendo uma fun\u00e7\u00e3o (bem mais complicado em outras linguagens). Aplica\u00e7\u00e3o da fun\u00e7\u00e3o dif2 Aten\u00e7\u00e3o VEJA A SA\u00cdDA COM ATEN\u00c7\u00c3O!!! C\u00f3digo: def g ( t ): return t ** ( - 6 ) #faz uma tabela de g''(t) para 13 valores de h: for k in range ( 1 , 14 ): h = 10 ** ( - k ) print 'h= %.0e : %.5f ' % ( h , dif2 ( g , 1 , h )) Sa\u00edda ( $ g''(1)=42 $): h=1e-01: 44.61504 h=1e-02: 42.02521 h=1e-03: 42.00025 h=1e-04: 42.00000 h=1e-05: 41.99999 h=1e-06: 42.00074 h=1e-07: 41.94423 h=1e-08: 47.73959 h=1e-09: -666.13381 h=1e-10: 0.00000 h=1e-11: 0.00000 h=1e-12: -666133814.77509 h=1e-13: 66613381477.50939 Erros de arredondamento causados por valores sem sentido na tabela Para $ h < 10^{-8} $ os resultados est\u00e3o totalmente errados! Esperar\u00edamos melhores aproxima\u00e7\u00f5es quando $ h $ se torna menor; Problema 1: para $ h $ pequenos subtra\u00edmos n\u00fameros de tamanho aproximado e isso gera os erros de arredondamento; Problema 2: para $ h $ pequenos os erros de arredondamento s\u00e3o multiplicados por um n\u00famero grande; Solu\u00e7\u00e3o: usar vari\u00e1veis do tipo ponto flutuante com mais d\u00edgitos; O Python tem um tipo de ponto flutuante (lento) ( decimal.Decimal ) com um n\u00famero arbitr\u00e1rio de d\u00edgitos; Usando 25 d\u00edgitos chegamos a resultados precisos para $ h \\leq 10^{-13} $; Mas, isso \u00e9 realmente um problema? Raramente. Outras incertezas nos dados de entrada para um c\u00e1lculo matem\u00e1tico fazem ter usualmente (por exemplo) $ 10^{-2} \\leq h \\leq 10^{-6} $ import decimal #pontos flutuantes com n\u00famero de d\u00edgitos arbitr\u00e1rios decimal . getcontext () . prec = 25 #usando 25 d\u00edgitos D = decimal . Decimal #forma curta de uma noto tipo de ponto flutuante def dif2 ( f , x , h = 1E-9 ): x = D ( str ( x )); h = D ( str ( h )) #convertendo para alta precis\u00e3o, precisa ser string r = ( f ( x - h ) - 2 * f ( x ) + f ( x + h )) / ( h * h ) return r def g ( t ): return t ** ( - 6 ) for k in range ( 1 , 15 ): h = 10 ** ( - k ) print 'h= %.0e : %.5f ' % ( h , dif2 ( g , 1 , h )) Sa\u00edda: h=1e-01: 44.61504 h=1e-02: 42.02521 h=1e-03: 42.00025 h=1e-04: 42.00000 h=1e-05: 42.00000 h=1e-06: 42.00000 h=1e-07: 42.00000 h=1e-08: 42.00000 h=1e-09: 42.00000 h=1e-10: 42.00000 h=1e-11: 42.00000 h=1e-12: 42.00000 h=1e-13: 20.00000 h=1e-14: 0.00000","title":"Fun\u00e7\u00f5es"},{"location":"funcoesramificacoes/funcoesramificacoes/#ja-usamos-varias-funcoes-em-python","text":"Fun\u00e7\u00f5es matem\u00e1ticas: import math y = math . sin ( x ) * math . log ( x ) Outras fun\u00e7\u00f5es: n = len ( algumalista ) inteiros = range ( 5 , n , 2 ) Fun\u00e7\u00f5es utilizadas com a sintaxe \"ponto\" (chamadas m\u00e9todos): C = [ 5 , 10 , 40 , 45 ] i = C . index ( 10 ) ## resultado: i=1 C . append ( 50 ) C . insert ( 2 , 20 ) Mas, o que \u00e9 uma fun\u00e7\u00e3o? At\u00e9 ent\u00e3o nos colocamos objetos nessas fun\u00e7\u00f5es e recebemos outro objeto delas. Agora \u00e9 hora de escrever nossas pr\u00f3prias fun\u00e7\u00f5es!","title":"J\u00e1 usamos v\u00e1rias fun\u00e7\u00f5es em Python"},{"location":"funcoesramificacoes/funcoesramificacoes/#funcoes-sao-importantes","text":"Fun\u00e7\u00f5es s\u00e3o uma das mais importantes ferramentas em programan\u00e7\u00e3o. Fun\u00e7\u00e3o = uma cole\u00e7\u00e3o de declara\u00e7\u00f5es que podemos executar onde e quando quisermos; Uma fun\u00e7\u00e3o pode receber objetos de entrada (os argumentos) e produzir objetos de sa\u00edda (os resultados retornados); Fun\u00e7\u00f5es ajudam a organizar programas, fazem deles mais f\u00e1ceis de entender, curtos, reus\u00e1veis e f\u00e1ceis de se extender.","title":"Fun\u00e7\u00f5es s\u00e3o importantes"},{"location":"funcoesramificacoes/funcoesramificacoes/#funcoes-em-python","text":"Fun\u00e7\u00e3o em Python para implementar uma fun\u00e7\u00e3o matem\u00e1tica: F(C)= \\dfrac{9}{5}C+32 pode ser implementada em Python como: def F ( C ): return ( 9.0 / 5 ) * C + 32 Notas: Fun\u00e7\u00f5es iniciam com def , seguido do nome da fun\u00e7\u00e3o e uma lista de argumentos (no caso C ), esse \u00e9 o cabe\u00e7alho da fun\u00e7\u00e3o; Dentro da fun\u00e7\u00e3o: declara\u00e7\u00f5es, essas s\u00e3o o corpo da fun\u00e7\u00e3o; Sempre que quisermos, dentro da fun\u00e7\u00e3o, podemos \"parar a fun\u00e7\u00e3o\" e retornar quantos valores/vari\u00e1veis quisermos.","title":"Fun\u00e7\u00f5es em Python"},{"location":"funcoesramificacoes/funcoesramificacoes/#funcoes-devem-ser-chamadas","text":"Uma fun\u00e7\u00e3o n\u00e3o faz nada at\u00e9 ser chamada. Nota A chamada F(C) produz (retorna) um objeto float , o que significa que F(C) \u00e9 substitu\u00eddo por esse objeto de ponto flutuante. Podemos, ent\u00e3o, fazer a chamada de F(C) em qualquer lugar onde um float pode ser utilizado.","title":"Fun\u00e7\u00f5es devem ser chamadas"},{"location":"funcoesramificacoes/funcoesramificacoes/#argumentos-de-funcoes","text":"Fun\u00e7\u00f5es podem ter quantos argumentos quisermos. Fa\u00e7a um fun\u00e7\u00e3o em Python da fun\u00e7\u00e3o matem\u00e1tica: y(t) = v_0t- \\frac{1}{2}gt^2","title":"Argumentos de Fun\u00e7\u00f5es"},{"location":"funcoesramificacoes/funcoesramificacoes/#argumentos-dentro-da-funcao","text":"Os argumentos se tornam vari\u00e1veis locais dentro da fun\u00e7\u00e3o. Vari\u00e1veis locais X Vari\u00e1veis globais Quando chamamos yfunc(t, 3) , todas essas declara\u00e7\u00f5es s\u00e3o de fato executadas: t = 0.6 #aos argumentos s\u00e3o atribu\u00eddos valores assim como na atribui\u00e7\u00e3o padr\u00e3o v0 = 3 g = 9.81 return v0 * t - 0.5 * g * t ** 2 Dentro da yfunc , t , v0 e g s\u00e3o vari\u00e1veis locais, n\u00e3o vis\u00edveis fora de yfunc e destru\u00eddas ap\u00f3s o return . Fora de yfunc (no programa principal) t , v0 e y s\u00e3o vari\u00e1veis globais, vis\u00edveis em qualquer lugar.","title":"Argumentos dentro da fun\u00e7\u00e3o"},{"location":"funcoesramificacoes/funcoesramificacoes/#funcoes-e-variaveis-globais","text":"Fun\u00e7\u00f5es podem acessar vari\u00e1veis globais. A fun\u00e7\u00e3o yfunc(t, v0) possui 2 argumentos. E se escrevessemos apenas com um, t : >>> def yfunc ( t ): ... g = 9.81 ... return v0 * t - 0.5 * g * t ** 2 ... >>> t = 0.6 >>> yfunc ( t ) ... NameError : global name 'v0' is not defined Problema> v0 deve ser definido antes da chamada de yfunc ! >>> def yfunc ( t ): ... g = 9.81 ... return v0 * t - 0.5 * g * t ** 2 ... >>> t = 0.6 >>> v0 = 5 >>> yfunc ( 0.6 ) 1.2342 Nota: v0 e t (no programa principal) s\u00e3o vari\u00e1veis globais, enquanto que t dentro da fun\u00e7\u00e3o yfunc \u00e9 uma vari\u00e1vel local.","title":"Fun\u00e7\u00f5es e vari\u00e1veis globais"},{"location":"funcoesramificacoes/funcoesramificacoes/#variaveis-locais-e-globais-de-mesmo-nome","text":"Vari\u00e1veis locais se sobrep\u00f5e \u00e0s vari\u00e1veis globais de mesmo nome. Teste o seguinte: Pergunta O que foi mostrado nos print ?","title":"Vari\u00e1veis locais e globais de mesmo nome"},{"location":"funcoesramificacoes/funcoesramificacoes/#modificar-variaveis-globais-na-funcao","text":"Vari\u00e1veis globais podem ser modificadas se declaradas como globais na fun\u00e7\u00e3o. O que foi mostrado? 1. v0: 2 4.0608 2. v0: 9 O que aconteceria de coment\u00e1ssemos a linha global v0 ? 1. v0: 2 4.0608 2. v0: 2 v0 em yfunc se torna uma vari\u00e1vel local.","title":"Modificar vari\u00e1veis globais na fun\u00e7\u00e3o"},{"location":"funcoesramificacoes/funcoesramificacoes/#funcoes-podem-retornar-multiplos-valores","text":"Digamos que queremos calcular $ y(t) $ e $ y'(t)=v_0-gt $: def yfunc ( t , v0 ): g = 9.81 y = v0 * t - 0.5 * g * t ** 2 dydt = v0 - g * t return y , dydt #chamada: posicao , velocidade = yfunc ( 0.6 , 3 ) Separe os objetos a serem retornados por v\u00edrgulas e os atribua a vari\u00e1veis tamb\u00e9m separadas por v\u00edrgulas. Na verdade, uma tupla \u00e9 retornada: >>> def f ( x ): ... return x , x ** 2 , x ** 4 ... >>> s = f ( 2 ) >>> s ( 2 , 4 , 16 ) >>> type ( s ) >>> x , x2 , x4 = f ( 2 )","title":"Fun\u00e7\u00f5es podem retornar m\u00faltiplos valores"},{"location":"funcoesramificacoes/funcoesramificacoes/#exemplo","text":"Calcule uma fun\u00e7\u00e3o definida como uma somat\u00f3ria: L(x,n) = \\sum_{i=1}^n {1 \\over i} \\left( {x \\over 1+x} \\right)^{i} Essa fun\u00e7\u00e3o \u00e9 uma aproxima\u00e7\u00e3o de $ \\ln (1+x) $ para $ n $ finito e $ x \\geq 1 $. Correspondente fun\u00e7\u00e3o em python para $ L(x,n) $: import math def L ( x , n ): x = float ( x ) #garantindo a divis\u00e3o abaixo em ponto flutuante s = 0 for i in range ( 1 , n + 1 ): s += ( 1.0 / i ) * ( x / ( 1 + x )) ** i return s x = 5 print L ( x , 10 ), L ( x , 100 ), math . log ( 1 + x )","title":"Exemplo"},{"location":"funcoesramificacoes/funcoesramificacoes/#retornando-os-erros-da-funcao-lx-n","text":"Podemos retornar mais: O primeiro termo negligenciado na soma; O erro ( $ \\ln (1+x) - L(x,n) $) import math def L2 ( x , n ): x = float ( x ) s = 0 for i in range ( 1 , n + 1 ): s += ( 1.0 / i ) * ( x / ( 1 + x )) ** i valor_soma = s prim_term_negl = ( 1.0 / ( n + 1 )) * ( x / ( 1 + x )) ** ( n + 1 ) #truncado erro_exato = math . log ( 1 + x ) - valor_soma return valor_soma , prim_term_negl , erro_exato #chamada t\u00edpica: x = 1.2 ; n = 100 valor , erro_aproximado , erro_exato = L2 ( x , n )","title":"Retornando os erros da fun\u00e7\u00e3o $ L(x, n) $"},{"location":"funcoesramificacoes/funcoesramificacoes/#funcoes-nao-precisam-retornar-objetos","text":"def algumafunc ( obj ): print obj valor_retorno = algumafunc ( 3.4 ) Aqui valor_retorno se torna None porque n\u00e3o retornamos nada da fun\u00e7\u00e3o explicitamente, Python vai inserir return None .","title":"Fun\u00e7\u00f5es n\u00e3o precisam retornar objetos"},{"location":"funcoesramificacoes/funcoesramificacoes/#exemplo-de-uma-funcao-sem-valor-de-retorno","text":"Fa\u00e7a uma tabela de $ L(x, n) $ X $ ln(1+x) $ def tabela ( x ): print ' \\n x= %g , ln(1+x)= %g ' % ( x , math . log ( 1 + x )) for n in [ 1 , 2 , 10 , 100 , 500 ]: valor , prox , erro = L2 ( x , n ) print 'n= %-4d %-10g (pr\u00f3ximo termo: %8.2e ' \\ 'erro: %8.2e )' % ( n , valor , prox , erro ) #chamada: tabela ( x ) N\u00e3o h\u00e1 a necessidade de retornar nada aqui, o prop\u00f3sito \u00e9 imprimir. x=10, ln(1+x)=2.3979 n=1 0.909091 (pr\u00f3ximo termo: 4.13e-01 erro: 1.49e+00) n=2 1.32231 (pr\u00f3ximo termo: 2.50e-01 erro: 1.08e+00) n=10 2.17907 (pr\u00f3ximo termo: 3.19e-02 erro: 2.19e-01) n=100 2.39789 (pr\u00f3ximo termo: 6.53e-07 erro: 6.59e-06) n=500 2.3979 (pr\u00f3ximo termo: 3.65e-24 erro: 6.22e-15)","title":"Exemplo de uma fun\u00e7\u00e3o sem valor de retorno"},{"location":"funcoesramificacoes/funcoesramificacoes/#agrumentos-palavra-chave","text":"Os argumentos palavra-chave (keyword) s\u00e3o \u00fateis para simplificar a chamada de fun\u00e7\u00f5es e ajudar a documentar os argumentos. Esses argumentos s\u00e3o escritos na forma nome = valor : def algumafunc ( arg1 , arg2 , pcarg1 = True , pcarg2 = 0 ): print arg1 , arg2 , pcarg1 , pcarg2","title":"Agrumentos palavra-chave"},{"location":"funcoesramificacoes/funcoesramificacoes/#exemplos-chamando-funcoes-com-palavra-chave","text":">>> def algumafunc ( arg1 , arg2 , pcarg1 = True , pcarg2 = 0 ): >>> print arg1 , arg2 , pcarg1 , pcarg2 >>> algumafunc ( 'Bom dia' , [ 1 , 2 ]) #sem pcarg1 e pcarg2 Bom dia [ 1 , 2 ] True 0 #valores padr\u00f5es s\u00e3o usados >>> algumafunc ( 'Bom dia' , [ 1 , 2 ], pcarg1 = 'Oi' ) Bom dia [ 1 , 2 ] Oi 0 #pcarg2 permanece com o valor padr\u00e3o >>> algumafunc ( 'Bom dia' , [ 1 , 2 ], pcarg2 = 'Oi' ) Bom dia [ 1 , 2 ] True Oi ## pcarg1 permanece com o valor padr\u00e3o >>> algumafunc ( 'Bom dia' , [ 1 , 2 ], pcarg2 = 'Oi' , pcarg1 = 6 ) Bom dia [ 1 , 2 ] 6 Oi #todos os argumentos especificados Se usarmos nome = valor para todos os argumentos na chamada da fun\u00e7\u00e3o, sua sequencia pode ser arbitr\u00e1ria: >> algumafunc ( pcarg2 = 'Bom dia' , arg1 = 'Oi' , pcarg1 = 6 , arg2 = [ 2 ]) Oi [ 2 ] 6 Bom dia","title":"Exemplos chamando fun\u00e7\u00f5es com palavra-chave"},{"location":"funcoesramificacoes/funcoesramificacoes/#funcao-matematica-com-uma-variavel-e-parametros-adicionais","text":"Como implementar uma fun\u00e7\u00e3o matem\u00e1tica de uma vari\u00e1vel, mas com par\u00e2metros adicionais? Considere a fun\u00e7\u00e3o de $ t $, com par\u00e2metros $ A $, $ a $ e $ \\omega $: f(t; A,a, \\omega) = Ae^{-at} \\sin ( \\omega t) Uma poss\u00edvel implementa\u00e7\u00e3o seria uma fun\u00e7\u00e3o Python com a vari\u00e1vel $ t $ como argumento posicional e $ A $, $ a $ e $ \\omega $ como argumentos palavra-chave: import math def f ( t , A = 1 , a = 1 , omega = 2 * math . pi ): return A * math . exp ( - a * t ) * math . sin ( omega * t ) v1 = f ( 0.2 ) v2 = f ( 0.2 , omega = 1 ) v2 = f ( 0.2 , 1 , 3 ) #o mesmo que f(0.2, A=1, a=3) v3 = f ( 0.2 , omega = 1 , A = 2.5 ) v4 = f ( A = 5 , a = 0.1 , omega = 1 , t = 1.3 ) v5 = f ( t = 0.2 , A = 9 ) v6 = f ( t = 0.2 , 9 ) #ilegal: palavra-chave antes do posicional","title":"Fun\u00e7\u00e3o matem\u00e1tica com uma vari\u00e1vel e par\u00e2metros adicionais"},{"location":"funcoesramificacoes/funcoesramificacoes/#documentando-uma-funcao-doc-strings","text":"Importante conven\u00e7\u00e3o do Python: Documente o prop\u00f3sito da fun\u00e7\u00e3o, seus argumentos e seus valores de retorno em uma doc string , uma cadeia de caracteres entre triplas aspas escrita logo ap\u00f3s o cabe\u00e7alho da fun\u00e7\u00e3o. def C2F ( C ): \"\"\"Converte graus Celsius (C) para Fahrenheit.\"\"\" return ( 9.0 / 5 ) * C + 32 def linha ( x0 , y0 , x1 , y1 ): \"\"\" Calcula os coeficientes a e b na express\u00e3o matem\u00e1tica para uma linha reta y = a*x + b entre dois pontos (x0, y0) e (x1, y1). x0, y0: um ponto na linha (pontos flutuantes). x1, y1: outro ponto na linha (pontos flutuantes). retorno: a, b (pontos flutuantes) para a linha (y=a*x+b). \"\"\" a = ( y1 - y0 ) / ( x1 - x0 ) b = y0 - a * x0 return a , b","title":"Documentando uma fun\u00e7\u00e3o Doc Strings"},{"location":"funcoesramificacoes/funcoesramificacoes/#convencao-de-entrada-e-saida-em-python","text":"Entrada ( input ) s\u00e3o os argumentos da fun\u00e7\u00e3o, sa\u00edda ( output ) s\u00e3o os valores retornados. Uma fun\u00e7\u00e3o pode ter tr\u00eas tipos de dados de entrada e sa\u00edda: dados de entrada especificados atrav\u00e9s de argumentos posicionais ou palavra-chave; dados de entrada/sa\u00edda dados como argumentos posicionais/palavra-chave que ser\u00e3o modificados e retornados; dados de sa\u00edda criados dentro da fun\u00e7\u00e3o. Todos os dados de sa\u00edda s\u00e3o retornados e todos os dados de entrada s\u00e3o argumentos. def algumafunc ( i1 , i2 , i3 , io4 , io5 , i6 = valor1 , io7 = valor2 ): #modifica io4, io5, io7; calcula o1, o2, o3 return o1 , o2 , o3 , io4 , io5 , io7 Os argumentos da fun\u00e7\u00e3o s\u00e3o: entrada pura: i1, i2, i3, i6 entrada e sa\u00edda: io4, io5, io7","title":"Conven\u00e7\u00e3o de entrada e sa\u00edda em Python"},{"location":"funcoesramificacoes/funcoesramificacoes/#o-programa-principal-e-uma-serie-de-declaracoes-fora-de-funcoes","text":"import math #no principal def f ( x ): #no principal e = math . exp ( - 0.1 * x ) s = math . sin ( 6 * pi * x ) return e * s x = 2 #no principal y = f ( x ) #no principal print 'f( %g )= %g ' % ( x , y ) #no principal A execu\u00e7\u00e3o inicia com a primeira declara\u00e7\u00e3o no programa principal e continua linha por linha, de cima abaixo. Declara\u00e7\u00f5es def definem uma fun\u00e7\u00e3o, mas as declara\u00e7\u00f5es dentro da fun\u00e7\u00e3o somente s\u00e3o executadas quando a fun\u00e7\u00e3o \u00e9 chamada.","title":"O programa principal \u00e9 uma s\u00e9rie de declara\u00e7\u00f5es fora de fun\u00e7\u00f5es"},{"location":"funcoesramificacoes/funcoesramificacoes/#funcoes-python-como-argumentos-de-funcoes-pythom","text":"Programas fazendo c\u00e1lculos frequentes necessitam de fun\u00e7\u00f5es como argumentos de outras fun\u00e7\u00f5es, exemplo: Integra\u00e7\u00e3o num\u00e9rica: $ \\int_a^b f(x)dx $ Diferencia\u00e7\u00e3o num\u00e9rica: $ f'(x) $ Determina\u00e7\u00e3o de ra\u00edzes num\u00e9rica: $ f(x)=0 $ Todos esses casos precisam de $ f $ como uma fun\u00e7\u00e3o Python f(x) . Exemplo: c\u00e1lculo num\u00e9rico de $ f''(x) $: f''(x) \\approx {f(x-h) - 2f(x) + f(x+h) \\over h^2} def dif2 ( f , x , h = 1E-6 ): r = ( f ( x - h ) - 2 * f ( x ) + f ( x + h )) / float ( h * h ) return r Nenhuma dificuldade com $ f $ sendo uma fun\u00e7\u00e3o (bem mais complicado em outras linguagens).","title":"Fun\u00e7\u00f5es Python como argumentos de fun\u00e7\u00f5es Pythom"},{"location":"funcoesramificacoes/funcoesramificacoes/#aplicacao-da-funcao-dif2","text":"Aten\u00e7\u00e3o VEJA A SA\u00cdDA COM ATEN\u00c7\u00c3O!!! C\u00f3digo: def g ( t ): return t ** ( - 6 ) #faz uma tabela de g''(t) para 13 valores de h: for k in range ( 1 , 14 ): h = 10 ** ( - k ) print 'h= %.0e : %.5f ' % ( h , dif2 ( g , 1 , h )) Sa\u00edda ( $ g''(1)=42 $): h=1e-01: 44.61504 h=1e-02: 42.02521 h=1e-03: 42.00025 h=1e-04: 42.00000 h=1e-05: 41.99999 h=1e-06: 42.00074 h=1e-07: 41.94423 h=1e-08: 47.73959 h=1e-09: -666.13381 h=1e-10: 0.00000 h=1e-11: 0.00000 h=1e-12: -666133814.77509 h=1e-13: 66613381477.50939","title":"Aplica\u00e7\u00e3o da fun\u00e7\u00e3o dif2"},{"location":"funcoesramificacoes/funcoesramificacoes/#erros-de-arredondamento-causados-por-valores-sem-sentido-na-tabela","text":"Para $ h < 10^{-8} $ os resultados est\u00e3o totalmente errados! Esperar\u00edamos melhores aproxima\u00e7\u00f5es quando $ h $ se torna menor; Problema 1: para $ h $ pequenos subtra\u00edmos n\u00fameros de tamanho aproximado e isso gera os erros de arredondamento; Problema 2: para $ h $ pequenos os erros de arredondamento s\u00e3o multiplicados por um n\u00famero grande; Solu\u00e7\u00e3o: usar vari\u00e1veis do tipo ponto flutuante com mais d\u00edgitos; O Python tem um tipo de ponto flutuante (lento) ( decimal.Decimal ) com um n\u00famero arbitr\u00e1rio de d\u00edgitos; Usando 25 d\u00edgitos chegamos a resultados precisos para $ h \\leq 10^{-13} $; Mas, isso \u00e9 realmente um problema? Raramente. Outras incertezas nos dados de entrada para um c\u00e1lculo matem\u00e1tico fazem ter usualmente (por exemplo) $ 10^{-2} \\leq h \\leq 10^{-6} $ import decimal #pontos flutuantes com n\u00famero de d\u00edgitos arbitr\u00e1rios decimal . getcontext () . prec = 25 #usando 25 d\u00edgitos D = decimal . Decimal #forma curta de uma noto tipo de ponto flutuante def dif2 ( f , x , h = 1E-9 ): x = D ( str ( x )); h = D ( str ( h )) #convertendo para alta precis\u00e3o, precisa ser string r = ( f ( x - h ) - 2 * f ( x ) + f ( x + h )) / ( h * h ) return r def g ( t ): return t ** ( - 6 ) for k in range ( 1 , 15 ): h = 10 ** ( - k ) print 'h= %.0e : %.5f ' % ( h , dif2 ( g , 1 , h )) Sa\u00edda: h=1e-01: 44.61504 h=1e-02: 42.02521 h=1e-03: 42.00025 h=1e-04: 42.00000 h=1e-05: 42.00000 h=1e-06: 42.00000 h=1e-07: 42.00000 h=1e-08: 42.00000 h=1e-09: 42.00000 h=1e-10: 42.00000 h=1e-11: 42.00000 h=1e-12: 42.00000 h=1e-13: 20.00000 h=1e-14: 0.00000","title":"Erros de arredondamento causados por valores sem sentido na tabela"},{"location":"funcoesramificacoes/funcoesteste/","text":"Fun\u00e7\u00f5es de teste de fun\u00e7\u00f5es Vamos escrever fun\u00e7\u00f5es de teste especiais para verificar outras fun\u00e7\u00f5es: def dobrar ( x ): #uma fun\u00e7\u00e3o qualquer return 2 * x def test_dobrar (): #fun\u00e7\u00e3o de teste associada \"\"\"Chama dobrar(x) para checar se ela funciona.\"\"\" x = 4 #alguns valores de x escolhidos esperado = 8 #resultado esperado da fun\u00e7\u00e3o dobrar(x) calculado = dobrar ( x ) sucesso = calculado == esperado #valor condicional: o teste passou? msg = 'calculado %s , esperado %s ' % ( calculado , esperado ) assert sucesso , msg Regras para fun\u00e7\u00f5es teste: o nome inicia em test_ ; sem argumentos; deve ter uma declara\u00e7\u00e3o de sucesso assert , onde o sucesso \u00e9 True se o teste passou e False se n\u00e3o. A linha assert sucesso, msg imprime a mensagem msg junto com o levantamento do erro quando o teste falha. Fun\u00e7\u00f5es teste com v\u00e1rios testes def dobrar ( x ): #alguma fun\u00e7\u00e3o return 2 * x def test_dobrar (): #fun\u00e7\u00e3o teste associada tol = 1E-14 #toler\u00e2ncia para compara\u00e7\u00e3o de ponto flutuante valores_x = [ 3 , 7 , - 2 , 0 , 4.5 ] valores_esperados = [ 6 , 14 , - 4 , 0 , 9 ] for x , esperado in zip ( valores_x , valores_esperados ): calculado = dobrar ( x ) msg = ' %s != %s ' % ( calculado , esperado ) assert abs ( esperado - calculado ) < tol , msg A fun\u00e7\u00e3o teste vai rodar silenciosamente se todos os testes passarem. Se um dos testes acima falhar, o assert vai levantar um erro de afirma\u00e7\u00e3o ( AssertionError ). Porque escrever fun\u00e7\u00f5es teste de acordo com essas regras? F\u00e1cil de reconhecer onde fun\u00e7\u00f5es s\u00e3o verificadas; Bibliotecas de teste, como nose e pytest podem rodar automaticamente todas as suas fun\u00e7\u00f5es teste (em uma \u00e1rvore de diret\u00f3rios) e reportar algum erro que tenha passado desapercebido. Essa \u00e9 uma regra padr\u00e3o muito bem estabelecida. Recomenda-se o uso do pytest por ter uma sa\u00edda melhor. Unidades de teste Fun\u00e7\u00f5es de teste como test_dobrar() \u00e9 frequentemente referenciada como unidade de teste ( test unit ) pois testa uma pequena parte (fun\u00e7\u00e3o) do programa. Quando todas as unidades de teste funcionam, o programa supostamente deve funcionar. Tarefa A Integral \\int_a^b f(x)dx pode ser aproximada pela regra de Simpson : \\int_a^b f(x)dx \\approx {b-a \\over 3n} \\biggl( f(a) + f(b) + 4 \\sum_{i=1}^{n/2} f(a + (2i-1)h) + 2 \\sum_{i=1}^{n/2-1} f(a+2ih) \\biggr) Problema: Fa\u00e7a uma fun\u00e7\u00e3o Simpson(f, a, b, n=500) para calcular a integral de $f(x)$ pela regra de Simpson, sendo $f(x)$: {3 \\over2} \\int_0^ \\pi \\sin^3 \\theta d \\theta (valor exato: 2) para $ n=2,6,12,100,500 $. Use fun\u00e7\u00f5es de verifica\u00e7\u00e3o (mais de uma) para verificar se a fun\u00e7\u00e3o Simpson(f, a, b, n=500) est\u00e1 integrando corretamente.","title":"Fun\u00e7oes de teste"},{"location":"funcoesramificacoes/funcoesteste/#funcoes-de-teste-de-funcoes","text":"Vamos escrever fun\u00e7\u00f5es de teste especiais para verificar outras fun\u00e7\u00f5es: def dobrar ( x ): #uma fun\u00e7\u00e3o qualquer return 2 * x def test_dobrar (): #fun\u00e7\u00e3o de teste associada \"\"\"Chama dobrar(x) para checar se ela funciona.\"\"\" x = 4 #alguns valores de x escolhidos esperado = 8 #resultado esperado da fun\u00e7\u00e3o dobrar(x) calculado = dobrar ( x ) sucesso = calculado == esperado #valor condicional: o teste passou? msg = 'calculado %s , esperado %s ' % ( calculado , esperado ) assert sucesso , msg Regras para fun\u00e7\u00f5es teste: o nome inicia em test_ ; sem argumentos; deve ter uma declara\u00e7\u00e3o de sucesso assert , onde o sucesso \u00e9 True se o teste passou e False se n\u00e3o. A linha assert sucesso, msg imprime a mensagem msg junto com o levantamento do erro quando o teste falha.","title":"Fun\u00e7\u00f5es de teste de fun\u00e7\u00f5es"},{"location":"funcoesramificacoes/funcoesteste/#funcoes-teste-com-varios-testes","text":"def dobrar ( x ): #alguma fun\u00e7\u00e3o return 2 * x def test_dobrar (): #fun\u00e7\u00e3o teste associada tol = 1E-14 #toler\u00e2ncia para compara\u00e7\u00e3o de ponto flutuante valores_x = [ 3 , 7 , - 2 , 0 , 4.5 ] valores_esperados = [ 6 , 14 , - 4 , 0 , 9 ] for x , esperado in zip ( valores_x , valores_esperados ): calculado = dobrar ( x ) msg = ' %s != %s ' % ( calculado , esperado ) assert abs ( esperado - calculado ) < tol , msg A fun\u00e7\u00e3o teste vai rodar silenciosamente se todos os testes passarem. Se um dos testes acima falhar, o assert vai levantar um erro de afirma\u00e7\u00e3o ( AssertionError ).","title":"Fun\u00e7\u00f5es teste com v\u00e1rios testes"},{"location":"funcoesramificacoes/funcoesteste/#porque-escrever-funcoes-teste-de-acordo-com-essas-regras","text":"F\u00e1cil de reconhecer onde fun\u00e7\u00f5es s\u00e3o verificadas; Bibliotecas de teste, como nose e pytest podem rodar automaticamente todas as suas fun\u00e7\u00f5es teste (em uma \u00e1rvore de diret\u00f3rios) e reportar algum erro que tenha passado desapercebido. Essa \u00e9 uma regra padr\u00e3o muito bem estabelecida. Recomenda-se o uso do pytest por ter uma sa\u00edda melhor. Unidades de teste Fun\u00e7\u00f5es de teste como test_dobrar() \u00e9 frequentemente referenciada como unidade de teste ( test unit ) pois testa uma pequena parte (fun\u00e7\u00e3o) do programa. Quando todas as unidades de teste funcionam, o programa supostamente deve funcionar.","title":"Porque escrever fun\u00e7\u00f5es teste de acordo com essas regras?"},{"location":"funcoesramificacoes/funcoesteste/#tarefa","text":"A Integral \\int_a^b f(x)dx pode ser aproximada pela regra de Simpson : \\int_a^b f(x)dx \\approx {b-a \\over 3n} \\biggl( f(a) + f(b) + 4 \\sum_{i=1}^{n/2} f(a + (2i-1)h) + 2 \\sum_{i=1}^{n/2-1} f(a+2ih) \\biggr) Problema: Fa\u00e7a uma fun\u00e7\u00e3o Simpson(f, a, b, n=500) para calcular a integral de $f(x)$ pela regra de Simpson, sendo $f(x)$: {3 \\over2} \\int_0^ \\pi \\sin^3 \\theta d \\theta (valor exato: 2) para $ n=2,6,12,100,500 $. Use fun\u00e7\u00f5es de verifica\u00e7\u00e3o (mais de uma) para verificar se a fun\u00e7\u00e3o Simpson(f, a, b, n=500) est\u00e1 integrando corretamente.","title":"Tarefa"},{"location":"funcoesramificacoes/ramificacoes/","text":"Ramifica\u00e7\u00f5es no fluxo de declara\u00e7\u00f5es com o if Algumas vezes queremos fazer a\u00e7\u00f5es diferentes dependendo de uma condi\u00e7\u00e3o. Exemplo: f(x) = \\left \\lbrace \\begin{array}{ll} sen (x), & 0 \\leq x \\leq \\pi \\\\ 0, & \\hbox{outros} \\end{array} \\right. Uma implementa\u00e7\u00e3o Python de $f$ precisa testar o valor de $x$ e ramificar entre dois c\u00e1lculos diferentes: Forma geral de testes if A forma geral de escrita \u00e9: se-sen\u00e3o, no c\u00f3digo if-else , sendo que o else \u00e9 opcional. if condicional : < bloco de declara\u00e7\u00f5es , executados quando a condi\u00e7\u00e3o no if \u00e9 True > else : < bloco de declara\u00e7\u00f5es , executados quando a condi\u00e7\u00e3o no if \u00e9 False > Tamb\u00e9m \u00e9 poss\u00edvel um composi\u00e7\u00e3o com m\u00faltiplos if-else : if condicional1 : < bloco de declara\u00e7\u00f5es > elif condicional2 : < bloco de declara\u00e7\u00f5es > elif condicional3 : < bloco de declara\u00e7\u00f5es > else : < bloco de declara\u00e7\u00f5es > < pr\u00f3xima declara\u00e7\u00e3o > Exemplo com m\u00faltipla ramifica\u00e7\u00e3o Uma fun\u00e7\u00e3o definida por partes: N(x) = \\left \\lbrace \\begin{array}{ll} 0, & x < 0 \\\\ x, & 0 \\leq x < 1 \\\\ 2-x, & 1 \\leq x < 2 \\\\ 0, & x \\geq 2 \\end{array} \\right. A implementa\u00e7\u00e3o em Python com m\u00faltiplas ramifica\u00e7\u00f5es com if-else : def N ( x ): if x < 0 : return 0 elif 0 <= x < 1 : return x elif 1 <= x < 2 : return 2 - x elif x >= 2 : return 0 Testes if em linha para c\u00f3digos mais curtos Constru\u00e7\u00e3o padr\u00e3o: if condicional : variavel = valor1 else : variavel = valor2 Sintaxe mais compacta com if-else em uma linha: variavel = ( valor1 if condicional else valor2 ) Exemplo: def f ( x ): return ( sin ( x ) if 0 <= x <= 2 * pi else 0 )","title":"Ramifica\u00e7\u00f5es"},{"location":"funcoesramificacoes/ramificacoes/#ramificacoes-no-fluxo-de-declaracoes-com-o-if","text":"Algumas vezes queremos fazer a\u00e7\u00f5es diferentes dependendo de uma condi\u00e7\u00e3o. Exemplo: f(x) = \\left \\lbrace \\begin{array}{ll} sen (x), & 0 \\leq x \\leq \\pi \\\\ 0, & \\hbox{outros} \\end{array} \\right. Uma implementa\u00e7\u00e3o Python de $f$ precisa testar o valor de $x$ e ramificar entre dois c\u00e1lculos diferentes:","title":"Ramifica\u00e7\u00f5es no fluxo de declara\u00e7\u00f5es com o if"},{"location":"funcoesramificacoes/ramificacoes/#forma-geral-de-testes-if","text":"A forma geral de escrita \u00e9: se-sen\u00e3o, no c\u00f3digo if-else , sendo que o else \u00e9 opcional. if condicional : < bloco de declara\u00e7\u00f5es , executados quando a condi\u00e7\u00e3o no if \u00e9 True > else : < bloco de declara\u00e7\u00f5es , executados quando a condi\u00e7\u00e3o no if \u00e9 False > Tamb\u00e9m \u00e9 poss\u00edvel um composi\u00e7\u00e3o com m\u00faltiplos if-else : if condicional1 : < bloco de declara\u00e7\u00f5es > elif condicional2 : < bloco de declara\u00e7\u00f5es > elif condicional3 : < bloco de declara\u00e7\u00f5es > else : < bloco de declara\u00e7\u00f5es > < pr\u00f3xima declara\u00e7\u00e3o >","title":"Forma geral de testes if"},{"location":"funcoesramificacoes/ramificacoes/#exemplo-com-multipla-ramificacao","text":"Uma fun\u00e7\u00e3o definida por partes: N(x) = \\left \\lbrace \\begin{array}{ll} 0, & x < 0 \\\\ x, & 0 \\leq x < 1 \\\\ 2-x, & 1 \\leq x < 2 \\\\ 0, & x \\geq 2 \\end{array} \\right. A implementa\u00e7\u00e3o em Python com m\u00faltiplas ramifica\u00e7\u00f5es com if-else : def N ( x ): if x < 0 : return 0 elif 0 <= x < 1 : return x elif 1 <= x < 2 : return 2 - x elif x >= 2 : return 0","title":"Exemplo com m\u00faltipla ramifica\u00e7\u00e3o"},{"location":"funcoesramificacoes/ramificacoes/#testes-if-em-linha-para-codigos-mais-curtos","text":"Constru\u00e7\u00e3o padr\u00e3o: if condicional : variavel = valor1 else : variavel = valor2 Sintaxe mais compacta com if-else em uma linha: variavel = ( valor1 if condicional else valor2 ) Exemplo: def f ( x ): return ( sin ( x ) if 0 <= x <= 2 * pi else 0 )","title":"Testes if em linha para c\u00f3digos mais curtos"},{"location":"lacoslistas/condicionais/","text":"Condicionais Express\u00f5es condicionais s\u00e3o verdadeiras ou falsas Uma express\u00e3o com valor verdadeiro ( true ) ou falso ( false ) \u00e9 chamada de express\u00e3o condicional. Exemplos: $ C=40 $, $ C \\neq 40 $, $ C \\geq 40 $, $ C>40 $, $ C < 40 $. C == 40 ## note o duplo ==, C = 40 \u00e9 uma atribui\u00e7\u00e3o! C != 40 C >= 40 C > 40 C < 40 Podemos testar express\u00f5es condicionais no shell do Python: >>> C = 41 >>> C != 40 True >>> C < 40 False >>> C == 41 True Combinando express\u00f5es condicionais Varias condi\u00e7\u00f5es podem ser combinadas com e/ou and / or : while condi\u00e7\u00e3o1 and condi\u00e7\u00e3o2 : ... while condi\u00e7\u00e3o1 or condi\u00e7\u00e3o2 : ... Regra 1: condi\u00e7\u00e3o1 and condi\u00e7\u00e3o2 \u00e9 verdadeira se ambas, condi\u00e7\u00e3o1 e condi\u00e7\u00e3o2 forem verdadeiras. Regra 2: condi\u00e7\u00e3o1 or condi\u00e7\u00e3o2 \u00e9 verdadeira se uma for verdadeira, condi\u00e7\u00e3o1 ou condi\u00e7\u00e3o2. >>> x = 0 ; y = 1.2 >>> x >= 0 and y < 1 False >>> x >= 0 or y < 1 True >>> x > 0 or y > 1 True >>> x > 0 or not y > 1 False >>> - 1 < x <= 0 ## -1 < x e x <= 0 True >>> not ( x > 0 or y > 0 ) False","title":"Condicionais"},{"location":"lacoslistas/condicionais/#condicionais","text":"","title":"Condicionais"},{"location":"lacoslistas/condicionais/#expressoes-condicionais-sao-verdadeiras-ou-falsas","text":"Uma express\u00e3o com valor verdadeiro ( true ) ou falso ( false ) \u00e9 chamada de express\u00e3o condicional. Exemplos: $ C=40 $, $ C \\neq 40 $, $ C \\geq 40 $, $ C>40 $, $ C < 40 $. C == 40 ## note o duplo ==, C = 40 \u00e9 uma atribui\u00e7\u00e3o! C != 40 C >= 40 C > 40 C < 40 Podemos testar express\u00f5es condicionais no shell do Python: >>> C = 41 >>> C != 40 True >>> C < 40 False >>> C == 41 True","title":"Express\u00f5es condicionais s\u00e3o verdadeiras ou falsas"},{"location":"lacoslistas/condicionais/#combinando-expressoes-condicionais","text":"Varias condi\u00e7\u00f5es podem ser combinadas com e/ou and / or : while condi\u00e7\u00e3o1 and condi\u00e7\u00e3o2 : ... while condi\u00e7\u00e3o1 or condi\u00e7\u00e3o2 : ... Regra 1: condi\u00e7\u00e3o1 and condi\u00e7\u00e3o2 \u00e9 verdadeira se ambas, condi\u00e7\u00e3o1 e condi\u00e7\u00e3o2 forem verdadeiras. Regra 2: condi\u00e7\u00e3o1 or condi\u00e7\u00e3o2 \u00e9 verdadeira se uma for verdadeira, condi\u00e7\u00e3o1 ou condi\u00e7\u00e3o2. >>> x = 0 ; y = 1.2 >>> x >= 0 and y < 1 False >>> x >= 0 or y < 1 True >>> x > 0 or y > 1 True >>> x > 0 or not y > 1 False >>> - 1 < x <= 0 ## -1 < x e x <= 0 True >>> not ( x > 0 or y > 0 ) False","title":"Combinando express\u00f5es condicionais"},{"location":"lacoslistas/lacosavancados/","text":"La\u00e7os avan\u00e7ados La\u00e7o for sobre elementos em uma lista Podemos usar o la\u00e7o for para correr sobre os elementos de uma lista: Assim como os la\u00e7os while , as declara\u00e7\u00f5es no la\u00e7o devem ser indentadas! Simulando um la\u00e7o for na m\u00e3o graus = [ 0 , 10 , 20 , 40 , 100 ] for C in graus : print C print 'A lista de graus tem' , len ( degrees ), 'elementos' Simulando na m\u00e3o: Primeiro passo: C \u00e9 0 Segundo passo: C \u00e9 10 ...e assim por diante... Terceiro passo: C \u00e9 20 ...e assim por diante... Quinto passo: C \u00e9 100, agora o la\u00e7o terminou e o fluxo do programa pula para a primeira declara\u00e7\u00e3o com a mesma indenta\u00e7\u00e3o da linha for C in graus . Fazendo uma tabela com um la\u00e7o for Tabela de graus Celsius e Fahrenheit: grausC = [ - 20 , - 15 , - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 ] for C in grausC : F = ( 9.0 / 5 ) * C + 32 print C , F Nota: print C, F retorna uma sa\u00edda feia. Use a sintaxe do printf para deixar a formata\u00e7\u00e3o em duas colunas: print ' %5d %5.1f ' % ( C , F ) Sa\u00edda: - 20 - 4.0 - 15 5.0 - 10 14.0 - 5 23.0 0 32.0 ...... 35 95.0 40 104.0 Transformando for em um while O la\u00e7o for : for elemento in lista : ## processa elemento pode sempre ser transformado em um correspondente la\u00e7o while : indice = 0 while indice < len ( lista ): elemento = lista [ indice ] ## processa elemento indice += 1 O rec\u00edproco nem sempre \u00e9 verdadeiro Mas nem todo la\u00e7o while pode ser expressado como um la\u00e7o for ! Vers\u00e3o em while do la\u00e7o para fazer uma tabela Cgraus = [ - 20 , - 15 , - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 ] indice = 0 while indice < len ( Cgraus ): C = Cgraus [ indice ] F = ( 9.0 / 5 ) * C + 32 print ' %5d %5.1f ' % ( C , F ) indice += 1 Implemente uma somat\u00f3ria usando la\u00e7o S = \\sum\\_{i=1}^N i^2 N = 14 S = 0 for i in range ( 1 , N + 1 ): S += i ** 2 Ou (menos comum): S = 0 i = 1 while i <= N : S += i ** 2 i += 1 Lembrete Somat\u00f3rios s\u00e3o recorrentes, ent\u00e3o lembre-se da implementa\u00e7\u00e3o! Armazenando colunas de tabelas como listas Vamos colocar todos os valores de Fahrenheit tamb\u00e9m em uma lista: print Fgraus resulta em: [ - 4.0 , 5.0 , 14.0 , 23.0 , 32.0 , 41.0 , 50.0 , 59.0 , 68.0 , 77.0 , 86.0 , 95.0 , 104.0 ]","title":"La\u00e7os avan\u00e7ados"},{"location":"lacoslistas/lacosavancados/#lacos-avancados","text":"","title":"La\u00e7os avan\u00e7ados"},{"location":"lacoslistas/lacosavancados/#laco-for-sobre-elementos-em-uma-lista","text":"Podemos usar o la\u00e7o for para correr sobre os elementos de uma lista: Assim como os la\u00e7os while , as declara\u00e7\u00f5es no la\u00e7o devem ser indentadas!","title":"La\u00e7o for sobre elementos em uma lista"},{"location":"lacoslistas/lacosavancados/#simulando-um-laco-for-na-mao","text":"graus = [ 0 , 10 , 20 , 40 , 100 ] for C in graus : print C print 'A lista de graus tem' , len ( degrees ), 'elementos' Simulando na m\u00e3o: Primeiro passo: C \u00e9 0 Segundo passo: C \u00e9 10 ...e assim por diante... Terceiro passo: C \u00e9 20 ...e assim por diante... Quinto passo: C \u00e9 100, agora o la\u00e7o terminou e o fluxo do programa pula para a primeira declara\u00e7\u00e3o com a mesma indenta\u00e7\u00e3o da linha for C in graus .","title":"Simulando um la\u00e7o for na m\u00e3o"},{"location":"lacoslistas/lacosavancados/#fazendo-uma-tabela-com-um-laco-for","text":"Tabela de graus Celsius e Fahrenheit: grausC = [ - 20 , - 15 , - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 ] for C in grausC : F = ( 9.0 / 5 ) * C + 32 print C , F Nota: print C, F retorna uma sa\u00edda feia. Use a sintaxe do printf para deixar a formata\u00e7\u00e3o em duas colunas: print ' %5d %5.1f ' % ( C , F ) Sa\u00edda: - 20 - 4.0 - 15 5.0 - 10 14.0 - 5 23.0 0 32.0 ...... 35 95.0 40 104.0","title":"Fazendo uma tabela com um la\u00e7o for"},{"location":"lacoslistas/lacosavancados/#transformando-for-em-um-while","text":"O la\u00e7o for : for elemento in lista : ## processa elemento pode sempre ser transformado em um correspondente la\u00e7o while : indice = 0 while indice < len ( lista ): elemento = lista [ indice ] ## processa elemento indice += 1 O rec\u00edproco nem sempre \u00e9 verdadeiro Mas nem todo la\u00e7o while pode ser expressado como um la\u00e7o for !","title":"Transformando for em um while"},{"location":"lacoslistas/lacosavancados/#versao-em-while-do-laco-para-fazer-uma-tabela","text":"Cgraus = [ - 20 , - 15 , - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 ] indice = 0 while indice < len ( Cgraus ): C = Cgraus [ indice ] F = ( 9.0 / 5 ) * C + 32 print ' %5d %5.1f ' % ( C , F ) indice += 1","title":"Vers\u00e3o em while do la\u00e7o para fazer uma tabela"},{"location":"lacoslistas/lacosavancados/#implemente-uma-somatoria-usando-laco","text":"S = \\sum\\_{i=1}^N i^2 N = 14 S = 0 for i in range ( 1 , N + 1 ): S += i ** 2 Ou (menos comum): S = 0 i = 1 while i <= N : S += i ** 2 i += 1 Lembrete Somat\u00f3rios s\u00e3o recorrentes, ent\u00e3o lembre-se da implementa\u00e7\u00e3o!","title":"Implemente uma somat\u00f3ria usando la\u00e7o"},{"location":"lacoslistas/lacosavancados/#armazenando-colunas-de-tabelas-como-listas","text":"Vamos colocar todos os valores de Fahrenheit tamb\u00e9m em uma lista: print Fgraus resulta em: [ - 4.0 , 5.0 , 14.0 , 23.0 , 32.0 , 41.0 , 50.0 , 59.0 , 68.0 , 77.0 , 86.0 , 95.0 , 104.0 ]","title":"Armazenando colunas de tabelas como listas"},{"location":"lacoslistas/lacoslistas/","text":"La\u00e7os e Listas Vai repetir a declara\u00e7\u00e3o? La\u00e7o nela... Como tarefas repetitivas em um programa podem ser automatizadas com o uso de la\u00e7os. Tamb\u00e9m ser\u00e3o introduzidos os objetos listas para o armazenamento e processamento de cole\u00e7\u00f5es de dados com ordem espec\u00edfica. La\u00e7os e listas junto com o t\u00f3pico anterior, consistem na base fundamental para o resto do curso. Tabelas Fa\u00e7a uma tabela com graus Celsius e seus correspondentes graus Fahrenheit -20 -4.0 -15 5.0 -10 14.0 -5 23.0 0 32.0 5 41.0 10 50.0 15 59.0 20 68.0 25 77.0 30 86.0 35 95.0 40 104.0 Como um programa escreveria na sa\u00edda tal tabela? Fazendo uma tabela A solu\u00e7\u00e3o simples Sabemos como fazer uma linha na tabela: C = - 20 F = 9.0 / 5 * C + 32 print C , F Podemos, simplesmente, repetir a declara\u00e7\u00e3o: C = - 20 ; F = 9.0 / 5 * C + 32 ; print C , F C = - 10 ; F = 9.0 / 5 * C + 32 ; print C , F ... C = 35 ; F = 9.0 / 5 * C + 32 ; print C , F C = 40 ; F = 9.0 / 5 * C + 32 ; print C , F Muito tedioso de escrever, e f\u00e1cil de errar. Quando programar se torna tedioso, existe, normalmente uma constru\u00e7\u00e3o que automatiza a escrita! O computador \u00e9 muito bom em fazer tarefas repetitivas. Para isso, usamos os la\u00e7os . La\u00e7o while O la\u00e7o while torna poss\u00edvel repetir tarefas quase semelhantes. Um la\u00e7o while repete um conjunto de declara\u00e7\u00f5es enquanto uma condicional for verdadeira. while condi\u00e7\u00e3o : - declara\u00e7\u00e3o 1 - - declara\u00e7\u00e3o 2 - ... - primeira declara\u00e7\u00e3o ap\u00f3s o la\u00e7o - Todas as declara\u00e7\u00f5es em um la\u00e7o devem ser indentadas! Tabela com o la\u00e7o while print '------------------' ## cabe\u00e7alho da tabela C = - 20 ## valor inicial para C dC = 5 ## incremento de C no la\u00e7o while C <= 40 : ## cabe\u00e7alho do la\u00e7o com a condicional F = ( 9.0 / 5 ) * C + 32 ## 1a declara\u00e7\u00e3o do la\u00e7o print C , F ## 2a declara\u00e7\u00e3o do la\u00e7o C = C + dC ## \u00daltima declara\u00e7\u00e3o do la\u00e7o print '------------------' ## linha final da tabela Fluxo do programa em um la\u00e7o while Vamos simular o la\u00e7o while na m\u00e3o: Primeiro C \u00e9 -20, $ -20 \\leq 40 $ \u00e9 verdade, ent\u00e3o executamos as declara\u00e7\u00f5es do la\u00e7o. Calculamos F , visualizamos o print , e atualizamos C para -15. Voltamos para a linha do while , avaliamos $ C \\leq 40 $, que \u00e9 verdade, ent\u00e3o vamos a uma nova rodada do la\u00e7o. Continuamos assim at\u00e9 que o C seja atualizado para 45. Agora a condi\u00e7\u00e3o do la\u00e7o $ 45 \\leq 40 $ \u00e9 falsa, e o programa pula para a primeira linha ap\u00f3s o la\u00e7o, e o la\u00e7o termina.","title":"La\u00e7os simples"},{"location":"lacoslistas/lacoslistas/#lacos-e-listas","text":"Vai repetir a declara\u00e7\u00e3o? La\u00e7o nela... Como tarefas repetitivas em um programa podem ser automatizadas com o uso de la\u00e7os. Tamb\u00e9m ser\u00e3o introduzidos os objetos listas para o armazenamento e processamento de cole\u00e7\u00f5es de dados com ordem espec\u00edfica. La\u00e7os e listas junto com o t\u00f3pico anterior, consistem na base fundamental para o resto do curso.","title":"La\u00e7os e Listas"},{"location":"lacoslistas/lacoslistas/#tabelas","text":"Fa\u00e7a uma tabela com graus Celsius e seus correspondentes graus Fahrenheit -20 -4.0 -15 5.0 -10 14.0 -5 23.0 0 32.0 5 41.0 10 50.0 15 59.0 20 68.0 25 77.0 30 86.0 35 95.0 40 104.0 Como um programa escreveria na sa\u00edda tal tabela?","title":"Tabelas"},{"location":"lacoslistas/lacoslistas/#fazendo-uma-tabela","text":"","title":"Fazendo uma tabela"},{"location":"lacoslistas/lacoslistas/#a-solucao-simples","text":"Sabemos como fazer uma linha na tabela: C = - 20 F = 9.0 / 5 * C + 32 print C , F Podemos, simplesmente, repetir a declara\u00e7\u00e3o: C = - 20 ; F = 9.0 / 5 * C + 32 ; print C , F C = - 10 ; F = 9.0 / 5 * C + 32 ; print C , F ... C = 35 ; F = 9.0 / 5 * C + 32 ; print C , F C = 40 ; F = 9.0 / 5 * C + 32 ; print C , F Muito tedioso de escrever, e f\u00e1cil de errar. Quando programar se torna tedioso, existe, normalmente uma constru\u00e7\u00e3o que automatiza a escrita! O computador \u00e9 muito bom em fazer tarefas repetitivas. Para isso, usamos os la\u00e7os .","title":"A solu\u00e7\u00e3o simples"},{"location":"lacoslistas/lacoslistas/#laco-while","text":"O la\u00e7o while torna poss\u00edvel repetir tarefas quase semelhantes. Um la\u00e7o while repete um conjunto de declara\u00e7\u00f5es enquanto uma condicional for verdadeira. while condi\u00e7\u00e3o : - declara\u00e7\u00e3o 1 - - declara\u00e7\u00e3o 2 - ... - primeira declara\u00e7\u00e3o ap\u00f3s o la\u00e7o - Todas as declara\u00e7\u00f5es em um la\u00e7o devem ser indentadas!","title":"La\u00e7o while"},{"location":"lacoslistas/lacoslistas/#tabela-com-o-laco-while","text":"print '------------------' ## cabe\u00e7alho da tabela C = - 20 ## valor inicial para C dC = 5 ## incremento de C no la\u00e7o while C <= 40 : ## cabe\u00e7alho do la\u00e7o com a condicional F = ( 9.0 / 5 ) * C + 32 ## 1a declara\u00e7\u00e3o do la\u00e7o print C , F ## 2a declara\u00e7\u00e3o do la\u00e7o C = C + dC ## \u00daltima declara\u00e7\u00e3o do la\u00e7o print '------------------' ## linha final da tabela","title":"Tabela com o la\u00e7o while"},{"location":"lacoslistas/lacoslistas/#fluxo-do-programa-em-um-laco-while","text":"Vamos simular o la\u00e7o while na m\u00e3o: Primeiro C \u00e9 -20, $ -20 \\leq 40 $ \u00e9 verdade, ent\u00e3o executamos as declara\u00e7\u00f5es do la\u00e7o. Calculamos F , visualizamos o print , e atualizamos C para -15. Voltamos para a linha do while , avaliamos $ C \\leq 40 $, que \u00e9 verdade, ent\u00e3o vamos a uma nova rodada do la\u00e7o. Continuamos assim at\u00e9 que o C seja atualizado para 45. Agora a condi\u00e7\u00e3o do la\u00e7o $ 45 \\leq 40 $ \u00e9 falsa, e o programa pula para a primeira linha ap\u00f3s o la\u00e7o, e o la\u00e7o termina.","title":"Fluxo do programa em um la\u00e7o while"},{"location":"lacoslistas/listas/","text":"Listas Listas s\u00e3o objetos para armazenar uma sequ\u00eancia de coisas (objetos). At\u00e9 ent\u00e3o, uma vari\u00e1vel era relacionada a um n\u00famero (ou cadeia de caracteres), mas algumas vezes temos cole\u00e7\u00f5es de n\u00fameros, por exemplo, graus $ -20, -15, -10, -5, 0, \\ldots, 40 $. Solu\u00e7\u00e3o simples: uma vari\u00e1vel para cada valor: C1 = - 20 C2 = - 15 C3 = - 10 ... C13 = 40 Solu\u00e7\u00e3o muito tediosa para muitos valores! Melhor: um conjunto de valores podem ser colecionados em uma lista: C = [ - 20 , - 15 , - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 ] Agora temos apenas uma vari\u00e1vel, C, armazenando todos os valores. Opera\u00e7\u00f5es em listas Inicializa\u00e7\u00e3o e indexa\u00e7\u00e3o Inicialize com os colchetes e v\u00edrgulas entre os objetos Python: L1 = [ - 91 , 'a string' , 7.2 , 0 ] Os elementos s\u00e3o acessados via um \u00edndice: L1 [ 3 ] (\u00edndice = 3). Os \u00edndices de listas iniciam em 0: 0, 1, 2, ... len(L1) - 1 . >>> lista = [ 4 , 6 , - 3.5 ] >>> print lista [ 0 ] 4 >>> print lista [ 1 ] 6 >>> print lista [ 2 ] - 3.5 >>> len ( lista ) ## comprimento da lista 3 Anexar, estender, inserir, excluir Atrav\u00e9s dos comandos append , extend , insert , delete , podemos anexar um elemento a mais ao final da lista, extender a lista com outra lista, inserir um novo elemento em determinada posi\u00e7\u00e3o e apagar um elemento, respectivamente. >>> C = [ - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 ] >>> C . append ( 35 ) ## adiciona um novo elemento 35 ao final >>> C [ - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 ] >>> C = C + [ 40 , 45 ] ## extende C no final >>> C [ - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] >>> C . insert ( 0 , - 15 ) ## insere -15 como \u00edndice 0 >>> C [ - 15 , - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] >>> del C [ 2 ] ## apaga o 3o elemento >>> C [ - 15 , - 10 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] >>> del C [ 2 ] ## apaga o que \u00e9 agora o 3o elemento >>> C [ - 15 , - 10 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] >>> len ( C ) ## comprimento da lista 11 Busca por elementos, \u00edndices negativos Podemos buscar um elemento em uma lista utilizando a classe .index() da lista, descobrir se um elemento est\u00e1 na lista com condicionais e buscar o \u00faltimo elemento com \u00edndices negativos. >>> C . index ( 10 ) ## \u00edndice do primeiro elemento com valor 10 3 >>> 10 in C ## 10 \u00e9 um elemento de C? True >>> C [ - 1 ] ## o \u00faltimo elemento da lista 45 >>> C [ - 2 ] ## o pen\u00faltimo elemento da lista 40 >>> umalista = [ 'book.tex' , 'book.log' , 'book.pdf' ] >>> texfile , logfile , pdf = algumalist ## atribui\u00e7\u00e3o dos valores direto \u00e0 vari\u00e1veis >>> texfile 'book.tex' >>> logfile 'book.log' >>> pdf 'book.pdf'","title":"Listas"},{"location":"lacoslistas/listas/#listas","text":"Listas s\u00e3o objetos para armazenar uma sequ\u00eancia de coisas (objetos). At\u00e9 ent\u00e3o, uma vari\u00e1vel era relacionada a um n\u00famero (ou cadeia de caracteres), mas algumas vezes temos cole\u00e7\u00f5es de n\u00fameros, por exemplo, graus $ -20, -15, -10, -5, 0, \\ldots, 40 $. Solu\u00e7\u00e3o simples: uma vari\u00e1vel para cada valor: C1 = - 20 C2 = - 15 C3 = - 10 ... C13 = 40 Solu\u00e7\u00e3o muito tediosa para muitos valores! Melhor: um conjunto de valores podem ser colecionados em uma lista: C = [ - 20 , - 15 , - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 ] Agora temos apenas uma vari\u00e1vel, C, armazenando todos os valores.","title":"Listas"},{"location":"lacoslistas/listas/#operacoes-em-listas","text":"","title":"Opera\u00e7\u00f5es em listas"},{"location":"lacoslistas/listas/#inicializacao-e-indexacao","text":"Inicialize com os colchetes e v\u00edrgulas entre os objetos Python: L1 = [ - 91 , 'a string' , 7.2 , 0 ] Os elementos s\u00e3o acessados via um \u00edndice: L1 [ 3 ] (\u00edndice = 3). Os \u00edndices de listas iniciam em 0: 0, 1, 2, ... len(L1) - 1 . >>> lista = [ 4 , 6 , - 3.5 ] >>> print lista [ 0 ] 4 >>> print lista [ 1 ] 6 >>> print lista [ 2 ] - 3.5 >>> len ( lista ) ## comprimento da lista 3","title":"Inicializa\u00e7\u00e3o e indexa\u00e7\u00e3o"},{"location":"lacoslistas/listas/#anexar-estender-inserir-excluir","text":"Atrav\u00e9s dos comandos append , extend , insert , delete , podemos anexar um elemento a mais ao final da lista, extender a lista com outra lista, inserir um novo elemento em determinada posi\u00e7\u00e3o e apagar um elemento, respectivamente. >>> C = [ - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 ] >>> C . append ( 35 ) ## adiciona um novo elemento 35 ao final >>> C [ - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 ] >>> C = C + [ 40 , 45 ] ## extende C no final >>> C [ - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] >>> C . insert ( 0 , - 15 ) ## insere -15 como \u00edndice 0 >>> C [ - 15 , - 10 , - 5 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] >>> del C [ 2 ] ## apaga o 3o elemento >>> C [ - 15 , - 10 , 0 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] >>> del C [ 2 ] ## apaga o que \u00e9 agora o 3o elemento >>> C [ - 15 , - 10 , 5 , 10 , 15 , 20 , 25 , 30 , 35 , 40 , 45 ] >>> len ( C ) ## comprimento da lista 11","title":"Anexar, estender, inserir, excluir"},{"location":"lacoslistas/listas/#busca-por-elementos-indices-negativos","text":"Podemos buscar um elemento em uma lista utilizando a classe .index() da lista, descobrir se um elemento est\u00e1 na lista com condicionais e buscar o \u00faltimo elemento com \u00edndices negativos. >>> C . index ( 10 ) ## \u00edndice do primeiro elemento com valor 10 3 >>> 10 in C ## 10 \u00e9 um elemento de C? True >>> C [ - 1 ] ## o \u00faltimo elemento da lista 45 >>> C [ - 2 ] ## o pen\u00faltimo elemento da lista 40 >>> umalista = [ 'book.tex' , 'book.log' , 'book.pdf' ] >>> texfile , logfile , pdf = algumalist ## atribui\u00e7\u00e3o dos valores direto \u00e0 vari\u00e1veis >>> texfile 'book.tex' >>> logfile 'book.log' >>> pdf 'book.pdf'","title":"Busca por elementos, \u00edndices negativos"},{"location":"lacoslistas/listasavancadas/","text":"La\u00e7o for em \u00edndices de listas La\u00e7os for normalmente percorrem os valores em uma lista (os elementos): for elemento in lista : ## elemento vari\u00e1vel no processo Podemos, alternativamente, percorrer os \u00edndices da lista: for i in range ( 0 , len ( lista ), 1 ): elemento = lista [ i ] ## processa o elemento ou lista[i] diretamente range(start, stop, inc) gera uma lista de inteiros iniciando pelo valor de start , depois start + inc , depois start + 2*inc e assim por diante at\u00e9 um valor antes do valor de stop . range(stop) \u00e9 um c\u00f3digo curto para range(0, stop, 1) . >>> range ( 3 ) ## = range(0, 3, 1) [ 0 , 1 , 2 ] >>> range ( 2 , 8 , 3 ) [ 2 , 5 ] Como podemos mudar elementos em uma lista? Digamos que queremos adicionar o n\u00famero 2 a todos os n\u00fameros em uma lista: >>> v = [ - 1 , 1 , 10 ] >>> for e in v : ... e = e + 2 ... >>> v [ - 1 , 1 , 10 ] ## n\u00e3o alterado!! Mas o e n\u00e3o \u00e9 um elemento da lista?!? \u00c9 preciso um elemento indexado Mudar um elemento de uma lista requer a atribui\u00e7\u00e3o \u00e0 um elemento indexado. Qual \u00e9 o problema? Dentro do la\u00e7o, e \u00e9 uma simples vari\u00e1vel (tipo int ), no primeiro passo se torna 1, depois 3, depois 12, mas a lista v \u00e9 inalterada. Solu\u00e7\u00e3o: \u00e9 necess\u00e1rio indexar um elemento de uma lista para mudar o seu valor: >>> v = [ - 1 , 1 , 10 ] >>> v [ 1 ] = 4 ## atribui 4 para o 2o elemento (\u00edndice 1) em v >>> v [ - 1 , 4 , 10 ] >>> >>> for i in range ( len ( v )): ... v [ i ] = v [ i ] + 2 ... >>> v [ 1 , 6 , 12 ] Compreens\u00e3o da lista Como criar listas de maneiras compactas? Exemplo: compute duas listas em um la\u00e7o for . n = 16 Cgraus = []; Fgraus = [] ## listas vazias for i in range ( n ): Cgraus . append ( - 5 + i * 0.5 ) Fgraus . append (( 9.0 / 5 ) * Cgraus [ i ] + 32 ) Python possui um construtor compacto chamado compreens\u00e3o da lista, list comprehension , para a gera\u00e7\u00e3o de listas a partir de um la\u00e7o for : Cgraus = [ - 5 + i * 0.5 for i in range ( n )] Fgraus = [( 9.0 / 5 ) * C + 32 for C in Cgraus ] Forma geral de uma compreens\u00e3o da lista, list comprehension : lista = [ express\u00e3o for elemento in lista ] Sendo que a express\u00e3o envolve o elemento Demonstra\u00e7\u00e3o interativa da compreens\u00e3o da lista Atravessando m\u00faltiplas listas Podemos correr um la\u00e7o sobre duas listas? Solu\u00e7\u00e3o 1: la\u00e7o sobre \u00edndices for i in range ( len ( Cgraus )): print Cgraus [ i ], Fgraus [ i ] Solu\u00e7\u00e3o 2: usar o construtor zip : for C , F in zip ( Cgraus , Fgraus ): print C , F Exemplo com tr\u00eas listas: >>> l1 = [ 3 , 6 , 1 ]; l2 = [ 1.5 , 1 , 0 ]; l3 = [ 9.1 , 3 , 2 ] >>> for e1 , e2 , e3 in zip ( l1 , l2 , l3 ): ... print e1 , e2 , e3 ... 3 1.5 9.1 6 1 3 1 0 2 Listas de listas Uma lista pode conter qualquer objeto, inclusive outra lista. Ao inv\u00e9s de se armazenar uma tabela com duas listas separadas, uma para cada coluna, podemos agrupar as duas listas em uma nova: Cgraus = range ( - 20 , 41 , 5 ) Fgraus = [( 9.0 / 5 ) * C + 32 for C in Cgraus ] tabela1 = [ Cgraus , Fgraus ] ## lista de duas listas print tabela1 [ 0 ] ## a lista Cgraus print tabela1 [ 1 ] ## a lista Fgraus print tabela1 [ 1 ][ 2 ] ## o 3o elemento em Fgraus Tabela de colunas X tabela de linhas A tabela anterior table = [Cgraus,Fgraus] \u00e9 uma tabela de duas colunas. Vamos fazer uma tabela de linhas, onde cada linha \u00e9 um par $C, F$: tabela2 = [] for C , F in zip ( Cgraus , Fgraus ): linha = [ C , F ] tabela2 . append ( linha ) ## mais compacto com a compreens\u00e3o de lista: tabela2 = [[ C , F ] for C , F in zip ( Cgraus , Fgraus )] print tabela2 [[ - 20 , - 4.0 ], [ - 15 , 5.0 ], ....... , [ 40 , 104.0 ]] Itera\u00e7\u00e3o sobre a lista de listas: for C , F in tabela2 : ## funciona com C e F de uma linha na tabela2 ## ou for linha in tabela2 : C , F = linha ... Ilustra\u00e7\u00e3o da tabela de colunas Ilustra\u00e7\u00e3o da tabela de linhas Extraindo sublistas Podemos facilmente pegar partes de uma lista: >>> A = [ 2 , 3.5 , 8 , 10 ] >>> A [ 2 :] ## do \u00edndice 2 ao final da lista [ 8 , 10 ] >>> A [ 1 : 3 ] ## do \u00edndice 1 at\u00e9 o \u00edndice anterior ao \u00edndice 3 [ 3.5 , 8 ] >>> A [: 3 ] ## do in\u00edcio at\u00e9 o \u00edndice anterior ao \u00edndice 3 [ 2 , 3.5 , 8 ] >>> A [ 1 : - 1 ] ## do \u00edndice 1 at\u00e9 o elemento final [ 3.5 , 8 ] >>> A [:] ## a lista toda [ 2 , 3.5 , 8 , 10 ] Nota: sublistas (fatias) s\u00e3o c\u00f3pias da lista original! C\u00f3pias e Visualiza\u00e7\u00f5es Um simples objeto pode ter diversos nomes conectados a ele, execute os c\u00f3digos abaixo e preste aten\u00e7\u00e3o no resultado: a = [ 1 , 2 , 3 ] b = a a b a is b b [ 1 ] = 'oi!' a b \u00e9 uma visualiza\u00e7\u00e3o de a , ent\u00e3o se b muda, a tamb\u00e9m muda. O conceito chave aqui \u00e9 mut\u00e1vel x imut\u00e1vel: Objetos mut\u00e1veis podem ser modificados; Objetos imut\u00e1veis n\u00e3o podem mais ser modificados ap\u00f3s serem criados. O que esse peda\u00e7o de c\u00f3digo faz? for C , F in tabela2 [ Cgraus . index ( 10 ): Cgraus . index ( 35 )]: print ' %5.0f %5.1f ' % ( C , F ) \u00c9 um la\u00e7o for sobre uma sublista da tabela2. \u00cdndices de sublistas: Cgraus.index(10) , Cgraus.index(35) , ou seja, os \u00edndices que correspondem aos elementos 10 e 35. Sa\u00edda: 10 50.0 15 59.0 20 68.0 25 77.0 30 86.0 Itera\u00e7\u00e3o sobre listas de listas de listas... No caso de listas com muitos \u00edndices, como por exemplo: lista[i1][i1][i3]... La\u00e7os sobre os \u00edndices da lista seriam: for i1 in range ( len ( lista )): for i2 in range ( len ( lista [ i1 ])): for i3 in range ( len ( lista [ i1 ][ i2 ])): for i4 in range ( len ( lista [ i1 ][ i2 ][ i3 ])): valor = lista [ i1 ][ i2 ][ i3 ][ i4 ] ## trbalhando a vari\u00e1vel valor La\u00e7os sobre sublistas: for sublista1 in lista : for sublista2 in lista1 : for sublista3 in lista2 : for sublista4 in lista3 : valor = lista4 ## trbalhando a vari\u00e1vel valor Itera\u00e7\u00e3o sobre uma lista de listas espec\u00edfica Como podemos indexar o elemento de valor 5? Funcionalidades de listas Constru\u00e7\u00e3o Significado a = [] inicializa uma lista vazia a = [1, 4.4, 'run.py'] inicializa a lista a.append(elem) adiciona o objeto elem ao final a + [1,3] adiciona duas listas a.insert(i, e) insere o elemento e antes do \u00edndice i a[3] elemento da lista na posi\u00e7\u00e3o 3 a[-1] pega o \u00faltimo elemento da lista a[1:3] corte: copia dos dados para uma sublist (aqui: \u00edndices 1, 2) del a[3] apaga um elemento (\u00edndice 3 ) a.remove(e) remove um elemento com o valor e a.index('run.py') busca o \u00edndice correspondente ao valor do elemento 'run.py' in a testa se um valor est\u00e1 na lista a.count(v) conta quantos elementos possuem o valor v len(a) n\u00famero dos elementos na lista a min(a) o menor elemento na lista a max(a) o maior elemento na lista a sum(a) soma todos os elementos de a sorted(a) retorna uma vers\u00e3o ordenada da lista a reversed(a) retorna uma vers\u00e3o ordenada ao inverso da lista a b[3][0][2] indexa\u00e7\u00e3o de listas de listas isinstance(a, list) \u00e9 True se a \u00e9 uma lista type(a) is list \u00e9 True se a \u00e9 uma lista","title":"Listas avan\u00e7adas"},{"location":"lacoslistas/listasavancadas/#laco-for-em-indices-de-listas","text":"La\u00e7os for normalmente percorrem os valores em uma lista (os elementos): for elemento in lista : ## elemento vari\u00e1vel no processo Podemos, alternativamente, percorrer os \u00edndices da lista: for i in range ( 0 , len ( lista ), 1 ): elemento = lista [ i ] ## processa o elemento ou lista[i] diretamente range(start, stop, inc) gera uma lista de inteiros iniciando pelo valor de start , depois start + inc , depois start + 2*inc e assim por diante at\u00e9 um valor antes do valor de stop . range(stop) \u00e9 um c\u00f3digo curto para range(0, stop, 1) . >>> range ( 3 ) ## = range(0, 3, 1) [ 0 , 1 , 2 ] >>> range ( 2 , 8 , 3 ) [ 2 , 5 ]","title":"La\u00e7o for em \u00edndices de listas"},{"location":"lacoslistas/listasavancadas/#como-podemos-mudar-elementos-em-uma-lista","text":"Digamos que queremos adicionar o n\u00famero 2 a todos os n\u00fameros em uma lista: >>> v = [ - 1 , 1 , 10 ] >>> for e in v : ... e = e + 2 ... >>> v [ - 1 , 1 , 10 ] ## n\u00e3o alterado!! Mas o e n\u00e3o \u00e9 um elemento da lista?!?","title":"Como podemos mudar elementos em uma lista?"},{"location":"lacoslistas/listasavancadas/#e-preciso-um-elemento-indexado","text":"Mudar um elemento de uma lista requer a atribui\u00e7\u00e3o \u00e0 um elemento indexado. Qual \u00e9 o problema? Dentro do la\u00e7o, e \u00e9 uma simples vari\u00e1vel (tipo int ), no primeiro passo se torna 1, depois 3, depois 12, mas a lista v \u00e9 inalterada. Solu\u00e7\u00e3o: \u00e9 necess\u00e1rio indexar um elemento de uma lista para mudar o seu valor: >>> v = [ - 1 , 1 , 10 ] >>> v [ 1 ] = 4 ## atribui 4 para o 2o elemento (\u00edndice 1) em v >>> v [ - 1 , 4 , 10 ] >>> >>> for i in range ( len ( v )): ... v [ i ] = v [ i ] + 2 ... >>> v [ 1 , 6 , 12 ]","title":"\u00c9 preciso um elemento indexado"},{"location":"lacoslistas/listasavancadas/#compreensao-da-lista","text":"Como criar listas de maneiras compactas? Exemplo: compute duas listas em um la\u00e7o for . n = 16 Cgraus = []; Fgraus = [] ## listas vazias for i in range ( n ): Cgraus . append ( - 5 + i * 0.5 ) Fgraus . append (( 9.0 / 5 ) * Cgraus [ i ] + 32 ) Python possui um construtor compacto chamado compreens\u00e3o da lista, list comprehension , para a gera\u00e7\u00e3o de listas a partir de um la\u00e7o for : Cgraus = [ - 5 + i * 0.5 for i in range ( n )] Fgraus = [( 9.0 / 5 ) * C + 32 for C in Cgraus ] Forma geral de uma compreens\u00e3o da lista, list comprehension : lista = [ express\u00e3o for elemento in lista ] Sendo que a express\u00e3o envolve o elemento","title":"Compreens\u00e3o da lista"},{"location":"lacoslistas/listasavancadas/#demonstracao-interativa-da-compreensao-da-lista","text":"","title":"Demonstra\u00e7\u00e3o interativa da compreens\u00e3o da lista"},{"location":"lacoslistas/listasavancadas/#atravessando-multiplas-listas","text":"Podemos correr um la\u00e7o sobre duas listas? Solu\u00e7\u00e3o 1: la\u00e7o sobre \u00edndices for i in range ( len ( Cgraus )): print Cgraus [ i ], Fgraus [ i ] Solu\u00e7\u00e3o 2: usar o construtor zip : for C , F in zip ( Cgraus , Fgraus ): print C , F Exemplo com tr\u00eas listas: >>> l1 = [ 3 , 6 , 1 ]; l2 = [ 1.5 , 1 , 0 ]; l3 = [ 9.1 , 3 , 2 ] >>> for e1 , e2 , e3 in zip ( l1 , l2 , l3 ): ... print e1 , e2 , e3 ... 3 1.5 9.1 6 1 3 1 0 2","title":"Atravessando m\u00faltiplas listas"},{"location":"lacoslistas/listasavancadas/#listas-de-listas","text":"Uma lista pode conter qualquer objeto, inclusive outra lista. Ao inv\u00e9s de se armazenar uma tabela com duas listas separadas, uma para cada coluna, podemos agrupar as duas listas em uma nova: Cgraus = range ( - 20 , 41 , 5 ) Fgraus = [( 9.0 / 5 ) * C + 32 for C in Cgraus ] tabela1 = [ Cgraus , Fgraus ] ## lista de duas listas print tabela1 [ 0 ] ## a lista Cgraus print tabela1 [ 1 ] ## a lista Fgraus print tabela1 [ 1 ][ 2 ] ## o 3o elemento em Fgraus","title":"Listas de listas"},{"location":"lacoslistas/listasavancadas/#tabela-de-colunas-x-tabela-de-linhas","text":"A tabela anterior table = [Cgraus,Fgraus] \u00e9 uma tabela de duas colunas. Vamos fazer uma tabela de linhas, onde cada linha \u00e9 um par $C, F$: tabela2 = [] for C , F in zip ( Cgraus , Fgraus ): linha = [ C , F ] tabela2 . append ( linha ) ## mais compacto com a compreens\u00e3o de lista: tabela2 = [[ C , F ] for C , F in zip ( Cgraus , Fgraus )] print tabela2 [[ - 20 , - 4.0 ], [ - 15 , 5.0 ], ....... , [ 40 , 104.0 ]] Itera\u00e7\u00e3o sobre a lista de listas: for C , F in tabela2 : ## funciona com C e F de uma linha na tabela2 ## ou for linha in tabela2 : C , F = linha ...","title":"Tabela de colunas X tabela de linhas"},{"location":"lacoslistas/listasavancadas/#ilustracao-da-tabela-de-colunas","text":"","title":"Ilustra\u00e7\u00e3o da tabela de colunas"},{"location":"lacoslistas/listasavancadas/#ilustracao-da-tabela-de-linhas","text":"","title":"Ilustra\u00e7\u00e3o da tabela de linhas"},{"location":"lacoslistas/listasavancadas/#extraindo-sublistas","text":"Podemos facilmente pegar partes de uma lista: >>> A = [ 2 , 3.5 , 8 , 10 ] >>> A [ 2 :] ## do \u00edndice 2 ao final da lista [ 8 , 10 ] >>> A [ 1 : 3 ] ## do \u00edndice 1 at\u00e9 o \u00edndice anterior ao \u00edndice 3 [ 3.5 , 8 ] >>> A [: 3 ] ## do in\u00edcio at\u00e9 o \u00edndice anterior ao \u00edndice 3 [ 2 , 3.5 , 8 ] >>> A [ 1 : - 1 ] ## do \u00edndice 1 at\u00e9 o elemento final [ 3.5 , 8 ] >>> A [:] ## a lista toda [ 2 , 3.5 , 8 , 10 ] Nota: sublistas (fatias) s\u00e3o c\u00f3pias da lista original!","title":"Extraindo sublistas"},{"location":"lacoslistas/listasavancadas/#copias-e-visualizacoes","text":"Um simples objeto pode ter diversos nomes conectados a ele, execute os c\u00f3digos abaixo e preste aten\u00e7\u00e3o no resultado: a = [ 1 , 2 , 3 ] b = a a b a is b b [ 1 ] = 'oi!' a b \u00e9 uma visualiza\u00e7\u00e3o de a , ent\u00e3o se b muda, a tamb\u00e9m muda. O conceito chave aqui \u00e9 mut\u00e1vel x imut\u00e1vel: Objetos mut\u00e1veis podem ser modificados; Objetos imut\u00e1veis n\u00e3o podem mais ser modificados ap\u00f3s serem criados.","title":"C\u00f3pias e Visualiza\u00e7\u00f5es"},{"location":"lacoslistas/listasavancadas/#o-que-esse-pedaco-de-codigo-faz","text":"for C , F in tabela2 [ Cgraus . index ( 10 ): Cgraus . index ( 35 )]: print ' %5.0f %5.1f ' % ( C , F ) \u00c9 um la\u00e7o for sobre uma sublista da tabela2. \u00cdndices de sublistas: Cgraus.index(10) , Cgraus.index(35) , ou seja, os \u00edndices que correspondem aos elementos 10 e 35. Sa\u00edda: 10 50.0 15 59.0 20 68.0 25 77.0 30 86.0","title":"O que esse peda\u00e7o de c\u00f3digo faz?"},{"location":"lacoslistas/listasavancadas/#iteracao-sobre-listas-de-listas-de-listas","text":"No caso de listas com muitos \u00edndices, como por exemplo: lista[i1][i1][i3]... La\u00e7os sobre os \u00edndices da lista seriam: for i1 in range ( len ( lista )): for i2 in range ( len ( lista [ i1 ])): for i3 in range ( len ( lista [ i1 ][ i2 ])): for i4 in range ( len ( lista [ i1 ][ i2 ][ i3 ])): valor = lista [ i1 ][ i2 ][ i3 ][ i4 ] ## trbalhando a vari\u00e1vel valor La\u00e7os sobre sublistas: for sublista1 in lista : for sublista2 in lista1 : for sublista3 in lista2 : for sublista4 in lista3 : valor = lista4 ## trbalhando a vari\u00e1vel valor","title":"Itera\u00e7\u00e3o sobre listas de listas de listas..."},{"location":"lacoslistas/listasavancadas/#iteracao-sobre-uma-lista-de-listas-especifica","text":"Como podemos indexar o elemento de valor 5?","title":"Itera\u00e7\u00e3o sobre uma lista de listas espec\u00edfica"},{"location":"lacoslistas/listasavancadas/#funcionalidades-de-listas","text":"Constru\u00e7\u00e3o Significado a = [] inicializa uma lista vazia a = [1, 4.4, 'run.py'] inicializa a lista a.append(elem) adiciona o objeto elem ao final a + [1,3] adiciona duas listas a.insert(i, e) insere o elemento e antes do \u00edndice i a[3] elemento da lista na posi\u00e7\u00e3o 3 a[-1] pega o \u00faltimo elemento da lista a[1:3] corte: copia dos dados para uma sublist (aqui: \u00edndices 1, 2) del a[3] apaga um elemento (\u00edndice 3 ) a.remove(e) remove um elemento com o valor e a.index('run.py') busca o \u00edndice correspondente ao valor do elemento 'run.py' in a testa se um valor est\u00e1 na lista a.count(v) conta quantos elementos possuem o valor v len(a) n\u00famero dos elementos na lista a min(a) o menor elemento na lista a max(a) o maior elemento na lista a sum(a) soma todos os elementos de a sorted(a) retorna uma vers\u00e3o ordenada da lista a reversed(a) retorna uma vers\u00e3o ordenada ao inverso da lista a b[3][0][2] indexa\u00e7\u00e3o de listas de listas isinstance(a, list) \u00e9 True se a \u00e9 uma lista type(a) is list \u00e9 True se a \u00e9 uma lista","title":"Funcionalidades de listas"},{"location":"lacoslistas/tuplas/","text":"Tuplas s\u00e3o listas imut\u00e1veis Tuplas s\u00e3o listas que n\u00e3o podem ser alteradas. >>> t = ( 2 , 4 , 6 , 'temp.pdf' ) ## definindo uma tupla >>> t = 2 , 4 , 6 , 'temp.pdf' ## podemos fazer sem o par\u00eanteses >>> t [ 1 ] = - 1 ... TypeError : object does not support item assignment >>> t . append ( 0 ) ... AttributeError : 'tuple' object has no attribute 'append' >>> del t [ 1 ] ... TypeError : object doesn 't support item deletion Tuplas podem fazer muito de que listas podem: >>> t = t + ( - 1.0 , - 2.0 ) ## adicionando duas tuplas >>> t ( 2 , 4 , 6 , 'temp.pdf' , - 1.0 , - 2.0 ) >>> t [ 1 ] ## indexando 4 >>> t [ 2 :] ## subtupla/fatia ( 6 , 'temp.pdf' , - 1.0 , - 2.0 ) >>> 6 in t ## elemento est\u00e1 na tupla? True Porque tuplas? Porque tuplas se as listas tem mais funcionalidades? Tuplas s\u00e3o constantes e por isso protegidas contra mudan\u00e7as acidentais; Tuplas s\u00e3o mais r\u00e1pidas que as listas; Tuplas poder ser utilizadas como chaves em dicion\u00e1rios (listas n\u00e3o, veremos isso mais adiante...). Tarefa Dados dos n\u00fameros de horas de sol em Oxford, UK, para cada m\u00eas desde Janeiro de 1929 at\u00e9 2009 (cada linha \u00e9 ano): [[43.8, 60.5, 190.2, 144.7, 240.9, 210.3, 219.7, 176.3, 199.1, 109.2, 78.7, 67.0], [49.9, 54.3, 109.7, 102.0, 134.5, 211.2, 174.1, 207.5, 108.2, 113.5, 68.7, 23.3], [63.7, 72.0, 142.3, 93.5, 150.1, 158.7, 127.9, 135.5, 92.3, 102.5, 62.4, 38.5], [51.0, 57.9, 133.4, 110.9, 112.4, 199.3, 124.0, 178.3, 102.1, 100.7, 55.7, 58.0], [69.5, 94.3, 187.6, 152.5, 170.2, 226.9, 237.6, 242.7, 177.3, 101.3, 53.9, 59.0], [65.9, 96.6, 122.5, 124.9, 216.3, 192.7, 269.3, 184.9, 149.1, 81.5, 48.7, 31.3], [48.1, 62.0, 121.5, 127.3, 188.5, 196.3, 274.3, 199.9, 144.7, 102.6, 65.4, 48.9], [43.4, 89.2, 71.4, 133.2, 179.5, 166.2, 119.2, 184.7, 79.3, 103.1, 48.9, 62.3], [50.9, 66.6, 99.7, 103.1, 185.0, 181.3, 140.1, 202.3, 143.0, 79.1, 65.9, 41.2], [41.2, 66.9, 172.3, 180.9, 144.9, 190.6, 133.5, 151.3, 110.9, 118.1, 70.0, 52.4], [46.4, 104.9, 86.2, 171.7, 184.9, 227.9, 139.7, 153.7, 147.0, 94.3, 41.1, 46.0], [83.1, 22.8, 128.3, 118.1, 215.4, 273.4, 165.1, 199.5, 179.5, 95.5, 76.8, 46.5], [41.7, 67.9, 118.7, 106.9, 141.9, 210.3, 227.5, 163.7, 123.7, 120.2, 47.1, 46.9], [45.1, 53.9, 69.4, 202.5, 209.4, 234.0, 150.1, 132.7, 124.5, 84.6, 57.8, 51.0], [54.7, 79.3, 132.9, 166.6, 244.1, 192.9, 196.7, 178.3, 142.5, 84.9, 72.3, 49.5], [41.2, 62.4, 142.7, 147.0, 235.6, 170.3, 97.5, 185.2, 143.8, 102.0, 49.3, 64.1], [51.5, 65.7, 152.6, 209.1, 156.1, 182.4, 159.0, 144.8, 64.9, 111.7, 31.0, 46.6], [49.9, 78.7, 107.2, 203.3, 162.9, 149.8, 197.6, 134.8, 98.5, 79.3, 42.9, 74.7], [59.5, 26.3, 70.9, 150.5, 147.3, 185.9, 144.5, 274.9, 159.9, 107.3, 75.4, 37.9], [45.7, 92.9, 160.2, 205.2, 237.1, 124.2, 174.7, 133.7, 146.4, 93.7, 68.6, 65.4], [51.0, 115.1, 112.5, 182.5, 233.3, 242.1, 262.5, 210.3, 151.1, 125.0, 76.2, 65.4], [40.6, 67.5, 138.8, 163.7, 174.1, 244.5, 174.0, 171.1, 112.7, 96.6, 56.9, 55.3], [48.9, 58.6, 92.6, 200.4, 152.1, 251.9, 216.7, 174.7, 110.8, 105.6, 75.1, 69.8], [94.1, 96.7, 105.0, 178.2, 207.0, 217.6, 194.0, 180.5, 140.3, 105.0, 72.1, 77.7], [42.5, 75.9, 140.7, 183.3, 223.0, 139.7, 203.4, 237.4, 151.7, 84.1, 54.4, 28.4], [75.7, 79.7, 107.9, 202.4, 145.9, 157.1, 157.1, 123.5, 168.8, 94.5, 60.1, 54.5], [40.1, 86.3, 161.4, 173.7, 217.5, 155.3, 268.3, 188.0, 153.1, 119.7, 71.5, 47.3], [50.3, 78.9, 149.7, 158.7, 246.6, 145.0, 168.0, 161.4, 94.3, 116.5, 77.9, 18.2], [50.8, 83.1, 110.2, 168.0, 205.6, 297.1, 157.9, 170.5, 102.6, 92.9, 76.4, 62.3], [54.6, 55.4, 110.7, 145.2, 196.0, 145.7, 188.1, 119.6, 118.0, 93.7, 51.8, 29.5], [85.8, 65.5, 102.0, 153.8, 228.0, 226.3, 272.7, 245.6, 213.9, 144.2, 70.6, 45.0], [37.8, 82.3, 78.0, 164.9, 182.3, 274.9, 129.7, 147.1, 122.8, 60.9, 73.4, 54.5], [43.6, 65.1, 173.2, 86.9, 225.2, 231.2, 196.5, 185.7, 135.8, 118.2, 63.4, 76.5], [70.0, 70.6, 126.3, 143.3, 177.5, 280.3, 137.3, 154.5, 142.3, 108.8, 32.7, 72.6], [58.9, 66.4, 85.8, 119.1, 193.4, 199.4, 188.2, 142.6, 129.7, 78.8, 60.4, 49.8], [37.2, 57.3, 65.9, 128.5, 190.8, 156.1, 214.7, 217.7, 210.4, 134.5, 55.0, 51.1], [83.7, 31.1, 137.7, 141.6, 179.6, 188.7, 122.8, 181.2, 122.9, 109.9, 77.4, 71.9], [42.5, 41.5, 121.5, 81.5, 234.9, 199.0, 149.7, 188.6, 168.0, 90.4, 61.0, 41.7], [64.2, 88.2, 174.6, 130.8, 184.2, 232.0, 234.4, 167.1, 116.5, 95.1, 69.2, 70.6], [50.0, 54.0, 148.5, 184.5, 155.0, 206.6, 136.2, 124.0, 114.9, 66.5, 47.9, 35.9], [40.0, 78.1, 70.5, 221.3, 161.9, 276.9, 243.8, 157.5, 97.4, 112.0, 84.6, 35.6], [34.5, 115.9, 120.8, 132.7, 224.8, 270.9, 192.4, 185.6, 157.3, 106.2, 64.7, 43.8], [42.1, 69.5, 106.0, 122.9, 228.9, 143.5, 259.3, 134.2, 166.5, 135.2, 102.0, 29.8], [41.8, 27.3, 144.0, 117.6, 141.9, 150.4, 168.7, 160.9, 129.1, 91.6, 80.6, 47.6], [38.8, 74.1, 150.7, 167.7, 168.0, 249.5, 171.1, 192.0, 153.9, 95.1, 89.1, 62.9], [56.3, 58.3, 101.7, 142.1, 191.4, 206.2, 187.8, 198.7, 146.5, 105.4, 52.9, 58.8], [44.7, 57.8, 72.7, 131.4, 159.1, 301.0, 242.4, 218.6, 147.0, 120.7, 85.1, 34.4], [70.3, 42.6, 107.8, 148.7, 172.0, 261.4, 254.2, 257.4, 118.2, 43.6, 54.1, 58.6], [35.4, 74.4, 87.2, 157.9, 217.5, 123.2, 193.6, 123.4, 101.8, 107.3, 102.4, 45.2], [53.6, 58.9, 128.1, 113.6, 202.8, 171.7, 146.4, 157.4, 159.3, 87.5, 77.3, 34.3], [72.0, 67.3, 92.9, 126.4, 190.9, 166.6, 192.2, 167.4, 171.0, 117.0, 70.0, 59.7], [84.0, 58.8, 86.7, 165.4, 228.7, 186.7, 168.9, 169.0, 136.4, 111.8, 61.4, 64.4], [50.9, 75.3, 57.8, 110.4, 98.3, 122.8, 129.0, 199.8, 157.3, 101.9, 43.7, 57.5], [55.0, 33.8, 144.7, 164.4, 187.2, 148.4, 151.4, 159.8, 141.0, 66.3, 68.5, 60.4], [54.9, 74.0, 89.5, 150.5, 126.8, 180.3, 257.5, 214.5, 92.4, 119.7, 44.3, 62.9], [86.1, 66.0, 48.8, 236.8, 143.4, 244.3, 249.4, 199.8, 99.6, 88.6, 53.8, 57.6], [51.1, 78.0, 112.4, 138.3, 178.3, 165.0, 216.0, 164.9, 143.3, 100.8, 86.1, 44.2], [76.4, 71.2, 127.3, 139.6, 205.6, 222.7, 201.2, 147.0, 171.6, 119.7, 77.9, 64.8], [68.8, 67.8, 111.6, 158.7, 168.7, 129.3, 179.4, 158.2, 132.3, 109.5, 43.9, 42.9], [47.7, 103.7, 85.2, 132.0, 178.1, 142.3, 138.8, 178.8, 136.9, 120.0, 91.4, 46.7], [68.2, 107.0, 100.9, 133.9, 300.8, 244.4, 280.4, 269.5, 141.6, 90.8, 104.1, 26.5], [58.3, 95.7, 144.1, 234.4, 285.0, 121.1, 268.5, 236.6, 164.7, 124.4, 83.7, 58.8], [66.9, 60.0, 87.2, 156.6, 142.9, 150.0, 217.3, 241.4, 165.4, 79.4, 57.4, 58.4], [46.8, 67.3, 73.3, 139.2, 262.7, 212.2, 164.0, 173.6, 120.2, 101.3, 61.5, 47.2], [38.0, 54.7, 135.0, 111.9, 196.7, 231.4, 190.0, 238.3, 107.7, 120.0, 76.3, 55.0], [87.0, 77.6, 127.6, 177.7, 162.1, 254.9, 248.3, 191.8, 113.1, 137.5, 46.7, 68.2], [61.8, 74.9, 198.7, 190.1, 233.5, 194.4, 247.6, 285.1, 135.3, 139.9, 78.1, 40.9], [29.3, 103.4, 76.4, 148.3, 185.7, 290.7, 256.6, 211.6, 125.3, 130.8, 101.0, 55.5], [51.4, 64.2, 150.2, 189.9, 261.4, 137.1, 231.7, 172.0, 169.7, 153.8, 47.1, 55.7], [64.0, 113.0, 77.5, 105.8, 199.8, 114.0, 157.0, 225.0, 133.8, 94.5, 66.3, 38.1], [51.1, 81.3, 97.4, 147.6, 153.6, 202.1, 235.4, 159.2, 155.2, 144.8, 81.1, 60.9], [82.1, 104.9, 112.6, 143.4, 189.8, 164.6, 161.2, 209.4, 126.1, 83.9, 69.2, 51.9], [83.3, 85.0, 74.1, 148.2, 198.3, 226.8, 206.1, 184.1, 123.0, 100.9, 86.9, 79.2], [44.4, 80.5, 101.1, 210.0, 177.5, 163.3, 178.8, 166.2, 167.1, 104.8, 52.3, 41.3], [87.7, 94.4, 154.8, 169.8, 191.2, 213.6, 192.0, 228.4, 175.3, 134.8, 78.9, 53.6], [62.7, 79.1, 101.5, 150.3, 195.5, 223.6, 169.5, 194.1, 174.4, 102.4, 52.4, 58.3], [65.4, 66.3, 79.3, 136.3, 226.4, 177.6, 192.0, 235.7, 155.4, 92.0, 88.0, 55.7], [54.9, 73.1, 95.5, 152.5, 165.7, 246.2, 303.7, 167.2, 156.5, 109.0, 101.2, 42.7], [79.8, 67.6, 165.4, 210.7, 165.5, 149.0, 195.1, 209.2, 142.6, 102.5, 86.9, 57.2], [62.4, 124.1, 115.2, 161.2, 173.2, 223.8, 198.5, 141.8, 113.5, 132.2, 67.0, 73.5], [69.3, 64.5, 161.4, 168.4, 226.1, 203.3, 212.3, 190.6, 163.7, 109.7, 73.5, 61.5]] Calcule: Calcule a m\u00e9dia de horas de sol para cada m\u00eas desde 1929 at\u00e9 2009; Qual m\u00eas teve o melhor tempo de acordo com as m\u00e9dias encontradas? Para cada d\u00e9cada, 1930, 1940, ..., 2000, calcule a m\u00e9dia de horas de sol por dia no ver\u00e3o, meses de Dezembro e Janeiro juntos (considere o m\u00eas com 31 dias).","title":"Tuplas"},{"location":"lacoslistas/tuplas/#tuplas-sao-listas-imutaveis","text":"Tuplas s\u00e3o listas que n\u00e3o podem ser alteradas. >>> t = ( 2 , 4 , 6 , 'temp.pdf' ) ## definindo uma tupla >>> t = 2 , 4 , 6 , 'temp.pdf' ## podemos fazer sem o par\u00eanteses >>> t [ 1 ] = - 1 ... TypeError : object does not support item assignment >>> t . append ( 0 ) ... AttributeError : 'tuple' object has no attribute 'append' >>> del t [ 1 ] ... TypeError : object doesn 't support item deletion Tuplas podem fazer muito de que listas podem: >>> t = t + ( - 1.0 , - 2.0 ) ## adicionando duas tuplas >>> t ( 2 , 4 , 6 , 'temp.pdf' , - 1.0 , - 2.0 ) >>> t [ 1 ] ## indexando 4 >>> t [ 2 :] ## subtupla/fatia ( 6 , 'temp.pdf' , - 1.0 , - 2.0 ) >>> 6 in t ## elemento est\u00e1 na tupla? True","title":"Tuplas s\u00e3o listas imut\u00e1veis"},{"location":"lacoslistas/tuplas/#porque-tuplas","text":"Porque tuplas se as listas tem mais funcionalidades? Tuplas s\u00e3o constantes e por isso protegidas contra mudan\u00e7as acidentais; Tuplas s\u00e3o mais r\u00e1pidas que as listas; Tuplas poder ser utilizadas como chaves em dicion\u00e1rios (listas n\u00e3o, veremos isso mais adiante...).","title":"Porque tuplas?"},{"location":"lacoslistas/tuplas/#tarefa","text":"Dados dos n\u00fameros de horas de sol em Oxford, UK, para cada m\u00eas desde Janeiro de 1929 at\u00e9 2009 (cada linha \u00e9 ano): [[43.8, 60.5, 190.2, 144.7, 240.9, 210.3, 219.7, 176.3, 199.1, 109.2, 78.7, 67.0], [49.9, 54.3, 109.7, 102.0, 134.5, 211.2, 174.1, 207.5, 108.2, 113.5, 68.7, 23.3], [63.7, 72.0, 142.3, 93.5, 150.1, 158.7, 127.9, 135.5, 92.3, 102.5, 62.4, 38.5], [51.0, 57.9, 133.4, 110.9, 112.4, 199.3, 124.0, 178.3, 102.1, 100.7, 55.7, 58.0], [69.5, 94.3, 187.6, 152.5, 170.2, 226.9, 237.6, 242.7, 177.3, 101.3, 53.9, 59.0], [65.9, 96.6, 122.5, 124.9, 216.3, 192.7, 269.3, 184.9, 149.1, 81.5, 48.7, 31.3], [48.1, 62.0, 121.5, 127.3, 188.5, 196.3, 274.3, 199.9, 144.7, 102.6, 65.4, 48.9], [43.4, 89.2, 71.4, 133.2, 179.5, 166.2, 119.2, 184.7, 79.3, 103.1, 48.9, 62.3], [50.9, 66.6, 99.7, 103.1, 185.0, 181.3, 140.1, 202.3, 143.0, 79.1, 65.9, 41.2], [41.2, 66.9, 172.3, 180.9, 144.9, 190.6, 133.5, 151.3, 110.9, 118.1, 70.0, 52.4], [46.4, 104.9, 86.2, 171.7, 184.9, 227.9, 139.7, 153.7, 147.0, 94.3, 41.1, 46.0], [83.1, 22.8, 128.3, 118.1, 215.4, 273.4, 165.1, 199.5, 179.5, 95.5, 76.8, 46.5], [41.7, 67.9, 118.7, 106.9, 141.9, 210.3, 227.5, 163.7, 123.7, 120.2, 47.1, 46.9], [45.1, 53.9, 69.4, 202.5, 209.4, 234.0, 150.1, 132.7, 124.5, 84.6, 57.8, 51.0], [54.7, 79.3, 132.9, 166.6, 244.1, 192.9, 196.7, 178.3, 142.5, 84.9, 72.3, 49.5], [41.2, 62.4, 142.7, 147.0, 235.6, 170.3, 97.5, 185.2, 143.8, 102.0, 49.3, 64.1], [51.5, 65.7, 152.6, 209.1, 156.1, 182.4, 159.0, 144.8, 64.9, 111.7, 31.0, 46.6], [49.9, 78.7, 107.2, 203.3, 162.9, 149.8, 197.6, 134.8, 98.5, 79.3, 42.9, 74.7], [59.5, 26.3, 70.9, 150.5, 147.3, 185.9, 144.5, 274.9, 159.9, 107.3, 75.4, 37.9], [45.7, 92.9, 160.2, 205.2, 237.1, 124.2, 174.7, 133.7, 146.4, 93.7, 68.6, 65.4], [51.0, 115.1, 112.5, 182.5, 233.3, 242.1, 262.5, 210.3, 151.1, 125.0, 76.2, 65.4], [40.6, 67.5, 138.8, 163.7, 174.1, 244.5, 174.0, 171.1, 112.7, 96.6, 56.9, 55.3], [48.9, 58.6, 92.6, 200.4, 152.1, 251.9, 216.7, 174.7, 110.8, 105.6, 75.1, 69.8], [94.1, 96.7, 105.0, 178.2, 207.0, 217.6, 194.0, 180.5, 140.3, 105.0, 72.1, 77.7], [42.5, 75.9, 140.7, 183.3, 223.0, 139.7, 203.4, 237.4, 151.7, 84.1, 54.4, 28.4], [75.7, 79.7, 107.9, 202.4, 145.9, 157.1, 157.1, 123.5, 168.8, 94.5, 60.1, 54.5], [40.1, 86.3, 161.4, 173.7, 217.5, 155.3, 268.3, 188.0, 153.1, 119.7, 71.5, 47.3], [50.3, 78.9, 149.7, 158.7, 246.6, 145.0, 168.0, 161.4, 94.3, 116.5, 77.9, 18.2], [50.8, 83.1, 110.2, 168.0, 205.6, 297.1, 157.9, 170.5, 102.6, 92.9, 76.4, 62.3], [54.6, 55.4, 110.7, 145.2, 196.0, 145.7, 188.1, 119.6, 118.0, 93.7, 51.8, 29.5], [85.8, 65.5, 102.0, 153.8, 228.0, 226.3, 272.7, 245.6, 213.9, 144.2, 70.6, 45.0], [37.8, 82.3, 78.0, 164.9, 182.3, 274.9, 129.7, 147.1, 122.8, 60.9, 73.4, 54.5], [43.6, 65.1, 173.2, 86.9, 225.2, 231.2, 196.5, 185.7, 135.8, 118.2, 63.4, 76.5], [70.0, 70.6, 126.3, 143.3, 177.5, 280.3, 137.3, 154.5, 142.3, 108.8, 32.7, 72.6], [58.9, 66.4, 85.8, 119.1, 193.4, 199.4, 188.2, 142.6, 129.7, 78.8, 60.4, 49.8], [37.2, 57.3, 65.9, 128.5, 190.8, 156.1, 214.7, 217.7, 210.4, 134.5, 55.0, 51.1], [83.7, 31.1, 137.7, 141.6, 179.6, 188.7, 122.8, 181.2, 122.9, 109.9, 77.4, 71.9], [42.5, 41.5, 121.5, 81.5, 234.9, 199.0, 149.7, 188.6, 168.0, 90.4, 61.0, 41.7], [64.2, 88.2, 174.6, 130.8, 184.2, 232.0, 234.4, 167.1, 116.5, 95.1, 69.2, 70.6], [50.0, 54.0, 148.5, 184.5, 155.0, 206.6, 136.2, 124.0, 114.9, 66.5, 47.9, 35.9], [40.0, 78.1, 70.5, 221.3, 161.9, 276.9, 243.8, 157.5, 97.4, 112.0, 84.6, 35.6], [34.5, 115.9, 120.8, 132.7, 224.8, 270.9, 192.4, 185.6, 157.3, 106.2, 64.7, 43.8], [42.1, 69.5, 106.0, 122.9, 228.9, 143.5, 259.3, 134.2, 166.5, 135.2, 102.0, 29.8], [41.8, 27.3, 144.0, 117.6, 141.9, 150.4, 168.7, 160.9, 129.1, 91.6, 80.6, 47.6], [38.8, 74.1, 150.7, 167.7, 168.0, 249.5, 171.1, 192.0, 153.9, 95.1, 89.1, 62.9], [56.3, 58.3, 101.7, 142.1, 191.4, 206.2, 187.8, 198.7, 146.5, 105.4, 52.9, 58.8], [44.7, 57.8, 72.7, 131.4, 159.1, 301.0, 242.4, 218.6, 147.0, 120.7, 85.1, 34.4], [70.3, 42.6, 107.8, 148.7, 172.0, 261.4, 254.2, 257.4, 118.2, 43.6, 54.1, 58.6], [35.4, 74.4, 87.2, 157.9, 217.5, 123.2, 193.6, 123.4, 101.8, 107.3, 102.4, 45.2], [53.6, 58.9, 128.1, 113.6, 202.8, 171.7, 146.4, 157.4, 159.3, 87.5, 77.3, 34.3], [72.0, 67.3, 92.9, 126.4, 190.9, 166.6, 192.2, 167.4, 171.0, 117.0, 70.0, 59.7], [84.0, 58.8, 86.7, 165.4, 228.7, 186.7, 168.9, 169.0, 136.4, 111.8, 61.4, 64.4], [50.9, 75.3, 57.8, 110.4, 98.3, 122.8, 129.0, 199.8, 157.3, 101.9, 43.7, 57.5], [55.0, 33.8, 144.7, 164.4, 187.2, 148.4, 151.4, 159.8, 141.0, 66.3, 68.5, 60.4], [54.9, 74.0, 89.5, 150.5, 126.8, 180.3, 257.5, 214.5, 92.4, 119.7, 44.3, 62.9], [86.1, 66.0, 48.8, 236.8, 143.4, 244.3, 249.4, 199.8, 99.6, 88.6, 53.8, 57.6], [51.1, 78.0, 112.4, 138.3, 178.3, 165.0, 216.0, 164.9, 143.3, 100.8, 86.1, 44.2], [76.4, 71.2, 127.3, 139.6, 205.6, 222.7, 201.2, 147.0, 171.6, 119.7, 77.9, 64.8], [68.8, 67.8, 111.6, 158.7, 168.7, 129.3, 179.4, 158.2, 132.3, 109.5, 43.9, 42.9], [47.7, 103.7, 85.2, 132.0, 178.1, 142.3, 138.8, 178.8, 136.9, 120.0, 91.4, 46.7], [68.2, 107.0, 100.9, 133.9, 300.8, 244.4, 280.4, 269.5, 141.6, 90.8, 104.1, 26.5], [58.3, 95.7, 144.1, 234.4, 285.0, 121.1, 268.5, 236.6, 164.7, 124.4, 83.7, 58.8], [66.9, 60.0, 87.2, 156.6, 142.9, 150.0, 217.3, 241.4, 165.4, 79.4, 57.4, 58.4], [46.8, 67.3, 73.3, 139.2, 262.7, 212.2, 164.0, 173.6, 120.2, 101.3, 61.5, 47.2], [38.0, 54.7, 135.0, 111.9, 196.7, 231.4, 190.0, 238.3, 107.7, 120.0, 76.3, 55.0], [87.0, 77.6, 127.6, 177.7, 162.1, 254.9, 248.3, 191.8, 113.1, 137.5, 46.7, 68.2], [61.8, 74.9, 198.7, 190.1, 233.5, 194.4, 247.6, 285.1, 135.3, 139.9, 78.1, 40.9], [29.3, 103.4, 76.4, 148.3, 185.7, 290.7, 256.6, 211.6, 125.3, 130.8, 101.0, 55.5], [51.4, 64.2, 150.2, 189.9, 261.4, 137.1, 231.7, 172.0, 169.7, 153.8, 47.1, 55.7], [64.0, 113.0, 77.5, 105.8, 199.8, 114.0, 157.0, 225.0, 133.8, 94.5, 66.3, 38.1], [51.1, 81.3, 97.4, 147.6, 153.6, 202.1, 235.4, 159.2, 155.2, 144.8, 81.1, 60.9], [82.1, 104.9, 112.6, 143.4, 189.8, 164.6, 161.2, 209.4, 126.1, 83.9, 69.2, 51.9], [83.3, 85.0, 74.1, 148.2, 198.3, 226.8, 206.1, 184.1, 123.0, 100.9, 86.9, 79.2], [44.4, 80.5, 101.1, 210.0, 177.5, 163.3, 178.8, 166.2, 167.1, 104.8, 52.3, 41.3], [87.7, 94.4, 154.8, 169.8, 191.2, 213.6, 192.0, 228.4, 175.3, 134.8, 78.9, 53.6], [62.7, 79.1, 101.5, 150.3, 195.5, 223.6, 169.5, 194.1, 174.4, 102.4, 52.4, 58.3], [65.4, 66.3, 79.3, 136.3, 226.4, 177.6, 192.0, 235.7, 155.4, 92.0, 88.0, 55.7], [54.9, 73.1, 95.5, 152.5, 165.7, 246.2, 303.7, 167.2, 156.5, 109.0, 101.2, 42.7], [79.8, 67.6, 165.4, 210.7, 165.5, 149.0, 195.1, 209.2, 142.6, 102.5, 86.9, 57.2], [62.4, 124.1, 115.2, 161.2, 173.2, 223.8, 198.5, 141.8, 113.5, 132.2, 67.0, 73.5], [69.3, 64.5, 161.4, 168.4, 226.1, 203.3, 212.3, 190.6, 163.7, 109.7, 73.5, 61.5]] Calcule: Calcule a m\u00e9dia de horas de sol para cada m\u00eas desde 1929 at\u00e9 2009; Qual m\u00eas teve o melhor tempo de acordo com as m\u00e9dias encontradas? Para cada d\u00e9cada, 1930, 1940, ..., 2000, calcule a m\u00e9dia de horas de sol por dia no ver\u00e3o, meses de Dezembro e Janeiro juntos (considere o m\u00eas com 31 dias).","title":"Tarefa"},{"location":"poo/derivadaclasses/","text":"Relembrando a classe para a deriva\u00e7\u00e3o num\u00e9rica f'(x) \\approx {f(x+h)-f(x) \\over h} class Derivada : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) def __call__ ( self , x ): f , h = self . f , self . h ## formando formas curtas return ( f ( x + h ) - f ( x )) / h def f ( x ): return exp ( - x ) * cos ( tanh ( x )) from math import exp , cos , tanh dfdx = Derivada ( f ) print dfdx ( 2.0 ) Existem diversas f\u00f3rmulas para a deriva\u00e7\u00e3o num\u00e9rica \\begin{align*} f'(x) &= \\frac{f(x+h)-f(x)}{h} + { \\cal O}(h) \\quad \\text{diferencial a frente de 1 ordem} \\\\ f'(x) &= \\frac{f(x)-f(x-h)}{h} + { \\cal O}(h) \\quad \\text{diferencial \u00e0 tr\u00e1s de 1 ordem} \\\\ f'(x) &= \\frac{f(x+h)-f(x-h)}{2h} + { \\cal O}(h^2) \\quad \\text{diferencial central de 2 ordem} \\\\ f'(x) &= \\frac{4}{3} \\frac{f(x+h)-f(x-h)}{2h} - \\frac{1}{3} \\frac{f(x+2h) - f(x-2h)}{4h} \\\\ &+ { \\cal O}(h^4) \\quad \\text{diferencial central de 4 ordem} \\\\ f'(x) &= \\frac{3}{2} \\frac{f(x+h)-f(x-h)}{2h} - \\frac{3}{5} \\frac{f(x+2h) - f(x-2h)}{4h} \\\\ &+ \\frac{1}{10} \\frac{f(x+3h) - f(x-3h)}{6h} + { \\cal O}(h^6) \\quad \\text{diferencial central de 6 ordem} \\\\ f'(x) &= \\frac{1}{h} \\left( - \\frac{1}{6}f(x+2h) + f(x+h) - \\frac{1}{2}f(x) - \\frac{1}{3}f(x-h) \\right) \\\\ &+ { \\cal O}(h^3) \\quad \\text{diferencial a frente de 3 ordem} \\end{align*} Como podemos escrever um m\u00f3dulo que oferece todas essas f\u00f3rmulas? \u00c9 f\u00e1cil: class Frente1 : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x + h ) - f ( x )) / h class Tras1 : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x ) - f ( x - h )) / h class Central2 : ## mesmo contrutor ## coloque as f\u00f3rmulas relevantes em __call__ Qual \u00e9 o problema com esse tipo de c\u00f3digo? Todos os construtores s\u00e3o iguais ent\u00e3o muito c\u00f3digo \u00e9 duplicado. Ideia geral: colocar o c\u00f3digo em comum em uma superclasse; Herdar o construtor da superclasse fazendo subclasses para as diferentes f\u00f3rmulas de deriva\u00e7\u00e3o utilizando o __call__ Classe hier\u00e1rquica para deriva\u00e7\u00e3o num\u00e9rica Superclasse class derivada : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) Subclasse para a equa\u00e7\u00e3o de deriva\u00e7\u00e3o de primeira ordem para frente class frente1 ( derivada ): def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x + h ) - f ( x )) / h Subclasse para a equa\u00e7\u00e3o de deriva\u00e7\u00e3o de quarta ordem central class central4 ( derivada ): def __call__ ( self , x ): f , h = self . f , self . h return ( 4. / 3 ) * ( f ( x + h ) - f ( x - h )) / ( 2 * h ) - \\ ( 1. / 3 ) * ( f ( x + 2 * h ) - f ( x - 2 * h )) / ( 4 * h ) Uso das classes de deriva\u00e7\u00e3o Exemplo: sendo $ f(x) = sen(x) $, calcule $ f'(x) $ para $ x = \\pi $, usando a deriva\u00e7\u00e3o central de ordem 4. >>> from derivada import * >>> from math import sin >>> meucos = central4 ( sin ) >>> # calcule sin'(pi): >>> meucos ( pi ) - 1.000000082740371 central4(sin) chama o construtor herdado na superclasse, enquanto meucos(pi) chama __call__ na subclasse central4 Exerc\u00edcio 2: avaliando o fluxo do programa Um programa flex\u00edvel para a deriva\u00e7\u00e3o num\u00e9rica Suponha que n\u00f3s queremos derivar equa\u00e7\u00f5es da linha de comando: Terminal> python df.py 'exp(sin(x))' Central 2 3.1 -1.04155573055 Terminal> python df.py 'f(x)' difftype difforder x f'(x) Usando o eval e a classe hier\u00e1rquica derivada este programa principal pode ser feito em poucas linhas (muitas linhas em C# e Java): import sys from derivada import * from math import * from scitools.StringFunction import StringFunction f = StringFunction ( sys . argv [ 1 ]) derivada_tipo = sys . argv [ 2 ] derivada_ordem = sys . argv [ 3 ] nome_classe = derivada_tipo + derivada_ordem df = eval ( nome_classe + '(f)' ) x = float ( sys . argv [ 4 ]) print df ( x ) Investigando erros num\u00e9ricos por aproxima\u00e7\u00f5es Podemos investigar, empiricamente, a precis\u00e3o de nossa fam\u00edlia de 6 equa\u00e7\u00f5es de deriva\u00e7\u00e3o num\u00e9rica; Fun\u00e7\u00e3o de teste: $ f(x) = exp(-10x) $; Queremos o resultado na seguinte forma: h Frente1 Central2 Central4 6.25E-02 -2.56418286E+00 6.63876231E-01 -5.32825724E-02 3.12E-02 -1.41170013E+00 1.63556996E-01 -3.21608292E-03 1.56E-02 -7.42100948E-01 4.07398036E-02 -1.99260429E-04 7.81E-03 -3.80648092E-01 1.01756309E-02 -1.24266603E-05 3.91E-03 -1.92794011E-01 2.54332554E-03 -7.76243120E-07 1.95E-03 -9.70235594E-02 6.35795004E-04 -4.85085874E-08 Observa\u00e7\u00f5es: Reduzindo \u00e0 metade $h$ de linha a linha o erro se reduz por um fator de 2, 4 e 16, isto \u00e9, os erros se reduzem em $h$, $h^2$ e $h^4$; central4 tem uma precis\u00e3o muito superior se comparada com frente1 . Implementa\u00e7\u00e3o class derivada2 ( derivada ): def __init__ ( self , f , h = 1E-5 , dfdx_exact = None ): derivada . __init__ ( self , f , h ) self . exact = dfdx_exact def error ( self , x ): if self . exact is not None : df_numerical = self ( x ) df_exact = self . exact ( x ) return df_exact - df_numerical class frente1 ( derivada2 ): def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x + h ) - f ( x )) / h class central2 ( derivada2 ): def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x + h ) - f ( x - h )) / ( 2 * h ) class central4 ( derivada2 ): def __call__ ( self , x ): f , h = self . f , self . h return ( 4. / 3 ) * ( f ( x + h ) - f ( x - h )) / ( 2 * h ) - ( 1. / 3 ) * ( f ( x + 2 * h ) - f ( x - 2 * h )) / ( 4 * h ) Uso from derivada2 import * from math import exp def f1 ( x ): return exp ( - 10 * x ) def df1dx ( x ): return - 10 * exp ( - 10 * x ) def tabela ( f , x , h_values , metodos , dfdx = None ): # imprimir o cabe\u00e7alho (h e os nomes das classes para os m\u00e9todos) print \u2019 h \u2019 , for metodo in metodos : print \u2019 %- 15 s \u2019 % method . __name__ , print # nova linha # imprimir a tabela for h in h_values : print \u2019 % 10.2 E \u2019 % h , for metodo in metodos : if dfdx is not None : # escrever o erro d = metodo ( f , h , dfdx ) output = d . error ( x ) else : # escrever o valor d = metodo ( f , h ) output = d ( x ) print \u2019 % 15.8 E \u2019 % output , print # nova linha tabela ( f1 , 0 , [ 2 ** ( - k ) for k in range ( 10 )], [ frente1 , central2 , central4 ], df1dx )","title":"Classes para derivadas"},{"location":"poo/derivadaclasses/#relembrando-a-classe-para-a-derivacao-numerica","text":"f'(x) \\approx {f(x+h)-f(x) \\over h} class Derivada : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) def __call__ ( self , x ): f , h = self . f , self . h ## formando formas curtas return ( f ( x + h ) - f ( x )) / h def f ( x ): return exp ( - x ) * cos ( tanh ( x )) from math import exp , cos , tanh dfdx = Derivada ( f ) print dfdx ( 2.0 )","title":"Relembrando a classe para a deriva\u00e7\u00e3o num\u00e9rica"},{"location":"poo/derivadaclasses/#existem-diversas-formulas-para-a-derivacao-numerica","text":"\\begin{align*} f'(x) &= \\frac{f(x+h)-f(x)}{h} + { \\cal O}(h) \\quad \\text{diferencial a frente de 1 ordem} \\\\ f'(x) &= \\frac{f(x)-f(x-h)}{h} + { \\cal O}(h) \\quad \\text{diferencial \u00e0 tr\u00e1s de 1 ordem} \\\\ f'(x) &= \\frac{f(x+h)-f(x-h)}{2h} + { \\cal O}(h^2) \\quad \\text{diferencial central de 2 ordem} \\\\ f'(x) &= \\frac{4}{3} \\frac{f(x+h)-f(x-h)}{2h} - \\frac{1}{3} \\frac{f(x+2h) - f(x-2h)}{4h} \\\\ &+ { \\cal O}(h^4) \\quad \\text{diferencial central de 4 ordem} \\\\ f'(x) &= \\frac{3}{2} \\frac{f(x+h)-f(x-h)}{2h} - \\frac{3}{5} \\frac{f(x+2h) - f(x-2h)}{4h} \\\\ &+ \\frac{1}{10} \\frac{f(x+3h) - f(x-3h)}{6h} + { \\cal O}(h^6) \\quad \\text{diferencial central de 6 ordem} \\\\ f'(x) &= \\frac{1}{h} \\left( - \\frac{1}{6}f(x+2h) + f(x+h) - \\frac{1}{2}f(x) - \\frac{1}{3}f(x-h) \\right) \\\\ &+ { \\cal O}(h^3) \\quad \\text{diferencial a frente de 3 ordem} \\end{align*}","title":"Existem diversas f\u00f3rmulas para a deriva\u00e7\u00e3o num\u00e9rica"},{"location":"poo/derivadaclasses/#como-podemos-escrever-um-modulo-que-oferece-todas-essas-formulas","text":"\u00c9 f\u00e1cil: class Frente1 : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x + h ) - f ( x )) / h class Tras1 : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x ) - f ( x - h )) / h class Central2 : ## mesmo contrutor ## coloque as f\u00f3rmulas relevantes em __call__","title":"Como podemos escrever um m\u00f3dulo que oferece todas essas f\u00f3rmulas?"},{"location":"poo/derivadaclasses/#qual-e-o-problema-com-esse-tipo-de-codigo","text":"Todos os construtores s\u00e3o iguais ent\u00e3o muito c\u00f3digo \u00e9 duplicado. Ideia geral: colocar o c\u00f3digo em comum em uma superclasse; Herdar o construtor da superclasse fazendo subclasses para as diferentes f\u00f3rmulas de deriva\u00e7\u00e3o utilizando o __call__","title":"Qual \u00e9 o problema com esse tipo de c\u00f3digo?"},{"location":"poo/derivadaclasses/#classe-hierarquica-para-derivacao-numerica","text":"Superclasse class derivada : def __init__ ( self , f , h = 1E-5 ): self . f = f self . h = float ( h ) Subclasse para a equa\u00e7\u00e3o de deriva\u00e7\u00e3o de primeira ordem para frente class frente1 ( derivada ): def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x + h ) - f ( x )) / h Subclasse para a equa\u00e7\u00e3o de deriva\u00e7\u00e3o de quarta ordem central class central4 ( derivada ): def __call__ ( self , x ): f , h = self . f , self . h return ( 4. / 3 ) * ( f ( x + h ) - f ( x - h )) / ( 2 * h ) - \\ ( 1. / 3 ) * ( f ( x + 2 * h ) - f ( x - 2 * h )) / ( 4 * h )","title":"Classe hier\u00e1rquica para deriva\u00e7\u00e3o num\u00e9rica"},{"location":"poo/derivadaclasses/#uso-das-classes-de-derivacao","text":"Exemplo: sendo $ f(x) = sen(x) $, calcule $ f'(x) $ para $ x = \\pi $, usando a deriva\u00e7\u00e3o central de ordem 4. >>> from derivada import * >>> from math import sin >>> meucos = central4 ( sin ) >>> # calcule sin'(pi): >>> meucos ( pi ) - 1.000000082740371 central4(sin) chama o construtor herdado na superclasse, enquanto meucos(pi) chama __call__ na subclasse central4","title":"Uso das classes de deriva\u00e7\u00e3o"},{"location":"poo/derivadaclasses/#exercicio-2-avaliando-o-fluxo-do-programa","text":"","title":"Exerc\u00edcio 2: avaliando o fluxo do programa"},{"location":"poo/derivadaclasses/#um-programa-flexivel-para-a-derivacao-numerica","text":"Suponha que n\u00f3s queremos derivar equa\u00e7\u00f5es da linha de comando: Terminal> python df.py 'exp(sin(x))' Central 2 3.1 -1.04155573055 Terminal> python df.py 'f(x)' difftype difforder x f'(x) Usando o eval e a classe hier\u00e1rquica derivada este programa principal pode ser feito em poucas linhas (muitas linhas em C# e Java): import sys from derivada import * from math import * from scitools.StringFunction import StringFunction f = StringFunction ( sys . argv [ 1 ]) derivada_tipo = sys . argv [ 2 ] derivada_ordem = sys . argv [ 3 ] nome_classe = derivada_tipo + derivada_ordem df = eval ( nome_classe + '(f)' ) x = float ( sys . argv [ 4 ]) print df ( x )","title":"Um programa flex\u00edvel para a deriva\u00e7\u00e3o num\u00e9rica"},{"location":"poo/derivadaclasses/#investigando-erros-numericos-por-aproximacoes","text":"Podemos investigar, empiricamente, a precis\u00e3o de nossa fam\u00edlia de 6 equa\u00e7\u00f5es de deriva\u00e7\u00e3o num\u00e9rica; Fun\u00e7\u00e3o de teste: $ f(x) = exp(-10x) $; Queremos o resultado na seguinte forma: h Frente1 Central2 Central4 6.25E-02 -2.56418286E+00 6.63876231E-01 -5.32825724E-02 3.12E-02 -1.41170013E+00 1.63556996E-01 -3.21608292E-03 1.56E-02 -7.42100948E-01 4.07398036E-02 -1.99260429E-04 7.81E-03 -3.80648092E-01 1.01756309E-02 -1.24266603E-05 3.91E-03 -1.92794011E-01 2.54332554E-03 -7.76243120E-07 1.95E-03 -9.70235594E-02 6.35795004E-04 -4.85085874E-08 Observa\u00e7\u00f5es: Reduzindo \u00e0 metade $h$ de linha a linha o erro se reduz por um fator de 2, 4 e 16, isto \u00e9, os erros se reduzem em $h$, $h^2$ e $h^4$; central4 tem uma precis\u00e3o muito superior se comparada com frente1 .","title":"Investigando erros num\u00e9ricos por aproxima\u00e7\u00f5es"},{"location":"poo/derivadaclasses/#implementacao","text":"class derivada2 ( derivada ): def __init__ ( self , f , h = 1E-5 , dfdx_exact = None ): derivada . __init__ ( self , f , h ) self . exact = dfdx_exact def error ( self , x ): if self . exact is not None : df_numerical = self ( x ) df_exact = self . exact ( x ) return df_exact - df_numerical class frente1 ( derivada2 ): def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x + h ) - f ( x )) / h class central2 ( derivada2 ): def __call__ ( self , x ): f , h = self . f , self . h return ( f ( x + h ) - f ( x - h )) / ( 2 * h ) class central4 ( derivada2 ): def __call__ ( self , x ): f , h = self . f , self . h return ( 4. / 3 ) * ( f ( x + h ) - f ( x - h )) / ( 2 * h ) - ( 1. / 3 ) * ( f ( x + 2 * h ) - f ( x - 2 * h )) / ( 4 * h ) Uso from derivada2 import * from math import exp def f1 ( x ): return exp ( - 10 * x ) def df1dx ( x ): return - 10 * exp ( - 10 * x ) def tabela ( f , x , h_values , metodos , dfdx = None ): # imprimir o cabe\u00e7alho (h e os nomes das classes para os m\u00e9todos) print \u2019 h \u2019 , for metodo in metodos : print \u2019 %- 15 s \u2019 % method . __name__ , print # nova linha # imprimir a tabela for h in h_values : print \u2019 % 10.2 E \u2019 % h , for metodo in metodos : if dfdx is not None : # escrever o erro d = metodo ( f , h , dfdx ) output = d . error ( x ) else : # escrever o valor d = metodo ( f , h ) output = d ( x ) print \u2019 % 15.8 E \u2019 % output , print # nova linha tabela ( f1 , 0 , [ 2 ** ( - k ) for k in range ( 10 )], [ frente1 , central2 , central4 ], df1dx )","title":"Implementa\u00e7\u00e3o"},{"location":"poo/exemplosheranca/","text":"Uma classe para linhas retas Problema: Fazer uma classe para avaliar linhas $ y = c_0 + c_1 x $ C\u00f3digo: class Linha : def __init__ ( self , c0 , c1 ): self . c0 , self . c1 = c0 , c1 def __call__ ( self , x ): return self . c0 + self . c1 * x def tabela ( self , L , R , n ): \"\"\"Retorna uma tabela com n pontos para L <= x <= R.\"\"\" s = '' for x in linspace ( L , R , n ): y = self ( x ) s += ' %12g %12g \\n ' % ( x , y ) return s Classe para par\u00e1bolas Problema: Fazer uma classe para avaliar par\u00e1bolas $ y = c_0 + c_1 x + c_2 x^2 $ C\u00f3digo: class Parabola : def __init__ ( self , c0 , c1 , c2 ): self . c0 , self . c1 , self . c2 = c0 , c1 , c2 def __call__ ( self , x ): return self . c2 * x ** 2 + self . c1 * x + self . c0 def tabela ( self , L , R , n ): \"\"\"Retorna uma tabela com n pontos para L <= x <= R.\"\"\" s = '' for x in linspace ( L , R , n ): y = self ( x ) s += ' %12g %12g \\n ' % ( x , y ) return s Observa\u00e7\u00e3o: \u00c9 praticamente o mesmo c\u00f3digo da classe Linha, exceto pelas parcelas com $ c_2 $. Classe Parabola como uma subclasse de Linhas - Princ\u00edpios C\u00f3digo da Parabola: C\u00f3digo da Linha + um extra com o termo $ c_2 $. Podemos utilizar o c\u00f3digo da classe Linha na classe Parabola? Isto \u00e9 heran\u00e7a! Escrevendo: class Parabola ( Linha ): pass Faz Parabola herdar todos os m\u00e9todos e atributos de Linha, ent\u00e3o Parabola possui os atributos $ c_0 $ e $ c_1 $ e tr\u00eas m\u00e9todos. Linha \u00e9 uma superclasse, Parabola \u00e9 uma subclasse (classe pai, classe base e classe filha ou classe derivada); A classe Parabola deve adicionar c\u00f3digo no construtor de Linha (um atributo $ c_2 $ extra), __call__(um termo extra) , por\u00e9m tabela pode ser utilizado sem altera\u00e7\u00f5es. O princ\u00edpio \u00e9 reutilziar o m\u00e1ximo de c\u00f3digo poss\u00edvel em Linha e evitar duplicatas. Classe Parabola como uma subclasse de Linhas - C\u00f3digo Um m\u00e9todo de uma subclasse pode chamar um m\u00e9todo de uma superclasse da seguinte forma: superclasse_nome.metodo(self, arg1, arg2, ...) Classe Parabola como uma subclasse de Linha: class Parabola ( Linha ): def __init__ ( self , c0 , c1 , c2 ): Linha . __init__ ( self , c0 , c1 ) ## Linha armazena c0, c1 self . c2 = c2 def __call__ ( self , x ): return Linha . __call__ ( self , x ) + self . c2 * x ** 2 O que foi ganho? A classe Parabola apenas adiciona c\u00f3digo \u00e0 um c\u00f3digo j\u00e1 existente na classe Linha, nenhuma duplicata de $ c_0 $ e $ c_1 $ e do c\u00e1lculo de $ c_0 + c_1 x $; A classe Parabola tamb\u00e9m possui o m\u00e9todo tabela , ele \u00e9 herdado; __init__ e __call__ s\u00e3o sobrescritos e redefinidos na subclasse. Classe Parabola como uma subclasse de Linhas - chamada p = Parabola ( 1 , - 2 , 2 ) p1 = p ( 2.5 ) print p1 print p . table ( 0 , 1 , 3 ) Sa\u00edda: 8.5 0 1 0.5 0.5 1 1 Podemos verificar o tipo da classe e as rela\u00e7\u00f5es da classe Pode ser feito utilizando isinstance(obj, tipo) e issubclass(subclassenome, superclassenome) >>> from Linha_Parabola import Linha , Parabola >>> l = Linha ( - 1 , 1 ) >>> isinstance ( l , Linha ) True >>> isinstance ( l , Parabola ) False >>> p = Parabola ( - 1 , 0 , 10 ) >>> isinstance ( p , Parabola ) True >>> isinstance ( p , Linha ) True >>> issubclass ( Parabola , Linha ) True >>> issubclass ( Linha , Parabola ) False >>> p . __class__ == Parabola True >>> p . __class__ . __name__ ## vers\u00e3o de texto do nome da classe 'Parabola' Invertendo: Linha como uma subclasse de Parabola Subclasses s\u00e3o normalmente casos especiais de superclasses; A linha $ c_0 + c_1 x $ \u00e9 um caso especial de uma par\u00e1bola $ c_0 + c_1 x + c_2 x^2 $; A Linha pode ser uma subclasse de Parabola? Sem problemas, isto \u00e9 escolha do programador; Muitos podem preferir esta rela\u00e7\u00e3o de redu\u00e7\u00e3o de c\u00f3digo. Linha como uma subclasse de Parabola - c\u00f3digo class Parabola : def __init__ ( self , c0 , c1 , c2 ): self . c0 , self . c1 , self . c2 = c0 , c1 , c2 def __call__ ( self , x ): return self . c2 * x ** 2 + self . c1 * x + self . c0 def tabela ( self , L , R , n ): \"\"\"Retorna uma tabela com n pontos para L <= x <= R.\"\"\" s = '' for x in linspace ( L , R , n ): y = self ( x ) s += ' %12g %12g \\n ' % ( x , y ) return s class Linha ( Parabola ): def __init__ ( self , c0 , c1 ): Parabola . __init__ ( self , c0 , c1 , 0 ) Nota: __call__ e tabela podem ser reutilizados na classe Linha!","title":"Exemplos heran\u00e7as"},{"location":"poo/exemplosheranca/#uma-classe-para-linhas-retas","text":"Problema: Fazer uma classe para avaliar linhas $ y = c_0 + c_1 x $ C\u00f3digo: class Linha : def __init__ ( self , c0 , c1 ): self . c0 , self . c1 = c0 , c1 def __call__ ( self , x ): return self . c0 + self . c1 * x def tabela ( self , L , R , n ): \"\"\"Retorna uma tabela com n pontos para L <= x <= R.\"\"\" s = '' for x in linspace ( L , R , n ): y = self ( x ) s += ' %12g %12g \\n ' % ( x , y ) return s","title":"Uma classe para linhas retas"},{"location":"poo/exemplosheranca/#classe-para-parabolas","text":"Problema: Fazer uma classe para avaliar par\u00e1bolas $ y = c_0 + c_1 x + c_2 x^2 $ C\u00f3digo: class Parabola : def __init__ ( self , c0 , c1 , c2 ): self . c0 , self . c1 , self . c2 = c0 , c1 , c2 def __call__ ( self , x ): return self . c2 * x ** 2 + self . c1 * x + self . c0 def tabela ( self , L , R , n ): \"\"\"Retorna uma tabela com n pontos para L <= x <= R.\"\"\" s = '' for x in linspace ( L , R , n ): y = self ( x ) s += ' %12g %12g \\n ' % ( x , y ) return s Observa\u00e7\u00e3o: \u00c9 praticamente o mesmo c\u00f3digo da classe Linha, exceto pelas parcelas com $ c_2 $.","title":"Classe para par\u00e1bolas"},{"location":"poo/exemplosheranca/#classe-parabola-como-uma-subclasse-de-linhas-principios","text":"C\u00f3digo da Parabola: C\u00f3digo da Linha + um extra com o termo $ c_2 $. Podemos utilizar o c\u00f3digo da classe Linha na classe Parabola? Isto \u00e9 heran\u00e7a! Escrevendo: class Parabola ( Linha ): pass Faz Parabola herdar todos os m\u00e9todos e atributos de Linha, ent\u00e3o Parabola possui os atributos $ c_0 $ e $ c_1 $ e tr\u00eas m\u00e9todos. Linha \u00e9 uma superclasse, Parabola \u00e9 uma subclasse (classe pai, classe base e classe filha ou classe derivada); A classe Parabola deve adicionar c\u00f3digo no construtor de Linha (um atributo $ c_2 $ extra), __call__(um termo extra) , por\u00e9m tabela pode ser utilizado sem altera\u00e7\u00f5es. O princ\u00edpio \u00e9 reutilziar o m\u00e1ximo de c\u00f3digo poss\u00edvel em Linha e evitar duplicatas.","title":"Classe Parabola como uma subclasse de Linhas - Princ\u00edpios"},{"location":"poo/exemplosheranca/#classe-parabola-como-uma-subclasse-de-linhas-codigo","text":"Um m\u00e9todo de uma subclasse pode chamar um m\u00e9todo de uma superclasse da seguinte forma: superclasse_nome.metodo(self, arg1, arg2, ...) Classe Parabola como uma subclasse de Linha: class Parabola ( Linha ): def __init__ ( self , c0 , c1 , c2 ): Linha . __init__ ( self , c0 , c1 ) ## Linha armazena c0, c1 self . c2 = c2 def __call__ ( self , x ): return Linha . __call__ ( self , x ) + self . c2 * x ** 2 O que foi ganho? A classe Parabola apenas adiciona c\u00f3digo \u00e0 um c\u00f3digo j\u00e1 existente na classe Linha, nenhuma duplicata de $ c_0 $ e $ c_1 $ e do c\u00e1lculo de $ c_0 + c_1 x $; A classe Parabola tamb\u00e9m possui o m\u00e9todo tabela , ele \u00e9 herdado; __init__ e __call__ s\u00e3o sobrescritos e redefinidos na subclasse.","title":"Classe Parabola como uma subclasse de Linhas - C\u00f3digo"},{"location":"poo/exemplosheranca/#classe-parabola-como-uma-subclasse-de-linhas-chamada","text":"p = Parabola ( 1 , - 2 , 2 ) p1 = p ( 2.5 ) print p1 print p . table ( 0 , 1 , 3 ) Sa\u00edda: 8.5 0 1 0.5 0.5 1 1","title":"Classe Parabola como uma subclasse de Linhas - chamada"},{"location":"poo/exemplosheranca/#podemos-verificar-o-tipo-da-classe-e-as-relacoes-da-classe","text":"Pode ser feito utilizando isinstance(obj, tipo) e issubclass(subclassenome, superclassenome) >>> from Linha_Parabola import Linha , Parabola >>> l = Linha ( - 1 , 1 ) >>> isinstance ( l , Linha ) True >>> isinstance ( l , Parabola ) False >>> p = Parabola ( - 1 , 0 , 10 ) >>> isinstance ( p , Parabola ) True >>> isinstance ( p , Linha ) True >>> issubclass ( Parabola , Linha ) True >>> issubclass ( Linha , Parabola ) False >>> p . __class__ == Parabola True >>> p . __class__ . __name__ ## vers\u00e3o de texto do nome da classe 'Parabola'","title":"Podemos verificar o tipo da classe e as rela\u00e7\u00f5es da classe"},{"location":"poo/exemplosheranca/#invertendo-linha-como-uma-subclasse-de-parabola","text":"Subclasses s\u00e3o normalmente casos especiais de superclasses; A linha $ c_0 + c_1 x $ \u00e9 um caso especial de uma par\u00e1bola $ c_0 + c_1 x + c_2 x^2 $; A Linha pode ser uma subclasse de Parabola? Sem problemas, isto \u00e9 escolha do programador; Muitos podem preferir esta rela\u00e7\u00e3o de redu\u00e7\u00e3o de c\u00f3digo.","title":"Invertendo: Linha como uma subclasse de Parabola"},{"location":"poo/exemplosheranca/#linha-como-uma-subclasse-de-parabola-codigo","text":"class Parabola : def __init__ ( self , c0 , c1 , c2 ): self . c0 , self . c1 , self . c2 = c0 , c1 , c2 def __call__ ( self , x ): return self . c2 * x ** 2 + self . c1 * x + self . c0 def tabela ( self , L , R , n ): \"\"\"Retorna uma tabela com n pontos para L <= x <= R.\"\"\" s = '' for x in linspace ( L , R , n ): y = self ( x ) s += ' %12g %12g \\n ' % ( x , y ) return s class Linha ( Parabola ): def __init__ ( self , c0 , c1 ): Parabola . __init__ ( self , c0 , c1 , 0 ) Nota: __call__ e tabela podem ser reutilizados na classe Linha!","title":"Linha como uma subclasse de Parabola - c\u00f3digo"},{"location":"poo/integralclasses/","text":"Equa\u00e7\u00f5es para a integra\u00e7\u00e3o num\u00e9rica Existem v\u00e1rias equa\u00e7\u00f5es para a integra\u00e7\u00e3o num\u00e9rica e todas podem ser colocadas em uma nota\u00e7\u00e3o comum: \\int_a^b f(x) dx \\approx \\sum_{i=1}^{n-1} w_i f(x_i) sendo: $w_i$ os pesos e $x_i$ os pontos (espec\u00edficos para uma certa equa\u00e7\u00e3o). A regra do trap\u00e9zio tem $h = (b - a)/(n - 1) e: x_i = a + ih\\text{,} \\quad \\quad w_0 = w_{n-1} = \\dfrac{h}{2}\\text{,} \\quad \\quad w_i = h(i \\neq 0, n - 1) A regra do ponto m\u00e9dio tem $ h = (b - a)/n $ e: x_i = a + \\dfrac{h}{2} + ih\\text{,} \\quad \\quad w_i = h A regra de Simpson tem $h = (b - a)/(n - 1)$ e: x_i = a + ih\\text{,} \\quad \\quad w_0 = w_{n - 1} = \\dfrac{h}{6}\\text{,} \\quad \\quad w_i = \\dfrac{h}{3} \\ \\text{para } i \\text{ par} \\quad w_i = \\dfrac{2h}{3} \\ \\text{para } i \\text{ \u00edmpar} Quais devem ser implementadas em ua classe hier\u00e1rquica? Uma equa\u00e7\u00e3o para integra\u00e7\u00e3o num\u00e9rica pode ser implementada em uma classe: $a$, $b$ e $n$ s\u00e3o atributos e um m\u00e9todo integracao avalia a equa\u00e7\u00e3o; Todas as tais classes s\u00e3o muito similares: a avalia\u00e7\u00e3o de $\\sum_{j} w_j f(x_j)$ \u00e9 a mesma, somente a defini\u00e7\u00e3o dos pontos e pesos diferem entre as classes; Lembrete: c\u00f3digo duplicado \u00e9 um p\u00e9ssima ideia; Ideia geral de OO: colocar o c\u00f3digo comum a v\u00e1rias classes em uma superclasse e herd\u00e1-lo; Aqui colocaremos $\\sum_{j} w_j f(x_j)$ em uma superclasse (m\u00e9todo integracao ); Subclasses extendem a superclasse com c\u00f3digos espec\u00edficos de uma equa\u00e7\u00e3o matem\u00e1tica, isto \u00e9, $w_i$ e $x_i$ em um m\u00e9todo de uma classe regra_construtor . A superclasse para integra\u00e7\u00e3o class Integrador : def __init__ ( self , a , b , n ): self . a , self . b , self . n = a , b , n self . pontos , self . pesos = self . metodo_construtor () def metodo_construtor ( self ): raise NotImplementedError ( 'Nenhuma regra na classe %s ' % \\ self . __class__ . __name__ ) def integracao ( self , f ): s = 0 for i in range ( len ( self . pesos )): s += self . pesos [ i ] * f ( self . pontos [ i ]) return s def integracao_vetorizada ( self , f ): # f deve ser vetorizado para isso funcionar return dot ( self . pesos , f ( self . pontos )) Subclasse regra dos trap\u00e9zios class Trapezios ( Integrador ): def metodo_construtor ( self ): h = ( self . b - self . a ) / float ( self . n - 1 ) x = linspace ( self . a , self . b , self . n ) w = zeros ( len ( x )) w [ 1 : - 1 ] += h w [ 0 ] = h / 2 ; w [ - 1 ] = h / 2 return x , w Subclasse regra de Simpson class Simpson ( Integrador ): def metodo_construtor ( self ): if self . n % 2 != 1 : print 'n= %d deve ser \u00edmpar, 1 \u00e9 adicionado' % self . n self . n += 1 x = np . linspace ( self . a , self . b , self . n ) h = ( self . b - self . a ) / float ( self . n - 1 ) * 2 w = np . zeros ( len ( x )) w [ 0 : self . n : 2 ] = h * 1.0 / 3 w [ 1 : self . n - 1 : 2 ] = h * 2.0 / 3 w [ 0 ] /= 2 w [ - 1 ] /= 2 return x , w O fluxo do programa Resumo dos princ\u00edpios da orienta\u00e7\u00e3o \u00e0 objeto Uma subclasse herda tudo da superclasse; Quando utilizar subclasses e superclasses? se o c\u00f3digo comum a v\u00e1rias classes pode ser colocado em uma superclasse; se o problema possui um conceito pai-filho natural; O fluxo do programa pula entre a superclasse e a subclasse; Demora tempo para dominar quando e como utilizar OO; Dica: estude exemplos! Tarefa Integre e derive a seguinte equa\u00e7\u00e3o para $m = 0$, $m = 1/4$, $m=1/2$, $m=1/8$, $m = 1$, $m = 2$, $m = 4$ e $m=16$: \\int\\limits_0^1 \\left(1 + {1\\over m}\\right)t^{1\\over m} dt= 1 Objetivos: C\u00f3digo em superclasses e subclasses com fun\u00e7\u00f5es de teste; GUI utilizando o Tkinter para a inser\u00e7\u00e3o do valor de $m$, mostrar o valor c\u00e1lculado e vizualizar um gr\u00e1fico da taxa de converg\u00eancia; O gr\u00e1fico da taxa de converg\u00eancia deve mostrar, em escala logar\u00edtmica valores variados de $n$ em x e do erro em y para as regras de integracao do ponto central, trap\u00e9zio, Simpson e Gauss Legendre; Os valores de $n$ s\u00e3o: 10, 20, 40, 80, 160, 320, 640","title":"Classes para integrais"},{"location":"poo/integralclasses/#equacoes-para-a-integracao-numerica","text":"Existem v\u00e1rias equa\u00e7\u00f5es para a integra\u00e7\u00e3o num\u00e9rica e todas podem ser colocadas em uma nota\u00e7\u00e3o comum: \\int_a^b f(x) dx \\approx \\sum_{i=1}^{n-1} w_i f(x_i) sendo: $w_i$ os pesos e $x_i$ os pontos (espec\u00edficos para uma certa equa\u00e7\u00e3o). A regra do trap\u00e9zio tem $h = (b - a)/(n - 1) e: x_i = a + ih\\text{,} \\quad \\quad w_0 = w_{n-1} = \\dfrac{h}{2}\\text{,} \\quad \\quad w_i = h(i \\neq 0, n - 1) A regra do ponto m\u00e9dio tem $ h = (b - a)/n $ e: x_i = a + \\dfrac{h}{2} + ih\\text{,} \\quad \\quad w_i = h A regra de Simpson tem $h = (b - a)/(n - 1)$ e: x_i = a + ih\\text{,} \\quad \\quad w_0 = w_{n - 1} = \\dfrac{h}{6}\\text{,} \\quad \\quad w_i = \\dfrac{h}{3} \\ \\text{para } i \\text{ par} \\quad w_i = \\dfrac{2h}{3} \\ \\text{para } i \\text{ \u00edmpar}","title":"Equa\u00e7\u00f5es para a integra\u00e7\u00e3o num\u00e9rica"},{"location":"poo/integralclasses/#quais-devem-ser-implementadas-em-ua-classe-hierarquica","text":"Uma equa\u00e7\u00e3o para integra\u00e7\u00e3o num\u00e9rica pode ser implementada em uma classe: $a$, $b$ e $n$ s\u00e3o atributos e um m\u00e9todo integracao avalia a equa\u00e7\u00e3o; Todas as tais classes s\u00e3o muito similares: a avalia\u00e7\u00e3o de $\\sum_{j} w_j f(x_j)$ \u00e9 a mesma, somente a defini\u00e7\u00e3o dos pontos e pesos diferem entre as classes; Lembrete: c\u00f3digo duplicado \u00e9 um p\u00e9ssima ideia; Ideia geral de OO: colocar o c\u00f3digo comum a v\u00e1rias classes em uma superclasse e herd\u00e1-lo; Aqui colocaremos $\\sum_{j} w_j f(x_j)$ em uma superclasse (m\u00e9todo integracao ); Subclasses extendem a superclasse com c\u00f3digos espec\u00edficos de uma equa\u00e7\u00e3o matem\u00e1tica, isto \u00e9, $w_i$ e $x_i$ em um m\u00e9todo de uma classe regra_construtor .","title":"Quais devem ser implementadas em ua classe hier\u00e1rquica?"},{"location":"poo/integralclasses/#a-superclasse-para-integracao","text":"class Integrador : def __init__ ( self , a , b , n ): self . a , self . b , self . n = a , b , n self . pontos , self . pesos = self . metodo_construtor () def metodo_construtor ( self ): raise NotImplementedError ( 'Nenhuma regra na classe %s ' % \\ self . __class__ . __name__ ) def integracao ( self , f ): s = 0 for i in range ( len ( self . pesos )): s += self . pesos [ i ] * f ( self . pontos [ i ]) return s def integracao_vetorizada ( self , f ): # f deve ser vetorizado para isso funcionar return dot ( self . pesos , f ( self . pontos ))","title":"A superclasse para integra\u00e7\u00e3o"},{"location":"poo/integralclasses/#subclasse-regra-dos-trapezios","text":"class Trapezios ( Integrador ): def metodo_construtor ( self ): h = ( self . b - self . a ) / float ( self . n - 1 ) x = linspace ( self . a , self . b , self . n ) w = zeros ( len ( x )) w [ 1 : - 1 ] += h w [ 0 ] = h / 2 ; w [ - 1 ] = h / 2 return x , w","title":"Subclasse regra dos trap\u00e9zios"},{"location":"poo/integralclasses/#subclasse-regra-de-simpson","text":"class Simpson ( Integrador ): def metodo_construtor ( self ): if self . n % 2 != 1 : print 'n= %d deve ser \u00edmpar, 1 \u00e9 adicionado' % self . n self . n += 1 x = np . linspace ( self . a , self . b , self . n ) h = ( self . b - self . a ) / float ( self . n - 1 ) * 2 w = np . zeros ( len ( x )) w [ 0 : self . n : 2 ] = h * 1.0 / 3 w [ 1 : self . n - 1 : 2 ] = h * 2.0 / 3 w [ 0 ] /= 2 w [ - 1 ] /= 2 return x , w","title":"Subclasse regra de Simpson"},{"location":"poo/integralclasses/#o-fluxo-do-programa","text":"","title":"O fluxo do programa"},{"location":"poo/integralclasses/#resumo-dos-principios-da-orientacao-a-objeto","text":"Uma subclasse herda tudo da superclasse; Quando utilizar subclasses e superclasses? se o c\u00f3digo comum a v\u00e1rias classes pode ser colocado em uma superclasse; se o problema possui um conceito pai-filho natural; O fluxo do programa pula entre a superclasse e a subclasse; Demora tempo para dominar quando e como utilizar OO; Dica: estude exemplos!","title":"Resumo dos princ\u00edpios da orienta\u00e7\u00e3o \u00e0 objeto"},{"location":"poo/integralclasses/#tarefa","text":"Integre e derive a seguinte equa\u00e7\u00e3o para $m = 0$, $m = 1/4$, $m=1/2$, $m=1/8$, $m = 1$, $m = 2$, $m = 4$ e $m=16$: \\int\\limits_0^1 \\left(1 + {1\\over m}\\right)t^{1\\over m} dt= 1 Objetivos: C\u00f3digo em superclasses e subclasses com fun\u00e7\u00f5es de teste; GUI utilizando o Tkinter para a inser\u00e7\u00e3o do valor de $m$, mostrar o valor c\u00e1lculado e vizualizar um gr\u00e1fico da taxa de converg\u00eancia; O gr\u00e1fico da taxa de converg\u00eancia deve mostrar, em escala logar\u00edtmica valores variados de $n$ em x e do erro em y para as regras de integracao do ponto central, trap\u00e9zio, Simpson e Gauss Legendre; Os valores de $n$ s\u00e3o: 10, 20, 40, 80, 160, 320, 640","title":"Tarefa"},{"location":"poo/poo/","text":"Programa\u00e7\u00e3o Orientada a Objeto O amigo do pai do dono do cachorro ao lado do vizinho do filho tem um peixe azul. Aqui vamos introduzir as id\u00e9ias b\u00e1sicas da programa\u00e7\u00e3o orientada a objeto. Diferentes pessoas relacionam diferentes significados ao termo programa\u00e7\u00e3o orientada a objeto: algumas usam o termo para programa\u00e7\u00e3o com objetos em geral, enquanto outras para programa\u00e7\u00e3o com hierarquia de classes. N\u00f3s vamos com o segundo grupo, pois \u00e9 um termo largamente aceito em ci\u00eancia da computa\u00e7\u00e3o. Os primeiros poderiam utilizar de forma mais correta o termo programa\u00e7\u00e3o baseada em objetos. Como tudo em Python \u00e9 um objeto, n\u00f3s fazemos programa\u00e7\u00e3o orientada a objeto o tempo todo. Heran\u00e7a O t\u00edtulo Programa\u00e7\u00e3o Orientada a Objeto pode significar duas coisas diferentes Programar com classes (melhor: programa\u00e7\u00e3o baseada em objeto) Programar com hierarquias de classes (fam\u00edlias de classes) Novo conceito: coletar classes em fam\u00edlias (hierarquias) O que \u00e9 uma hierarquia de classe? Uma fam\u00edlia de classes proximamente relacionadas; Um conceito chave \u00e9 a heran\u00e7a: classes filhas podem herdar atributos e m\u00e9todos de classe(s) pais. Isto salva muita escrita e c\u00f3digo duplicado. Como usual, vamos aprender com exemplos! Orienta\u00e7\u00e3o \u00e0 Objeto (OO) \u00e9 uma inven\u00e7\u00e3o Norueguesa de Ole-Johan Dahl e Kristen Nygaard nos anos 1960, uma das mais importantes inven\u00e7\u00f5es na ci\u00eancia da computa\u00e7\u00e3o, pois Orienta\u00e7\u00e3o \u00e0 Objeto \u00e9 utiliza em todos os grandes sistemas de computadores hoje em dia! Cuidado: OO \u00e9 dif\u00edcil e lava tempo para ser dominada Deixe as id\u00e9ias amadurecerem com o tempo; Estude v\u00e1rios exemplos; OO \u00e9 menos importante em Python do que em C++, Java e C#, ent\u00e3o os benef\u00edcios s\u00e3o menos \u00f3bvios em Python; Os exemplos em OO aqui empregam m\u00e9todos num\u00e9ricos para $ \\int_a^b f(x) dx $, $f'(x)$ e $u'=f(u, t)$. Tenha certeza de que voc\u00ea entende o b\u00e1sico desses m\u00e9todos num\u00e9ricos antes de estudar a sua combina\u00e7\u00e3o com OO; Nosso objetivo: escrever m\u00f3dulos gerais e reus\u00e1veis com um monte de m\u00e9todos para o c\u00e1lculo num\u00e9rico de $ \\int_a^b f(x) dx $, $f'(x)$ e $u'=f(u, t)$.","title":"Programa\u00e7\u00e3o Orientada a Objeto"},{"location":"poo/poo/#programacao-orientada-a-objeto","text":"O amigo do pai do dono do cachorro ao lado do vizinho do filho tem um peixe azul. Aqui vamos introduzir as id\u00e9ias b\u00e1sicas da programa\u00e7\u00e3o orientada a objeto. Diferentes pessoas relacionam diferentes significados ao termo programa\u00e7\u00e3o orientada a objeto: algumas usam o termo para programa\u00e7\u00e3o com objetos em geral, enquanto outras para programa\u00e7\u00e3o com hierarquia de classes. N\u00f3s vamos com o segundo grupo, pois \u00e9 um termo largamente aceito em ci\u00eancia da computa\u00e7\u00e3o. Os primeiros poderiam utilizar de forma mais correta o termo programa\u00e7\u00e3o baseada em objetos. Como tudo em Python \u00e9 um objeto, n\u00f3s fazemos programa\u00e7\u00e3o orientada a objeto o tempo todo.","title":"Programa\u00e7\u00e3o Orientada a Objeto"},{"location":"poo/poo/#heranca","text":"","title":"Heran\u00e7a"},{"location":"poo/poo/#o-titulo-programacao-orientada-a-objeto-pode-significar-duas-coisas-diferentes","text":"Programar com classes (melhor: programa\u00e7\u00e3o baseada em objeto) Programar com hierarquias de classes (fam\u00edlias de classes)","title":"O t\u00edtulo Programa\u00e7\u00e3o Orientada a Objeto pode significar duas coisas diferentes"},{"location":"poo/poo/#novo-conceito-coletar-classes-em-familias-hierarquias","text":"O que \u00e9 uma hierarquia de classe? Uma fam\u00edlia de classes proximamente relacionadas; Um conceito chave \u00e9 a heran\u00e7a: classes filhas podem herdar atributos e m\u00e9todos de classe(s) pais. Isto salva muita escrita e c\u00f3digo duplicado. Como usual, vamos aprender com exemplos! Orienta\u00e7\u00e3o \u00e0 Objeto (OO) \u00e9 uma inven\u00e7\u00e3o Norueguesa de Ole-Johan Dahl e Kristen Nygaard nos anos 1960, uma das mais importantes inven\u00e7\u00f5es na ci\u00eancia da computa\u00e7\u00e3o, pois Orienta\u00e7\u00e3o \u00e0 Objeto \u00e9 utiliza em todos os grandes sistemas de computadores hoje em dia!","title":"Novo conceito: coletar classes em fam\u00edlias (hierarquias)"},{"location":"poo/poo/#cuidado-oo-e-dificil-e-lava-tempo-para-ser-dominada","text":"Deixe as id\u00e9ias amadurecerem com o tempo; Estude v\u00e1rios exemplos; OO \u00e9 menos importante em Python do que em C++, Java e C#, ent\u00e3o os benef\u00edcios s\u00e3o menos \u00f3bvios em Python; Os exemplos em OO aqui empregam m\u00e9todos num\u00e9ricos para $ \\int_a^b f(x) dx $, $f'(x)$ e $u'=f(u, t)$. Tenha certeza de que voc\u00ea entende o b\u00e1sico desses m\u00e9todos num\u00e9ricos antes de estudar a sua combina\u00e7\u00e3o com OO; Nosso objetivo: escrever m\u00f3dulos gerais e reus\u00e1veis com um monte de m\u00e9todos para o c\u00e1lculo num\u00e9rico de $ \\int_a^b f(x) dx $, $f'(x)$ e $u'=f(u, t)$.","title":"Cuidado: OO \u00e9 dif\u00edcil e lava tempo para ser dominada"}]}