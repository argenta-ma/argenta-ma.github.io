#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 20 07:50:10 2019

@author: markinho
"""

import numpy as np


#def dNdsEP9(r, s):
#    return np.array([[r*s**2/2 + r*s/2 + s**2/4 + s/4, r**2*s/2 + r**2/4 + r*s/2 + r/4],
#                    [r*s**2/2 + r*s/2 - s**2/4 - s/4, r**2*s/2 + r**2/4 - r*s/2 - r/4],
#                    [r*s**2/2 - r*s/2 - s**2/4 + s/4, r**2*s/2 - r**2/4 - r*s/2 + r/4],
#                    [r*s**2/2 - r*s/2 + s**2/4 - s/4, r**2*s/2 - r**2/4 + r*s/2 - r/4],
#                    [                  -r*s**2 - r*s,      -r**2*s - r**2/2 + s + 1/2],
#                    [     -r*s**2 + r + s**2/2 - 1/2,                   -r**2*s + r*s],
#                    [                  -r*s**2 + r*s,      -r**2*s + r**2/2 + s - 1/2],
#                    [     -r*s**2 + r - s**2/2 + 1/2,                   -r**2*s - r*s],
#                    [                 2*r*s**2 - 2*r,                  2*r**2*s - 2*s]])
#
#
#def dNdrKL9(r, s):
#    return np.array([[-15*r**4*s**2/8 - 15*r**4*s/8 - r**3*s**2 - r**3*s + 15*r**2*s**2/8 + 15*r**2*s/8 - 3*r*s**5/4 - r*s**4/2 + 5*r*s**3/4 + 3*r*s**2/2 + r*s/2 - 3*s**5/8 - s**4/4 + 5*s**3/8 + s**2/4 - s/4,
#                        15*r**4*s**2/8 + 15*r**4*s/8 - r**3*s**2 - r**3*s - 15*r**2*s**2/8 - 15*r**2*s/8 - 3*r*s**5/4 - r*s**4/2 + 5*r*s**3/4 + 3*r*s**2/2 + r*s/2 + 3*s**5/8 + s**4/4 - 5*s**3/8 - s**2/4 + s/4,
#                        15*r**4*s**2/8 - 15*r**4*s/8 - r**3*s**2 + r**3*s - 15*r**2*s**2/8 + 15*r**2*s/8 + 3*r*s**5/4 - r*s**4/2 - 5*r*s**3/4 + 3*r*s**2/2 - r*s/2 - 3*s**5/8 + s**4/4 + 5*s**3/8 - s**2/4 - s/4,
#                        -15*r**4*s**2/8 + 15*r**4*s/8 - r**3*s**2 + r**3*s + 15*r**2*s**2/8 - 15*r**2*s/8 + 3*r*s**5/4 - r*s**4/2 - 5*r*s**3/4 + 3*r*s**2/2 - r*s/2 + 3*s**5/8 - s**4/4 - 5*s**3/8 + s**2/4 + s/4,
#                        2*r**3*s**2 + 2*r**3*s + 3*r*s**5/2 + r*s**4 - 5*r*s**3/2 - 3*r*s**2 - r*s,
#                        -15*r**4*s**2/4 + 15*r**4/4 + 2*r**3*s**2 - 2*r**3 + 15*r**2*s**2/4 - 15*r**2/4 + r*s**4 - 3*r*s**2 + 2*r - s**4/2 + s**2/2,
#                        2*r**3*s**2 - 2*r**3*s - 3*r*s**5/2 + r*s**4 + 5*r*s**3/2 - 3*r*s**2 + r*s,
#                        15*r**4*s**2/4 - 15*r**4/4 + 2*r**3*s**2 - 2*r**3 - 15*r**2*s**2/4 + 15*r**2/4 + r*s**4 - 3*r*s**2 + 2*r + s**4/2 - s**2/2,
#                        -4*r**3*s**2 + 4*r**3 - 2*r*s**4 + 6*r*s**2 - 4*r],
#                       [-3*r**5*s/4 - 3*r**5/8 - r**4*s/2 - r**4/4 + 5*r**3*s/4 + 5*r**3/8 - 15*r**2*s**4/8 - r**2*s**3 + 15*r**2*s**2/8 + 3*r**2*s/2 + r**2/4 - 15*r*s**4/8 - r*s**3 + 15*r*s**2/8 + r*s/2 - r/4,
#                        3*r**5*s/4 + 3*r**5/8 - r**4*s/2 - r**4/4 - 5*r**3*s/4 - 5*r**3/8 - 15*r**2*s**4/8 - r**2*s**3 + 15*r**2*s**2/8 + 3*r**2*s/2 + r**2/4 + 15*r*s**4/8 + r*s**3 - 15*r*s**2/8 - r*s/2 + r/4,
#                        3*r**5*s/4 - 3*r**5/8 - r**4*s/2 + r**4/4 - 5*r**3*s/4 + 5*r**3/8 + 15*r**2*s**4/8 - r**2*s**3 - 15*r**2*s**2/8 + 3*r**2*s/2 - r**2/4 - 15*r*s**4/8 + r*s**3 + 15*r*s**2/8 - r*s/2 - r/4,
#                        -3*r**5*s/4 + 3*r**5/8 - r**4*s/2 + r**4/4 + 5*r**3*s/4 - 5*r**3/8 + 15*r**2*s**4/8 - r**2*s**3 - 15*r**2*s**2/8 + 3*r**2*s/2 - r**2/4 + 15*r*s**4/8 - r*s**3 - 15*r*s**2/8 + r*s/2 + r/4,
#                        r**4*s + r**4/2 + 15*r**2*s**4/4 + 2*r**2*s**3 - 15*r**2*s**2/4 - 3*r**2*s - r**2/2 - 15*s**4/4 - 2*s**3 + 15*s**2/4 + 2*s,
#                        -3*r**5*s/2 + r**4*s + 5*r**3*s/2 + 2*r**2*s**3 - 3*r**2*s - 2*r*s**3 + r*s,
#                        r**4*s - r**4/2 - 15*r**2*s**4/4 + 2*r**2*s**3 + 15*r**2*s**2/4 - 3*r**2*s + r**2/2 + 15*s**4/4 - 2*s**3 - 15*s**2/4 + 2*s,
#                        3*r**5*s/2 + r**4*s - 5*r**3*s/2 + 2*r**2*s**3 - 3*r**2*s + 2*r*s**3 - r*s,
#                        -2*r**4*s - 4*r**2*s**3 + 6*r**2*s + 4*s**3 - 4*s]])
#
#
#PG = np.array([[ 0.774596669241483, 0.774596669241483],
#                   [ 0.000000000000000, 0.774596669241483],
#                   [-0.774596669241483, 0.774596669241483],
#                   [ 0.774596669241483, 0.000000000000000],
#                   [ 0.000000000000000, 0.000000000000000],
#                   [-0.774596669241483, 0.000000000000000],
#                   [ 0.774596669241483,-0.774596669241483],
#                   [ 0.000000000000000,-0.774596669241483],
#                   [-0.774596669241483,-0.774596669241483]])
#
#Xe = np.array([[2., 2.],
#               [0., 2.],
#               [0., 0.],
#               [2., 0.],
#               [1., 2.],
#               [0., 1.],
#               [1., 0.],
#               [2., 1.],
#               [1., 1.]])
#
#Xe27 = np.concatenate((Xe, Xe, Xe), axis=0)
#
#for i in PG:
#    JKL9 = np.matmul(Xe.T, dNdrKL9(i[0], i[1]).T)
#    JEP9 = np.matmul(Xe.T, dNdsEP9(i[0], i[1]))
#    print('JKL9: \n', JKL9)
#    print('JEP9: \n', JEP9)


#testando o conceito do Jacobiano expandido!!!!
Xe = np.array([[2., 2.],
               [0., 2.],
               [0., 0.],
               [2., 0.],
               [1., 2.],
               [0., 1.],
               [1., 0.],
               [2., 1.],
               [1., 1.]])

PG = np.array([[ 0.774596669241483, 0.774596669241483],
                   [ 0.000000000000000, 0.774596669241483],
                   [-0.774596669241483, 0.774596669241483],
                   [ 0.774596669241483, 0.000000000000000],
                   [ 0.000000000000000, 0.000000000000000],
                   [-0.774596669241483, 0.000000000000000],
                   [ 0.774596669241483,-0.774596669241483],
                   [ 0.000000000000000,-0.774596669241483],
                   [-0.774596669241483,-0.774596669241483]])

r = PG[0, 0]
s = PG[0, 1]

#das funções de forma do elemento de placa de 9 nós com 3 GL por 2 sendo os as duas rotações derivadas da deflexão
dNdr = np.array([[-15*r**4*s**2/8 - 15*r**4*s/8 - r**3*s**2 - r**3*s + 15*r**2*s**2/8 + 15*r**2*s/8 - 3*r*s**5/4 - r*s**4/2 + 5*r*s**3/4 + 3*r*s**2/2 + r*s/2 - 3*s**5/8 - s**4/4 + 5*s**3/8 + s**2/4 - s/4,r*s**5/4 + r*s**4/4 - r*s**3/4 - r*s**2/4 + s**5/8 + s**4/8 - s**3/8 - s**2/8,-5*r**4*s**2/8 - 5*r**4*s/8 - r**3*s**2/2 - r**3*s/2 + 3*r**2*s**2/8 + 3*r**2*s/8 + r*s**2/4 + r*s/4,15*r**4*s**2/8 + 15*r**4*s/8 - r**3*s**2 - r**3*s - 15*r**2*s**2/8 - 15*r**2*s/8 - 3*r*s**5/4 - r*s**4/2 + 5*r*s**3/4 + 3*r*s**2/2 + r*s/2 + 3*s**5/8 + s**4/4 - 5*s**3/8 - s**2/4 + s/4,r*s**5/4 + r*s**4/4 - r*s**3/4 - r*s**2/4 - s**5/8 - s**4/8 + s**3/8 + s**2/8,-5*r**4*s**2/8 - 5*r**4*s/8 + r**3*s**2/2 + r**3*s/2 + 3*r**2*s**2/8 + 3*r**2*s/8 - r*s**2/4 - r*s/4,15*r**4*s**2/8 - 15*r**4*s/8 - r**3*s**2 + r**3*s - 15*r**2*s**2/8 + 15*r**2*s/8 + 3*r*s**5/4 - r*s**4/2 - 5*r*s**3/4 + 3*r*s**2/2 - r*s/2 - 3*s**5/8 + s**4/4 + 5*s**3/8 - s**2/4 - s/4,r*s**5/4 - r*s**4/4 - r*s**3/4 + r*s**2/4 - s**5/8 + s**4/8 + s**3/8 - s**2/8,-5*r**4*s**2/8 + 5*r**4*s/8 + r**3*s**2/2 - r**3*s/2 + 3*r**2*s**2/8 - 3*r**2*s/8 - r*s**2/4 + r*s/4,-15*r**4*s**2/8 + 15*r**4*s/8 - r**3*s**2 + r**3*s + 15*r**2*s**2/8 - 15*r**2*s/8 + 3*r*s**5/4 - r*s**4/2 - 5*r*s**3/4 + 3*r*s**2/2 - r*s/2 + 3*s**5/8 - s**4/4 - 5*s**3/8 + s**2/4 + s/4,r*s**5/4 - r*s**4/4 - r*s**3/4 + r*s**2/4 + s**5/8 - s**4/8 - s**3/8 + s**2/8,-5*r**4*s**2/8 + 5*r**4*s/8 - r**3*s**2/2 + r**3*s/2 + 3*r**2*s**2/8 - 3*r**2*s/8 + r*s**2/4 - r*s/4,2*r**3*s**2 + 2*r**3*s + 3*r*s**5/2 + r*s**4 - 5*r*s**3/2 - 3*r*s**2 - r*s,-r*s**5/2 - r*s**4/2 + r*s**3/2 + r*s**2/2,-5*r**4*s**2/2 - 5*r**4*s/2 + 3*r**2*s**2 + 3*r**2*s - s**2/2 - s/2,-15*r**4*s**2/4 + 15*r**4/4 + 2*r**3*s**2 - 2*r**3 + 15*r**2*s**2/4 - 15*r**2/4 + r*s**4 - 3*r*s**2 + 2*r - s**4/2 + s**2/2,r*s**5 - 2*r*s**3 + r*s - s**5/2 + s**3 - s/2,5*r**4*s**2/4 - 5*r**4/4 - r**3*s**2 + r**3 - 3*r**2*s**2/4 + 3*r**2/4 + r*s**2/2 - r/2,2*r**3*s**2 - 2*r**3*s - 3*r*s**5/2 + r*s**4 + 5*r*s**3/2 - 3*r*s**2 + r*s,-r*s**5/2 + r*s**4/2 + r*s**3/2 - r*s**2/2,-5*r**4*s**2/2 + 5*r**4*s/2 + 3*r**2*s**2 - 3*r**2*s - s**2/2 + s/2,15*r**4*s**2/4 - 15*r**4/4 + 2*r**3*s**2 - 2*r**3 - 15*r**2*s**2/4 + 15*r**2/4 + r*s**4 - 3*r*s**2 + 2*r + s**4/2 - s**2/2,r*s**5 - 2*r*s**3 + r*s + s**5/2 - s**3 + s/2,5*r**4*s**2/4 - 5*r**4/4 + r**3*s**2 - r**3 - 3*r**2*s**2/4 + 3*r**2/4 - r*s**2/2 + r/2,-4*r**3*s**2 + 4*r**3 - 2*r*s**4 + 6*r*s**2 - 4*r,-2*r*s**5 + 4*r*s**3 - 2*r*s,5*r**4*s**2 - 5*r**4 - 6*r**2*s**2 + 6*r**2 + s**2 - 1],
                 [-3*r**5*s/4 - 3*r**5/8 - r**4*s/2 - r**4/4 + 5*r**3*s/4 + 5*r**3/8 - 15*r**2*s**4/8 - r**2*s**3 + 15*r**2*s**2/8 + 3*r**2*s/2 + r**2/4 - 15*r*s**4/8 - r*s**3 + 15*r*s**2/8 + r*s/2 - r/4,5*r**2*s**4/8 + r**2*s**3/2 - 3*r**2*s**2/8 - r**2*s/4 + 5*r*s**4/8 + r*s**3/2 - 3*r*s**2/8 - r*s/4,-r**5*s/4 - r**5/8 - r**4*s/4 - r**4/8 + r**3*s/4 + r**3/8 + r**2*s/4 + r**2/8,3*r**5*s/4 + 3*r**5/8 - r**4*s/2 - r**4/4 - 5*r**3*s/4 - 5*r**3/8 - 15*r**2*s**4/8 - r**2*s**3 + 15*r**2*s**2/8 + 3*r**2*s/2 + r**2/4 + 15*r*s**4/8 + r*s**3 - 15*r*s**2/8 - r*s/2 + r/4,5*r**2*s**4/8 + r**2*s**3/2 - 3*r**2*s**2/8 - r**2*s/4 - 5*r*s**4/8 - r*s**3/2 + 3*r*s**2/8 + r*s/4,-r**5*s/4 - r**5/8 + r**4*s/4 + r**4/8 + r**3*s/4 + r**3/8 - r**2*s/4 - r**2/8,3*r**5*s/4 - 3*r**5/8 - r**4*s/2 + r**4/4 - 5*r**3*s/4 + 5*r**3/8 + 15*r**2*s**4/8 - r**2*s**3 - 15*r**2*s**2/8 + 3*r**2*s/2 - r**2/4 - 15*r*s**4/8 + r*s**3 + 15*r*s**2/8 - r*s/2 - r/4,5*r**2*s**4/8 - r**2*s**3/2 - 3*r**2*s**2/8 + r**2*s/4 - 5*r*s**4/8 + r*s**3/2 + 3*r*s**2/8 - r*s/4,-r**5*s/4 + r**5/8 + r**4*s/4 - r**4/8 + r**3*s/4 - r**3/8 - r**2*s/4 + r**2/8,-3*r**5*s/4 + 3*r**5/8 - r**4*s/2 + r**4/4 + 5*r**3*s/4 - 5*r**3/8 + 15*r**2*s**4/8 - r**2*s**3 - 15*r**2*s**2/8 + 3*r**2*s/2 - r**2/4 + 15*r*s**4/8 - r*s**3 - 15*r*s**2/8 + r*s/2 + r/4,5*r**2*s**4/8 - r**2*s**3/2 - 3*r**2*s**2/8 + r**2*s/4 + 5*r*s**4/8 - r*s**3/2 - 3*r*s**2/8 + r*s/4,-r**5*s/4 + r**5/8 - r**4*s/4 + r**4/8 + r**3*s/4 - r**3/8 + r**2*s/4 - r**2/8,r**4*s + r**4/2 + 15*r**2*s**4/4 + 2*r**2*s**3 - 15*r**2*s**2/4 - 3*r**2*s - r**2/2 - 15*s**4/4 - 2*s**3 + 15*s**2/4 + 2*s,-5*r**2*s**4/4 - r**2*s**3 + 3*r**2*s**2/4 + r**2*s/2 + 5*s**4/4 + s**3 - 3*s**2/4 - s/2,-r**5*s - r**5/2 + 2*r**3*s + r**3 - r*s - r/2,-3*r**5*s/2 + r**4*s + 5*r**3*s/2 + 2*r**2*s**3 - 3*r**2*s - 2*r*s**3 + r*s,5*r**2*s**4/2 - 3*r**2*s**2 + r**2/2 - 5*r*s**4/2 + 3*r*s**2 - r/2,r**5*s/2 - r**4*s/2 - r**3*s/2 + r**2*s/2,r**4*s - r**4/2 - 15*r**2*s**4/4 + 2*r**2*s**3 + 15*r**2*s**2/4 - 3*r**2*s + r**2/2 + 15*s**4/4 - 2*s**3 - 15*s**2/4 + 2*s,-5*r**2*s**4/4 + r**2*s**3 + 3*r**2*s**2/4 - r**2*s/2 + 5*s**4/4 - s**3 - 3*s**2/4 + s/2,-r**5*s + r**5/2 + 2*r**3*s - r**3 - r*s + r/2,3*r**5*s/2 + r**4*s - 5*r**3*s/2 + 2*r**2*s**3 - 3*r**2*s + 2*r*s**3 - r*s,5*r**2*s**4/2 - 3*r**2*s**2 + r**2/2 + 5*r*s**4/2 - 3*r*s**2 + r/2,r**5*s/2 + r**4*s/2 - r**3*s/2 - r**2*s/2,-2*r**4*s - 4*r**2*s**3 + 6*r**2*s + 4*s**3 - 4*s,-5*r**2*s**4 + 6*r**2*s**2 - r**2 + 5*s**4 - 6*s**2 + 1,2*r**5*s - 4*r**3*s + 2*r*s]])
d2Ndr2 = np.array([[s*(-15*r**3*s/2 - 15*r**3/2 - 3*r**2*s - 3*r**2 + 15*r*s/4 + 15*r/4 - 3*s**4/4 - s**3/2 + 5*s**2/4 + 3*s/2 + 1/2),s**2*(s**3 + s**2 - s - 1)/4,s*(-10*r**3*s - 10*r**3 - 6*r**2*s - 6*r**2 + 3*r*s + 3*r + s + 1)/4,s*(15*r**3*s/2 + 15*r**3/2 - 3*r**2*s - 3*r**2 - 15*r*s/4 - 15*r/4 - 3*s**4/4 - s**3/2 + 5*s**2/4 + 3*s/2 + 1/2),s**2*(s**3 + s**2 - s - 1)/4,s*(-10*r**3*s - 10*r**3 + 6*r**2*s + 6*r**2 + 3*r*s + 3*r - s - 1)/4,s*(15*r**3*s/2 - 15*r**3/2 - 3*r**2*s + 3*r**2 - 15*r*s/4 + 15*r/4 + 3*s**4/4 - s**3/2 - 5*s**2/4 + 3*s/2 - 1/2),s**2*(s**3 - s**2 - s + 1)/4,s*(-10*r**3*s + 10*r**3 + 6*r**2*s - 6*r**2 + 3*r*s - 3*r - s + 1)/4,s*(-15*r**3*s/2 + 15*r**3/2 - 3*r**2*s + 3*r**2 + 15*r*s/4 - 15*r/4 + 3*s**4/4 - s**3/2 - 5*s**2/4 + 3*s/2 - 1/2),s**2*(s**3 - s**2 - s + 1)/4,s*(-10*r**3*s + 10*r**3 - 6*r**2*s + 6*r**2 + 3*r*s - 3*r + s - 1)/4,s*(6*r**2*s + 6*r**2 + 3*s**4/2 + s**3 - 5*s**2/2 - 3*s - 1),s**2*(-s**3 - s**2 + s + 1)/2,2*r*s*(-5*r**2*s - 5*r**2 + 3*s + 3),-15*r**3*s**2 + 15*r**3 + 6*r**2*s**2 - 6*r**2 + 15*r*s**2/2 - 15*r/2 + s**4 - 3*s**2 + 2,s*(s**4 - 2*s**2 + 1),5*r**3*s**2 - 5*r**3 - 3*r**2*s**2 + 3*r**2 - 3*r*s**2/2 + 3*r/2 + s**2/2 - 1/2,s*(6*r**2*s - 6*r**2 - 3*s**4/2 + s**3 + 5*s**2/2 - 3*s + 1),s**2*(-s**3 + s**2 + s - 1)/2,2*r*s*(-5*r**2*s + 5*r**2 + 3*s - 3),15*r**3*s**2 - 15*r**3 + 6*r**2*s**2 - 6*r**2 - 15*r*s**2/2 + 15*r/2 + s**4 - 3*s**2 + 2,s*(s**4 - 2*s**2 + 1),5*r**3*s**2 - 5*r**3 + 3*r**2*s**2 - 3*r**2 - 3*r*s**2/2 + 3*r/2 - s**2/2 + 1/2,2*(-6*r**2*s**2 + 6*r**2 - s**4 + 3*s**2 - 2),2*s*(-s**4 + 2*s**2 - 1),4*r*(5*r**2*s**2 - 5*r**2 - 3*s**2 + 3)],
                   [r*(-3*r**4/4 - r**3/2 + 5*r**2/4 - 15*r*s**3/2 - 3*r*s**2 + 15*r*s/4 + 3*r/2 - 15*s**3/2 - 3*s**2 + 15*s/4 + 1/2),r*(10*r*s**3 + 6*r*s**2 - 3*r*s - r + 10*s**3 + 6*s**2 - 3*s - 1)/4,r**2*(-r**3 - r**2 + r + 1)/4,r*(3*r**4/4 - r**3/2 - 5*r**2/4 - 15*r*s**3/2 - 3*r*s**2 + 15*r*s/4 + 3*r/2 + 15*s**3/2 + 3*s**2 - 15*s/4 - 1/2),r*(10*r*s**3 + 6*r*s**2 - 3*r*s - r - 10*s**3 - 6*s**2 + 3*s + 1)/4,r**2*(-r**3 + r**2 + r - 1)/4,r*(3*r**4/4 - r**3/2 - 5*r**2/4 + 15*r*s**3/2 - 3*r*s**2 - 15*r*s/4 + 3*r/2 - 15*s**3/2 + 3*s**2 + 15*s/4 - 1/2),r*(10*r*s**3 - 6*r*s**2 - 3*r*s + r - 10*s**3 + 6*s**2 + 3*s - 1)/4,r**2*(-r**3 + r**2 + r - 1)/4,r*(-3*r**4/4 - r**3/2 + 5*r**2/4 + 15*r*s**3/2 - 3*r*s**2 - 15*r*s/4 + 3*r/2 + 15*s**3/2 - 3*s**2 - 15*s/4 + 1/2),r*(10*r*s**3 - 6*r*s**2 - 3*r*s + r + 10*s**3 - 6*s**2 - 3*s + 1)/4,r**2*(-r**3 - r**2 + r + 1)/4,r**4 + 15*r**2*s**3 + 6*r**2*s**2 - 15*r**2*s/2 - 3*r**2 - 15*s**3 - 6*s**2 + 15*s/2 + 2,-5*r**2*s**3 - 3*r**2*s**2 + 3*r**2*s/2 + r**2/2 + 5*s**3 + 3*s**2 - 3*s/2 - 1/2,r*(-r**4 + 2*r**2 - 1),r*(-3*r**4/2 + r**3 + 5*r**2/2 + 6*r*s**2 - 3*r - 6*s**2 + 1),2*r*s*(5*r*s**2 - 3*r - 5*s**2 + 3),r**2*(r**3 - r**2 - r + 1)/2,r**4 - 15*r**2*s**3 + 6*r**2*s**2 + 15*r**2*s/2 - 3*r**2 + 15*s**3 - 6*s**2 - 15*s/2 + 2,-5*r**2*s**3 + 3*r**2*s**2 + 3*r**2*s/2 - r**2/2 + 5*s**3 - 3*s**2 - 3*s/2 + 1/2,r*(-r**4 + 2*r**2 - 1),r*(3*r**4/2 + r**3 - 5*r**2/2 + 6*r*s**2 - 3*r + 6*s**2 - 1),2*r*s*(5*r*s**2 - 3*r + 5*s**2 - 3),r**2*(r**3 + r**2 - r - 1)/2,2*(-r**4 - 6*r**2*s**2 + 3*r**2 + 6*s**2 - 2),4*s*(-5*r**2*s**2 + 3*r**2 + 5*s**2 - 3),2*r*(r**4 - 2*r**2 + 1)],
                   [-15*r**4*s/4 - 15*r**4/8 - 2*r**3*s - r**3 + 15*r**2*s/4 + 15*r**2/8 - 15*r*s**4/4 - 2*r*s**3 + 15*r*s**2/4 + 3*r*s + r/2 - 15*s**4/8 - s**3 + 15*s**2/8 + s/2 - 1/4,s*(5*r*s**3/4 + r*s**2 - 3*r*s/4 - r/2 + 5*s**3/8 + s**2/2 - 3*s/8 - 1/4),r*(-5*r**3*s/4 - 5*r**3/8 - r**2*s - r**2/2 + 3*r*s/4 + 3*r/8 + s/2 + 1/4),15*r**4*s/4 + 15*r**4/8 - 2*r**3*s - r**3 - 15*r**2*s/4 - 15*r**2/8 - 15*r*s**4/4 - 2*r*s**3 + 15*r*s**2/4 + 3*r*s + r/2 + 15*s**4/8 + s**3 - 15*s**2/8 - s/2 + 1/4,s*(5*r*s**3/4 + r*s**2 - 3*r*s/4 - r/2 - 5*s**3/8 - s**2/2 + 3*s/8 + 1/4),r*(-5*r**3*s/4 - 5*r**3/8 + r**2*s + r**2/2 + 3*r*s/4 + 3*r/8 - s/2 - 1/4),15*r**4*s/4 - 15*r**4/8 - 2*r**3*s + r**3 - 15*r**2*s/4 + 15*r**2/8 + 15*r*s**4/4 - 2*r*s**3 - 15*r*s**2/4 + 3*r*s - r/2 - 15*s**4/8 + s**3 + 15*s**2/8 - s/2 - 1/4,s*(5*r*s**3/4 - r*s**2 - 3*r*s/4 + r/2 - 5*s**3/8 + s**2/2 + 3*s/8 - 1/4),r*(-5*r**3*s/4 + 5*r**3/8 + r**2*s - r**2/2 + 3*r*s/4 - 3*r/8 - s/2 + 1/4),-15*r**4*s/4 + 15*r**4/8 - 2*r**3*s + r**3 + 15*r**2*s/4 - 15*r**2/8 + 15*r*s**4/4 - 2*r*s**3 - 15*r*s**2/4 + 3*r*s - r/2 + 15*s**4/8 - s**3 - 15*s**2/8 + s/2 + 1/4,s*(5*r*s**3/4 - r*s**2 - 3*r*s/4 + r/2 + 5*s**3/8 - s**2/2 - 3*s/8 + 1/4),r*(-5*r**3*s/4 + 5*r**3/8 - r**2*s + r**2/2 + 3*r*s/4 - 3*r/8 + s/2 - 1/4),r*(4*r**2*s + 2*r**2 + 15*s**4/2 + 4*s**3 - 15*s**2/2 - 6*s - 1),r*s*(-5*s**3/2 - 2*s**2 + 3*s/2 + 1),-5*r**4*s - 5*r**4/2 + 6*r**2*s + 3*r**2 - s - 1/2,s*(-15*r**4/2 + 4*r**3 + 15*r**2/2 + 4*r*s**2 - 6*r - 2*s**2 + 1),5*r*s**4 - 6*r*s**2 + r - 5*s**4/2 + 3*s**2 - 1/2,r*s*(5*r**3/2 - 2*r**2 - 3*r/2 + 1),r*(4*r**2*s - 2*r**2 - 15*s**4/2 + 4*s**3 + 15*s**2/2 - 6*s + 1),r*s*(-5*s**3/2 + 2*s**2 + 3*s/2 - 1),-5*r**4*s + 5*r**4/2 + 6*r**2*s - 3*r**2 - s + 1/2,s*(15*r**4/2 + 4*r**3 - 15*r**2/2 + 4*r*s**2 - 6*r + 2*s**2 - 1),5*r*s**4 - 6*r*s**2 + r + 5*s**4/2 - 3*s**2 + 1/2,r*s*(5*r**3/2 + 2*r**2 - 3*r/2 - 1),4*r*s*(-2*r**2 - 2*s**2 + 3), 2*r*(-5*s**4 + 6*s**2 - 1),2*s*(5*r**4 - 6*r**2 + 1)]])

#das funções de forma do elemento do estado plano de 9 nós
dN_w = np.array([[r*s**2/2 + r*s/2 + s**2/4 + s/4, r**2*s/2 + r**2/4 + r*s/2 + r/4],
                    [r*s**2/2 + r*s/2 - s**2/4 - s/4, r**2*s/2 + r**2/4 - r*s/2 - r/4],
                    [r*s**2/2 - r*s/2 - s**2/4 + s/4, r**2*s/2 - r**2/4 - r*s/2 + r/4],
                    [r*s**2/2 - r*s/2 + s**2/4 - s/4, r**2*s/2 - r**2/4 + r*s/2 - r/4],
                    [                  -r*s**2 - r*s,      -r**2*s - r**2/2 + s + 1/2],
                    [     -r*s**2 + r + s**2/2 - 1/2,                   -r**2*s + r*s],
                    [                  -r*s**2 + r*s,      -r**2*s + r**2/2 + s - 1/2],
                    [     -r*s**2 + r - s**2/2 + 1/2,                   -r**2*s - r*s],
                    [                 2*r*s**2 - 2*r,                  2*r**2*s - 2*s]])
dN2_w = np.array([[ s*(s + 1)/2,  r*(r + 1)/2],
                    [ s*(s + 1)/2,  r*(r - 1)/2],
                    [ s*(s - 1)/2,  r*(r - 1)/2],
                    [ s*(s - 1)/2,  r*(r + 1)/2],
                    [  -s*(s + 1),    -r**2 + 1],
                    [   -s**2 + 1,   r*(-r + 1)],
                    [  s*(-s + 1),    -r**2 + 1],
                    [   -s**2 + 1,   -r*(r + 1)],
                    [2*(s**2 - 1), 2*(r**2 - 1)]])
dNrs_w = np.array([[r*s + r/2 + s/2 + 1/4],
                    [r*s + r/2 - s/2 - 1/4],
                    [r*s - r/2 - s/2 + 1/4],
                    [r*s - r/2 + s/2 - 1/4],
                    [         -r*(2*s + 1)],
                    [         s*(-2*r + 1)],
                    [         r*(-2*s + 1)],
                    [         -s*(2*r + 1)],
                    [                4*r*s]])

#Jacobiano calculado utilizando as funções de forma do estado plano
J = np.matmul(Xe.T, dN_w)
dJ = np.matmul(Xe.T, dN2_w)
dJrs = np.matmul(Xe.T, dNrs_w)

J23 = np.array([ [dJ[0,0], dJ[1,0]],
                 [dJ[0,1], dJ[1,1]],
                 [dJrs[0,0], dJrs[1,0]] ])

#jacobiano expandido
Jex = np.array([ [     J[0,0]**2,     J[1,0]**2,               2*J[0,0]*J[1,0] ],
                 [     J[0,1]**2,     J[1,1]**2,               2*J[0,1]*J[1,1] ],
                 [ J[0,0]*J[0,1], J[1,0]*J[1,1], J[1,0]*J[0,1] + J[0,0]*J[1,1] ]])

JI = np.linalg.inv(J)
JexI = np.linalg.inv(Jex)

##derivadas das funções de interpolação do elemento no sistema local x y para placas
dNdx = np.matmul(dNdr.T, JI)
B = np.matmul(JexI, ( d2Ndr2 - np.matmul(J23, dNdx.T) ) )